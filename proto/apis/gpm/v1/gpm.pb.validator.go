// Code generated by proto-gen-validator. DO NOT EDIT.
// source: github.com/gpm2/gpm/proto/apis/gpm/v1/gpm.proto

package gpmv1

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	is "github.com/lack-io/vine/util/is"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func (m *Service) Validate() error {
	return m.ValidateE("")
}

func (m *Service) ValidateE(prefix string) error {
	errs := make([]error, 0)
	if len(m.Name) == 0 {
		errs = append(errs, fmt.Errorf("field '%sname' is required", prefix))
	}
	if len(m.Bin) == 0 {
		errs = append(errs, fmt.Errorf("field '%sbin' is required", prefix))
	}
	if len(m.Status) != 0 {
		if !is.In([]string{"init", "running", "stopped", "failed", "upgrading"}, string(m.Status)) {
			errs = append(errs, fmt.Errorf("field '%sstatus' must in '[init,running,stopped,failed,upgrading]'", prefix))
		}
	}
	return is.MargeErr(errs...)
}

func (m *SysProcAttr) Validate() error {
	return m.ValidateE("")
}

func (m *SysProcAttr) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *ServiceSpec) Validate() error {
	return m.ValidateE("")
}

func (m *ServiceSpec) ValidateE(prefix string) error {
	errs := make([]error, 0)
	if len(m.Name) == 0 {
		errs = append(errs, fmt.Errorf("field '%sname' is required", prefix))
	}
	if len(m.Bin) == 0 {
		errs = append(errs, fmt.Errorf("field '%sbin' is required", prefix))
	}
	if len(m.Version) == 0 {
		errs = append(errs, fmt.Errorf("field '%sversion' is required", prefix))
	}
	return is.MargeErr(errs...)
}

func (m *ProcLog) Validate() error {
	return m.ValidateE("")
}

func (m *ProcLog) ValidateE(prefix string) error {
	errs := make([]error, 0)
	if int64(m.Expire) == 0 {
		m.Expire = 30
	}
	if int64(m.Expire) != 0 {
	}
	return is.MargeErr(errs...)
}

func (m *Stat) Validate() error {
	return m.ValidateE("")
}

func (m *Stat) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *GpmInfo) Validate() error {
	return m.ValidateE("")
}

func (m *GpmInfo) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *Package) Validate() error {
	return m.ValidateE("")
}

func (m *Package) ValidateE(prefix string) error {
	errs := make([]error, 0)
	if len(m.Package) == 0 {
		errs = append(errs, fmt.Errorf("field '%spackage' is required", prefix))
	}
	if int64(m.Total) == 0 {
		errs = append(errs, fmt.Errorf("field '%stotal' is required", prefix))
	}
	return is.MargeErr(errs...)
}

func (m *InstallServiceResult) Validate() error {
	return m.ValidateE("")
}

func (m *InstallServiceResult) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *UpgradeServiceResult) Validate() error {
	return m.ValidateE("")
}

func (m *UpgradeServiceResult) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *ServiceLog) Validate() error {
	return m.ValidateE("")
}

func (m *ServiceLog) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *ServiceVersion) Validate() error {
	return m.ValidateE("")
}

func (m *ServiceVersion) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *FileInfo) Validate() error {
	return m.ValidateE("")
}

func (m *FileInfo) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *ExecIn) Validate() error {
	return m.ValidateE("")
}

func (m *ExecIn) ValidateE(prefix string) error {
	errs := make([]error, 0)
	if len(m.Name) == 0 {
		errs = append(errs, fmt.Errorf("field '%sname' is required", prefix))
	}
	return is.MargeErr(errs...)
}

func (m *UpdateIn) Validate() error {
	return m.ValidateE("")
}

func (m *UpdateIn) ValidateE(prefix string) error {
	errs := make([]error, 0)
	if len(m.Name) == 0 {
		errs = append(errs, fmt.Errorf("field '%sname' is required", prefix))
	}
	if len(m.Version) == 0 {
		errs = append(errs, fmt.Errorf("field '%sversion' is required", prefix))
	}
	return is.MargeErr(errs...)
}

func (m *UpdateResult) Validate() error {
	return m.ValidateE("")
}

func (m *UpdateResult) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *ExecResult) Validate() error {
	return m.ValidateE("")
}

func (m *ExecResult) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *PullResult) Validate() error {
	return m.ValidateE("")
}

func (m *PullResult) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *PushIn) Validate() error {
	return m.ValidateE("")
}

func (m *PushIn) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *PushResult) Validate() error {
	return m.ValidateE("")
}

func (m *PushResult) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *TerminalIn) Validate() error {
	return m.ValidateE("")
}

func (m *TerminalIn) ValidateE(prefix string) error {
	errs := make([]error, 0)
	if len(m.Command) == 0 {
		errs = append(errs, fmt.Errorf("field '%scommand' is required", prefix))
	}
	return is.MargeErr(errs...)
}

func (m *TerminalResult) Validate() error {
	return m.ValidateE("")
}

func (m *TerminalResult) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}
