// Code generated by proto-gen-gogo. DO NOT EDIT.
// source: github.com/gpm2/gpm/proto/service/gpm/v1/gpm.proto

package gpmv1

import (
	context "context"
	ebinary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	v1 "github.com/gpm2/gpm/proto/apis/gpm/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

var _ = ebinary.BigEndian

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

type Empty struct {
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_9386d4f8a96ae2d2, []int{0}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return m.XSize()
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type ListServiceReq struct {
}

func (m *ListServiceReq) Reset()         { *m = ListServiceReq{} }
func (m *ListServiceReq) String() string { return proto.CompactTextString(m) }
func (*ListServiceReq) ProtoMessage()    {}
func (*ListServiceReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9386d4f8a96ae2d2, []int{1}
}
func (m *ListServiceReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListServiceReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListServiceReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListServiceReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListServiceReq.Merge(m, src)
}
func (m *ListServiceReq) XXX_Size() int {
	return m.XSize()
}
func (m *ListServiceReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListServiceReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListServiceReq proto.InternalMessageInfo

type ListServiceRsp struct {
	Services []*v1.Service `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	Total    int64         `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *ListServiceRsp) Reset()         { *m = ListServiceRsp{} }
func (m *ListServiceRsp) String() string { return proto.CompactTextString(m) }
func (*ListServiceRsp) ProtoMessage()    {}
func (*ListServiceRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9386d4f8a96ae2d2, []int{2}
}
func (m *ListServiceRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListServiceRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListServiceRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListServiceRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListServiceRsp.Merge(m, src)
}
func (m *ListServiceRsp) XXX_Size() int {
	return m.XSize()
}
func (m *ListServiceRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListServiceRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ListServiceRsp proto.InternalMessageInfo

type GetServiceReq struct {
	// 服务名称
	// +gen:required
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *GetServiceReq) Reset()         { *m = GetServiceReq{} }
func (m *GetServiceReq) String() string { return proto.CompactTextString(m) }
func (*GetServiceReq) ProtoMessage()    {}
func (*GetServiceReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9386d4f8a96ae2d2, []int{3}
}
func (m *GetServiceReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetServiceReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetServiceReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetServiceReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetServiceReq.Merge(m, src)
}
func (m *GetServiceReq) XXX_Size() int {
	return m.XSize()
}
func (m *GetServiceReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetServiceReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetServiceReq proto.InternalMessageInfo

type GetServiceRsp struct {
	Service *v1.Service `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
}

func (m *GetServiceRsp) Reset()         { *m = GetServiceRsp{} }
func (m *GetServiceRsp) String() string { return proto.CompactTextString(m) }
func (*GetServiceRsp) ProtoMessage()    {}
func (*GetServiceRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9386d4f8a96ae2d2, []int{4}
}
func (m *GetServiceRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetServiceRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetServiceRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetServiceRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetServiceRsp.Merge(m, src)
}
func (m *GetServiceRsp) XXX_Size() int {
	return m.XSize()
}
func (m *GetServiceRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetServiceRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetServiceRsp proto.InternalMessageInfo

type CreateServiceReq struct {
	// 服务名称
	// +gen:required
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// 执行器路径
	// +gen:required
	Bin string `protobuf:"bytes,2,opt,name=bin,proto3" json:"bin,omitempty"`
	// 服务启动参数
	Args []string `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	// 服务家目录
	Dir string `protobuf:"bytes,4,opt,name=dir,proto3" json:"dir,omitempty"`
	// 服务环境变量
	Env map[string]string `protobuf:"bytes,5,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 服务系统参数
	SysProcAttr *v1.SysProcAttr `protobuf:"bytes,6,opt,name=sysProcAttr,proto3" json:"sysProcAttr,omitempty"`
	// 服务日志配置
	Log *v1.ProcLog `protobuf:"bytes,7,opt,name=log,proto3" json:"log,omitempty"`
	// 服务版本
	Version string `protobuf:"bytes,8,opt,name=version,proto3" json:"version,omitempty"`
	// 是否自启动, 默认为 false
	AutoRestart int32 `protobuf:"varint,9,opt,name=autoRestart,proto3" json:"autoRestart,omitempty"`
}

func (m *CreateServiceReq) Reset()         { *m = CreateServiceReq{} }
func (m *CreateServiceReq) String() string { return proto.CompactTextString(m) }
func (*CreateServiceReq) ProtoMessage()    {}
func (*CreateServiceReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9386d4f8a96ae2d2, []int{5}
}
func (m *CreateServiceReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateServiceReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateServiceReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateServiceReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateServiceReq.Merge(m, src)
}
func (m *CreateServiceReq) XXX_Size() int {
	return m.XSize()
}
func (m *CreateServiceReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateServiceReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateServiceReq proto.InternalMessageInfo

type CreateServiceRsp struct {
	Service *v1.Service `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
}

func (m *CreateServiceRsp) Reset()         { *m = CreateServiceRsp{} }
func (m *CreateServiceRsp) String() string { return proto.CompactTextString(m) }
func (*CreateServiceRsp) ProtoMessage()    {}
func (*CreateServiceRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9386d4f8a96ae2d2, []int{6}
}
func (m *CreateServiceRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateServiceRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateServiceRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateServiceRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateServiceRsp.Merge(m, src)
}
func (m *CreateServiceRsp) XXX_Size() int {
	return m.XSize()
}
func (m *CreateServiceRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateServiceRsp.DiscardUnknown(m)
}

var xxx_messageInfo_CreateServiceRsp proto.InternalMessageInfo

type StartServiceReq struct {
	// +gen:required
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *StartServiceReq) Reset()         { *m = StartServiceReq{} }
func (m *StartServiceReq) String() string { return proto.CompactTextString(m) }
func (*StartServiceReq) ProtoMessage()    {}
func (*StartServiceReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9386d4f8a96ae2d2, []int{7}
}
func (m *StartServiceReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartServiceReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartServiceReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartServiceReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartServiceReq.Merge(m, src)
}
func (m *StartServiceReq) XXX_Size() int {
	return m.XSize()
}
func (m *StartServiceReq) XXX_DiscardUnknown() {
	xxx_messageInfo_StartServiceReq.DiscardUnknown(m)
}

var xxx_messageInfo_StartServiceReq proto.InternalMessageInfo

type StartServiceRsp struct {
	Service *v1.Service `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
}

func (m *StartServiceRsp) Reset()         { *m = StartServiceRsp{} }
func (m *StartServiceRsp) String() string { return proto.CompactTextString(m) }
func (*StartServiceRsp) ProtoMessage()    {}
func (*StartServiceRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9386d4f8a96ae2d2, []int{8}
}
func (m *StartServiceRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartServiceRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartServiceRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartServiceRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartServiceRsp.Merge(m, src)
}
func (m *StartServiceRsp) XXX_Size() int {
	return m.XSize()
}
func (m *StartServiceRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_StartServiceRsp.DiscardUnknown(m)
}

var xxx_messageInfo_StartServiceRsp proto.InternalMessageInfo

type StopServiceReq struct {
	// +gen:required
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *StopServiceReq) Reset()         { *m = StopServiceReq{} }
func (m *StopServiceReq) String() string { return proto.CompactTextString(m) }
func (*StopServiceReq) ProtoMessage()    {}
func (*StopServiceReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9386d4f8a96ae2d2, []int{9}
}
func (m *StopServiceReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StopServiceReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StopServiceReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StopServiceReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopServiceReq.Merge(m, src)
}
func (m *StopServiceReq) XXX_Size() int {
	return m.XSize()
}
func (m *StopServiceReq) XXX_DiscardUnknown() {
	xxx_messageInfo_StopServiceReq.DiscardUnknown(m)
}

var xxx_messageInfo_StopServiceReq proto.InternalMessageInfo

type StopServiceRsp struct {
	Service *v1.Service `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
}

func (m *StopServiceRsp) Reset()         { *m = StopServiceRsp{} }
func (m *StopServiceRsp) String() string { return proto.CompactTextString(m) }
func (*StopServiceRsp) ProtoMessage()    {}
func (*StopServiceRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9386d4f8a96ae2d2, []int{10}
}
func (m *StopServiceRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StopServiceRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StopServiceRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StopServiceRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopServiceRsp.Merge(m, src)
}
func (m *StopServiceRsp) XXX_Size() int {
	return m.XSize()
}
func (m *StopServiceRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_StopServiceRsp.DiscardUnknown(m)
}

var xxx_messageInfo_StopServiceRsp proto.InternalMessageInfo

type RebootServiceReq struct {
	// +gen:required
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *RebootServiceReq) Reset()         { *m = RebootServiceReq{} }
func (m *RebootServiceReq) String() string { return proto.CompactTextString(m) }
func (*RebootServiceReq) ProtoMessage()    {}
func (*RebootServiceReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9386d4f8a96ae2d2, []int{11}
}
func (m *RebootServiceReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RebootServiceReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RebootServiceReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RebootServiceReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RebootServiceReq.Merge(m, src)
}
func (m *RebootServiceReq) XXX_Size() int {
	return m.XSize()
}
func (m *RebootServiceReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RebootServiceReq.DiscardUnknown(m)
}

var xxx_messageInfo_RebootServiceReq proto.InternalMessageInfo

type RebootServiceRsp struct {
	Service *v1.Service `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
}

func (m *RebootServiceRsp) Reset()         { *m = RebootServiceRsp{} }
func (m *RebootServiceRsp) String() string { return proto.CompactTextString(m) }
func (*RebootServiceRsp) ProtoMessage()    {}
func (*RebootServiceRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9386d4f8a96ae2d2, []int{12}
}
func (m *RebootServiceRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RebootServiceRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RebootServiceRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RebootServiceRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RebootServiceRsp.Merge(m, src)
}
func (m *RebootServiceRsp) XXX_Size() int {
	return m.XSize()
}
func (m *RebootServiceRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_RebootServiceRsp.DiscardUnknown(m)
}

var xxx_messageInfo_RebootServiceRsp proto.InternalMessageInfo

type DeleteServiceReq struct {
	// +gen:required
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *DeleteServiceReq) Reset()         { *m = DeleteServiceReq{} }
func (m *DeleteServiceReq) String() string { return proto.CompactTextString(m) }
func (*DeleteServiceReq) ProtoMessage()    {}
func (*DeleteServiceReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9386d4f8a96ae2d2, []int{13}
}
func (m *DeleteServiceReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteServiceReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteServiceReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteServiceReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteServiceReq.Merge(m, src)
}
func (m *DeleteServiceReq) XXX_Size() int {
	return m.XSize()
}
func (m *DeleteServiceReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteServiceReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteServiceReq proto.InternalMessageInfo

type DeleteServiceRsp struct {
	Service *v1.Service `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
}

func (m *DeleteServiceRsp) Reset()         { *m = DeleteServiceRsp{} }
func (m *DeleteServiceRsp) String() string { return proto.CompactTextString(m) }
func (*DeleteServiceRsp) ProtoMessage()    {}
func (*DeleteServiceRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9386d4f8a96ae2d2, []int{14}
}
func (m *DeleteServiceRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteServiceRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteServiceRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteServiceRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteServiceRsp.Merge(m, src)
}
func (m *DeleteServiceRsp) XXX_Size() int {
	return m.XSize()
}
func (m *DeleteServiceRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteServiceRsp.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteServiceRsp proto.InternalMessageInfo

type CatServiceLogReq struct {
	// +gen:required
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *CatServiceLogReq) Reset()         { *m = CatServiceLogReq{} }
func (m *CatServiceLogReq) String() string { return proto.CompactTextString(m) }
func (*CatServiceLogReq) ProtoMessage()    {}
func (*CatServiceLogReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9386d4f8a96ae2d2, []int{15}
}
func (m *CatServiceLogReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CatServiceLogReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CatServiceLogReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CatServiceLogReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CatServiceLogReq.Merge(m, src)
}
func (m *CatServiceLogReq) XXX_Size() int {
	return m.XSize()
}
func (m *CatServiceLogReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CatServiceLogReq.DiscardUnknown(m)
}

var xxx_messageInfo_CatServiceLogReq proto.InternalMessageInfo

type CatServiceLogRsp struct {
	Text []byte `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *CatServiceLogRsp) Reset()         { *m = CatServiceLogRsp{} }
func (m *CatServiceLogRsp) String() string { return proto.CompactTextString(m) }
func (*CatServiceLogRsp) ProtoMessage()    {}
func (*CatServiceLogRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9386d4f8a96ae2d2, []int{16}
}
func (m *CatServiceLogRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CatServiceLogRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CatServiceLogRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CatServiceLogRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CatServiceLogRsp.Merge(m, src)
}
func (m *CatServiceLogRsp) XXX_Size() int {
	return m.XSize()
}
func (m *CatServiceLogRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_CatServiceLogRsp.DiscardUnknown(m)
}

var xxx_messageInfo_CatServiceLogRsp proto.InternalMessageInfo

type WatchServiceLogReq struct {
	// +gen:required
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *WatchServiceLogReq) Reset()         { *m = WatchServiceLogReq{} }
func (m *WatchServiceLogReq) String() string { return proto.CompactTextString(m) }
func (*WatchServiceLogReq) ProtoMessage()    {}
func (*WatchServiceLogReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9386d4f8a96ae2d2, []int{17}
}
func (m *WatchServiceLogReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatchServiceLogReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatchServiceLogReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WatchServiceLogReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchServiceLogReq.Merge(m, src)
}
func (m *WatchServiceLogReq) XXX_Size() int {
	return m.XSize()
}
func (m *WatchServiceLogReq) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchServiceLogReq.DiscardUnknown(m)
}

var xxx_messageInfo_WatchServiceLogReq proto.InternalMessageInfo

type WatchServiceLogRsp struct {
	Log *v1.ProcLog `protobuf:"bytes,1,opt,name=log,proto3" json:"log,omitempty"`
}

func (m *WatchServiceLogRsp) Reset()         { *m = WatchServiceLogRsp{} }
func (m *WatchServiceLogRsp) String() string { return proto.CompactTextString(m) }
func (*WatchServiceLogRsp) ProtoMessage()    {}
func (*WatchServiceLogRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9386d4f8a96ae2d2, []int{18}
}
func (m *WatchServiceLogRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatchServiceLogRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatchServiceLogRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WatchServiceLogRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchServiceLogRsp.Merge(m, src)
}
func (m *WatchServiceLogRsp) XXX_Size() int {
	return m.XSize()
}
func (m *WatchServiceLogRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchServiceLogRsp.DiscardUnknown(m)
}

var xxx_messageInfo_WatchServiceLogRsp proto.InternalMessageInfo

type InstallServiceReq struct {
	// 服务名称
	// +gen:required
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// 执行器路径
	// +gen:required
	Bin string `protobuf:"bytes,2,opt,name=bin,proto3" json:"bin,omitempty"`
	// 服务启动参数
	Args []string `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	// 服务家目录
	Dir string `protobuf:"bytes,4,opt,name=dir,proto3" json:"dir,omitempty"`
	// 服务环境变量
	Env map[string]string `protobuf:"bytes,5,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 服务系统参数
	SysProcAttr *v1.SysProcAttr `protobuf:"bytes,6,opt,name=sysProcAttr,proto3" json:"sysProcAttr,omitempty"`
	// 服务日志配置
	Log *v1.ProcLog `protobuf:"bytes,7,opt,name=log,proto3" json:"log,omitempty"`
	// 服务版本
	Version string `protobuf:"bytes,8,opt,name=version,proto3" json:"version,omitempty"`
	// 是否自启动, 默认为 false
	AutoRestart int32 `protobuf:"varint,9,opt,name=autoRestart,proto3" json:"autoRestart,omitempty"`
	// +gen:required
	Pack *v1.Package `protobuf:"bytes,21,opt,name=pack,proto3" json:"pack,omitempty"`
}

func (m *InstallServiceReq) Reset()         { *m = InstallServiceReq{} }
func (m *InstallServiceReq) String() string { return proto.CompactTextString(m) }
func (*InstallServiceReq) ProtoMessage()    {}
func (*InstallServiceReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9386d4f8a96ae2d2, []int{19}
}
func (m *InstallServiceReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstallServiceReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstallServiceReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstallServiceReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallServiceReq.Merge(m, src)
}
func (m *InstallServiceReq) XXX_Size() int {
	return m.XSize()
}
func (m *InstallServiceReq) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallServiceReq.DiscardUnknown(m)
}

var xxx_messageInfo_InstallServiceReq proto.InternalMessageInfo

type InstallServiceRsp struct {
	Result *v1.InstallServiceResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *InstallServiceRsp) Reset()         { *m = InstallServiceRsp{} }
func (m *InstallServiceRsp) String() string { return proto.CompactTextString(m) }
func (*InstallServiceRsp) ProtoMessage()    {}
func (*InstallServiceRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9386d4f8a96ae2d2, []int{20}
}
func (m *InstallServiceRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstallServiceRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstallServiceRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstallServiceRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallServiceRsp.Merge(m, src)
}
func (m *InstallServiceRsp) XXX_Size() int {
	return m.XSize()
}
func (m *InstallServiceRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallServiceRsp.DiscardUnknown(m)
}

var xxx_messageInfo_InstallServiceRsp proto.InternalMessageInfo

type ListServiceVersionsReq struct {
	// +gen:required
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *ListServiceVersionsReq) Reset()         { *m = ListServiceVersionsReq{} }
func (m *ListServiceVersionsReq) String() string { return proto.CompactTextString(m) }
func (*ListServiceVersionsReq) ProtoMessage()    {}
func (*ListServiceVersionsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9386d4f8a96ae2d2, []int{21}
}
func (m *ListServiceVersionsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListServiceVersionsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListServiceVersionsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListServiceVersionsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListServiceVersionsReq.Merge(m, src)
}
func (m *ListServiceVersionsReq) XXX_Size() int {
	return m.XSize()
}
func (m *ListServiceVersionsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListServiceVersionsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListServiceVersionsReq proto.InternalMessageInfo

type ListServiceVersionsRsp struct {
	Versions []*v1.ServiceVersion `protobuf:"bytes,1,rep,name=versions,proto3" json:"versions,omitempty"`
}

func (m *ListServiceVersionsRsp) Reset()         { *m = ListServiceVersionsRsp{} }
func (m *ListServiceVersionsRsp) String() string { return proto.CompactTextString(m) }
func (*ListServiceVersionsRsp) ProtoMessage()    {}
func (*ListServiceVersionsRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9386d4f8a96ae2d2, []int{22}
}
func (m *ListServiceVersionsRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListServiceVersionsRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListServiceVersionsRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListServiceVersionsRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListServiceVersionsRsp.Merge(m, src)
}
func (m *ListServiceVersionsRsp) XXX_Size() int {
	return m.XSize()
}
func (m *ListServiceVersionsRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListServiceVersionsRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ListServiceVersionsRsp proto.InternalMessageInfo

type UpgradeServiceReq struct {
	// 服务名称
	// +gen:required
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// +gen:required
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// +gen:required
	Pack *v1.Package `protobuf:"bytes,21,opt,name=pack,proto3" json:"pack,omitempty"`
}

func (m *UpgradeServiceReq) Reset()         { *m = UpgradeServiceReq{} }
func (m *UpgradeServiceReq) String() string { return proto.CompactTextString(m) }
func (*UpgradeServiceReq) ProtoMessage()    {}
func (*UpgradeServiceReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9386d4f8a96ae2d2, []int{23}
}
func (m *UpgradeServiceReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpgradeServiceReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpgradeServiceReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpgradeServiceReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpgradeServiceReq.Merge(m, src)
}
func (m *UpgradeServiceReq) XXX_Size() int {
	return m.XSize()
}
func (m *UpgradeServiceReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpgradeServiceReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpgradeServiceReq proto.InternalMessageInfo

type UpgradeServiceRsp struct {
	Result *v1.UpgradeServiceResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *UpgradeServiceRsp) Reset()         { *m = UpgradeServiceRsp{} }
func (m *UpgradeServiceRsp) String() string { return proto.CompactTextString(m) }
func (*UpgradeServiceRsp) ProtoMessage()    {}
func (*UpgradeServiceRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9386d4f8a96ae2d2, []int{24}
}
func (m *UpgradeServiceRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpgradeServiceRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpgradeServiceRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpgradeServiceRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpgradeServiceRsp.Merge(m, src)
}
func (m *UpgradeServiceRsp) XXX_Size() int {
	return m.XSize()
}
func (m *UpgradeServiceRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpgradeServiceRsp.DiscardUnknown(m)
}

var xxx_messageInfo_UpgradeServiceRsp proto.InternalMessageInfo

type RollbackServiceReq struct {
	// +gen:required
	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Revision string `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (m *RollbackServiceReq) Reset()         { *m = RollbackServiceReq{} }
func (m *RollbackServiceReq) String() string { return proto.CompactTextString(m) }
func (*RollbackServiceReq) ProtoMessage()    {}
func (*RollbackServiceReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9386d4f8a96ae2d2, []int{25}
}
func (m *RollbackServiceReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RollbackServiceReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RollbackServiceReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RollbackServiceReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollbackServiceReq.Merge(m, src)
}
func (m *RollbackServiceReq) XXX_Size() int {
	return m.XSize()
}
func (m *RollbackServiceReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RollbackServiceReq.DiscardUnknown(m)
}

var xxx_messageInfo_RollbackServiceReq proto.InternalMessageInfo

type RollbackServiceRsp struct {
}

func (m *RollbackServiceRsp) Reset()         { *m = RollbackServiceRsp{} }
func (m *RollbackServiceRsp) String() string { return proto.CompactTextString(m) }
func (*RollbackServiceRsp) ProtoMessage()    {}
func (*RollbackServiceRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9386d4f8a96ae2d2, []int{26}
}
func (m *RollbackServiceRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RollbackServiceRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RollbackServiceRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RollbackServiceRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollbackServiceRsp.Merge(m, src)
}
func (m *RollbackServiceRsp) XXX_Size() int {
	return m.XSize()
}
func (m *RollbackServiceRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_RollbackServiceRsp.DiscardUnknown(m)
}

var xxx_messageInfo_RollbackServiceRsp proto.InternalMessageInfo

type LsReq struct {
	// +gen:required
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *LsReq) Reset()         { *m = LsReq{} }
func (m *LsReq) String() string { return proto.CompactTextString(m) }
func (*LsReq) ProtoMessage()    {}
func (*LsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9386d4f8a96ae2d2, []int{27}
}
func (m *LsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LsReq.Merge(m, src)
}
func (m *LsReq) XXX_Size() int {
	return m.XSize()
}
func (m *LsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LsReq.DiscardUnknown(m)
}

var xxx_messageInfo_LsReq proto.InternalMessageInfo

type LsRsp struct {
	Files []*v1.FileInfo `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
}

func (m *LsRsp) Reset()         { *m = LsRsp{} }
func (m *LsRsp) String() string { return proto.CompactTextString(m) }
func (*LsRsp) ProtoMessage()    {}
func (*LsRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9386d4f8a96ae2d2, []int{28}
}
func (m *LsRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LsRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LsRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LsRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LsRsp.Merge(m, src)
}
func (m *LsRsp) XXX_Size() int {
	return m.XSize()
}
func (m *LsRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_LsRsp.DiscardUnknown(m)
}

var xxx_messageInfo_LsRsp proto.InternalMessageInfo

type PullReq struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *PullReq) Reset()         { *m = PullReq{} }
func (m *PullReq) String() string { return proto.CompactTextString(m) }
func (*PullReq) ProtoMessage()    {}
func (*PullReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9386d4f8a96ae2d2, []int{29}
}
func (m *PullReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PullReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PullReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PullReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullReq.Merge(m, src)
}
func (m *PullReq) XXX_Size() int {
	return m.XSize()
}
func (m *PullReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PullReq.DiscardUnknown(m)
}

var xxx_messageInfo_PullReq proto.InternalMessageInfo

type PullRsp struct {
	Result *v1.PullResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *PullRsp) Reset()         { *m = PullRsp{} }
func (m *PullRsp) String() string { return proto.CompactTextString(m) }
func (*PullRsp) ProtoMessage()    {}
func (*PullRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9386d4f8a96ae2d2, []int{30}
}
func (m *PullRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PullRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PullRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PullRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullRsp.Merge(m, src)
}
func (m *PullRsp) XXX_Size() int {
	return m.XSize()
}
func (m *PullRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_PullRsp.DiscardUnknown(m)
}

var xxx_messageInfo_PullRsp proto.InternalMessageInfo

type PushReq struct {
	In *v1.PushIn `protobuf:"bytes,1,opt,name=in,proto3" json:"in,omitempty"`
}

func (m *PushReq) Reset()         { *m = PushReq{} }
func (m *PushReq) String() string { return proto.CompactTextString(m) }
func (*PushReq) ProtoMessage()    {}
func (*PushReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9386d4f8a96ae2d2, []int{31}
}
func (m *PushReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushReq.Merge(m, src)
}
func (m *PushReq) XXX_Size() int {
	return m.XSize()
}
func (m *PushReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PushReq.DiscardUnknown(m)
}

var xxx_messageInfo_PushReq proto.InternalMessageInfo

type PushRsp struct {
}

func (m *PushRsp) Reset()         { *m = PushRsp{} }
func (m *PushRsp) String() string { return proto.CompactTextString(m) }
func (*PushRsp) ProtoMessage()    {}
func (*PushRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9386d4f8a96ae2d2, []int{32}
}
func (m *PushRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushRsp.Merge(m, src)
}
func (m *PushRsp) XXX_Size() int {
	return m.XSize()
}
func (m *PushRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_PushRsp.DiscardUnknown(m)
}

var xxx_messageInfo_PushRsp proto.InternalMessageInfo

type ExecReq struct {
	// +gen:required
	In *v1.ExecIn `protobuf:"bytes,1,opt,name=in,proto3" json:"in,omitempty"`
}

func (m *ExecReq) Reset()         { *m = ExecReq{} }
func (m *ExecReq) String() string { return proto.CompactTextString(m) }
func (*ExecReq) ProtoMessage()    {}
func (*ExecReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9386d4f8a96ae2d2, []int{33}
}
func (m *ExecReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecReq.Merge(m, src)
}
func (m *ExecReq) XXX_Size() int {
	return m.XSize()
}
func (m *ExecReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecReq.DiscardUnknown(m)
}

var xxx_messageInfo_ExecReq proto.InternalMessageInfo

type ExecRsp struct {
	Result *v1.ExecResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *ExecRsp) Reset()         { *m = ExecRsp{} }
func (m *ExecRsp) String() string { return proto.CompactTextString(m) }
func (*ExecRsp) ProtoMessage()    {}
func (*ExecRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9386d4f8a96ae2d2, []int{34}
}
func (m *ExecRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecRsp.Merge(m, src)
}
func (m *ExecRsp) XXX_Size() int {
	return m.XSize()
}
func (m *ExecRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ExecRsp proto.InternalMessageInfo

type TerminalReq struct {
	// +gen:required
	In *v1.TerminalIn `protobuf:"bytes,1,opt,name=in,proto3" json:"in,omitempty"`
}

func (m *TerminalReq) Reset()         { *m = TerminalReq{} }
func (m *TerminalReq) String() string { return proto.CompactTextString(m) }
func (*TerminalReq) ProtoMessage()    {}
func (*TerminalReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9386d4f8a96ae2d2, []int{35}
}
func (m *TerminalReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TerminalReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TerminalReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TerminalReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TerminalReq.Merge(m, src)
}
func (m *TerminalReq) XXX_Size() int {
	return m.XSize()
}
func (m *TerminalReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TerminalReq.DiscardUnknown(m)
}

var xxx_messageInfo_TerminalReq proto.InternalMessageInfo

type TerminalRsp struct {
	Result *v1.TerminalResult `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *TerminalRsp) Reset()         { *m = TerminalRsp{} }
func (m *TerminalRsp) String() string { return proto.CompactTextString(m) }
func (*TerminalRsp) ProtoMessage()    {}
func (*TerminalRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9386d4f8a96ae2d2, []int{36}
}
func (m *TerminalRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TerminalRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TerminalRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TerminalRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TerminalRsp.Merge(m, src)
}
func (m *TerminalRsp) XXX_Size() int {
	return m.XSize()
}
func (m *TerminalRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_TerminalRsp.DiscardUnknown(m)
}

var xxx_messageInfo_TerminalRsp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Empty)(nil), "gpmv1.Empty")
	proto.RegisterType((*ListServiceReq)(nil), "gpmv1.ListServiceReq")
	proto.RegisterType((*ListServiceRsp)(nil), "gpmv1.ListServiceRsp")
	proto.RegisterType((*GetServiceReq)(nil), "gpmv1.GetServiceReq")
	proto.RegisterType((*GetServiceRsp)(nil), "gpmv1.GetServiceRsp")
	proto.RegisterType((*CreateServiceReq)(nil), "gpmv1.CreateServiceReq")
	proto.RegisterMapType((map[string]string)(nil), "gpmv1.CreateServiceReq.EnvEntry")
	proto.RegisterType((*CreateServiceRsp)(nil), "gpmv1.CreateServiceRsp")
	proto.RegisterType((*StartServiceReq)(nil), "gpmv1.StartServiceReq")
	proto.RegisterType((*StartServiceRsp)(nil), "gpmv1.StartServiceRsp")
	proto.RegisterType((*StopServiceReq)(nil), "gpmv1.StopServiceReq")
	proto.RegisterType((*StopServiceRsp)(nil), "gpmv1.StopServiceRsp")
	proto.RegisterType((*RebootServiceReq)(nil), "gpmv1.RebootServiceReq")
	proto.RegisterType((*RebootServiceRsp)(nil), "gpmv1.RebootServiceRsp")
	proto.RegisterType((*DeleteServiceReq)(nil), "gpmv1.DeleteServiceReq")
	proto.RegisterType((*DeleteServiceRsp)(nil), "gpmv1.DeleteServiceRsp")
	proto.RegisterType((*CatServiceLogReq)(nil), "gpmv1.CatServiceLogReq")
	proto.RegisterType((*CatServiceLogRsp)(nil), "gpmv1.CatServiceLogRsp")
	proto.RegisterType((*WatchServiceLogReq)(nil), "gpmv1.WatchServiceLogReq")
	proto.RegisterType((*WatchServiceLogRsp)(nil), "gpmv1.WatchServiceLogRsp")
	proto.RegisterType((*InstallServiceReq)(nil), "gpmv1.InstallServiceReq")
	proto.RegisterMapType((map[string]string)(nil), "gpmv1.InstallServiceReq.EnvEntry")
	proto.RegisterType((*InstallServiceRsp)(nil), "gpmv1.InstallServiceRsp")
	proto.RegisterType((*ListServiceVersionsReq)(nil), "gpmv1.ListServiceVersionsReq")
	proto.RegisterType((*ListServiceVersionsRsp)(nil), "gpmv1.ListServiceVersionsRsp")
	proto.RegisterType((*UpgradeServiceReq)(nil), "gpmv1.UpgradeServiceReq")
	proto.RegisterType((*UpgradeServiceRsp)(nil), "gpmv1.UpgradeServiceRsp")
	proto.RegisterType((*RollbackServiceReq)(nil), "gpmv1.RollbackServiceReq")
	proto.RegisterType((*RollbackServiceRsp)(nil), "gpmv1.RollbackServiceRsp")
	proto.RegisterType((*LsReq)(nil), "gpmv1.LsReq")
	proto.RegisterType((*LsRsp)(nil), "gpmv1.LsRsp")
	proto.RegisterType((*PullReq)(nil), "gpmv1.PullReq")
	proto.RegisterType((*PullRsp)(nil), "gpmv1.PullRsp")
	proto.RegisterType((*PushReq)(nil), "gpmv1.PushReq")
	proto.RegisterType((*PushRsp)(nil), "gpmv1.PushRsp")
	proto.RegisterType((*ExecReq)(nil), "gpmv1.ExecReq")
	proto.RegisterType((*ExecRsp)(nil), "gpmv1.ExecRsp")
	proto.RegisterType((*TerminalReq)(nil), "gpmv1.TerminalReq")
	proto.RegisterType((*TerminalRsp)(nil), "gpmv1.TerminalRsp")
}

func init() {
	proto.RegisterFile("github.com/gpm2/gpm/proto/service/gpm/v1/gpm.proto", fileDescriptor_9386d4f8a96ae2d2)
}

var fileDescriptor_9386d4f8a96ae2d2 = []byte{
	// 1116 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0x5b, 0x4f, 0xe3, 0xc6,
	0x17, 0xc7, 0x09, 0x21, 0xe1, 0x70, 0x9f, 0x3f, 0xec, 0xdf, 0x9d, 0x15, 0x51, 0xd6, 0x2d, 0x55,
	0x5a, 0xb5, 0xe1, 0x2a, 0xb4, 0x5d, 0x50, 0xa5, 0xbd, 0x50, 0x40, 0xe5, 0x61, 0x65, 0x7a, 0x91,
	0xfa, 0x66, 0xc2, 0x6c, 0x62, 0xe1, 0xd8, 0x83, 0x67, 0x12, 0x2d, 0x7d, 0xee, 0x43, 0x1f, 0xfb,
	0xb1, 0xf6, 0x71, 0x1f, 0xfb, 0x54, 0xb5, 0xf0, 0x45, 0xaa, 0x19, 0x8f, 0x8d, 0xc7, 0x17, 0xb2,
	0xa9, 0x54, 0xa9, 0x2f, 0xe0, 0x99, 0xdf, 0xef, 0x5c, 0x67, 0xe6, 0x9c, 0x13, 0xd8, 0xe9, 0xb9,
	0xbc, 0x3f, 0xbc, 0xe8, 0x74, 0x83, 0xc1, 0x66, 0x8f, 0x0e, 0x76, 0xc4, 0x9f, 0x4d, 0x1a, 0x06,
	0x3c, 0xd8, 0x64, 0x24, 0x1c, 0xb9, 0x5d, 0x22, 0x77, 0x46, 0xdb, 0xe2, 0x5f, 0x47, 0x02, 0xa8,
	0xd6, 0xa3, 0x83, 0xd1, 0x36, 0xde, 0x2c, 0x17, 0x75, 0xa8, 0xcb, 0x72, 0x72, 0x56, 0x1d, 0x6a,
	0x47, 0x03, 0xca, 0x6f, 0xac, 0x65, 0x58, 0x3c, 0x73, 0x19, 0x3f, 0x8f, 0x0c, 0xd8, 0xe4, 0xda,
	0xb2, 0xf5, 0x1d, 0x46, 0xd1, 0xe7, 0xd0, 0x50, 0x0e, 0x30, 0xd3, 0x68, 0x55, 0xdb, 0x73, 0x3b,
	0x8b, 0x1d, 0x69, 0xb7, 0x13, 0x93, 0x12, 0x1c, 0xad, 0x42, 0x8d, 0x07, 0xdc, 0xf1, 0xcc, 0x4a,
	0xcb, 0x68, 0x57, 0xed, 0x68, 0x61, 0x7d, 0x0c, 0x0b, 0xc7, 0x24, 0x65, 0x04, 0x21, 0x98, 0xf6,
	0x9d, 0x01, 0x31, 0x8d, 0x96, 0xd1, 0x9e, 0xb5, 0xe5, 0xb7, 0xf5, 0x95, 0x46, 0x62, 0x14, 0xb5,
	0xa1, 0xae, 0xf4, 0x4a, 0x5e, 0xde, 0x6c, 0x0c, 0x5b, 0x7f, 0x54, 0x60, 0xf9, 0x65, 0x48, 0x1c,
	0x4e, 0x1e, 0xb6, 0x81, 0x96, 0xa1, 0x7a, 0xe1, 0xfa, 0xd2, 0xb9, 0x59, 0x5b, 0x7c, 0x0a, 0x96,
	0x13, 0xf6, 0x98, 0x59, 0x6d, 0x55, 0x05, 0x4b, 0x7c, 0x0b, 0xd6, 0xa5, 0x1b, 0x9a, 0xd3, 0x11,
	0xeb, 0xd2, 0x0d, 0xd1, 0x0e, 0x54, 0x89, 0x3f, 0x32, 0x6b, 0x32, 0xfa, 0x96, 0x72, 0x23, 0x6b,
	0xb1, 0x73, 0xe4, 0x8f, 0x8e, 0x7c, 0x1e, 0xde, 0xd8, 0x82, 0x8c, 0xf6, 0x60, 0x8e, 0xdd, 0xb0,
	0xd7, 0x61, 0xd0, 0x7d, 0xce, 0x79, 0x68, 0xce, 0xc8, 0x10, 0x50, 0x1c, 0xc2, 0x3d, 0x62, 0xa7,
	0x69, 0xa8, 0x05, 0x55, 0x2f, 0xe8, 0x99, 0x75, 0x2d, 0x60, 0x81, 0x9e, 0x05, 0x3d, 0x5b, 0x40,
	0xc8, 0x84, 0xfa, 0x88, 0x84, 0xcc, 0x0d, 0x7c, 0xb3, 0x21, 0x3d, 0x8c, 0x97, 0xa8, 0x05, 0x73,
	0xce, 0x90, 0x07, 0x36, 0x61, 0xdc, 0x09, 0xb9, 0x39, 0xdb, 0x32, 0xda, 0x35, 0x3b, 0xbd, 0x85,
	0xf7, 0xa1, 0x11, 0x3b, 0x29, 0xa2, 0xbc, 0x22, 0x37, 0x2a, 0x3d, 0xe2, 0x53, 0x1c, 0xde, 0xc8,
	0xf1, 0x86, 0x44, 0xe5, 0x27, 0x5a, 0x3c, 0xab, 0x3c, 0x35, 0xac, 0xc3, 0x6c, 0x7e, 0x27, 0x3a,
	0x9e, 0x0d, 0x58, 0x3a, 0x17, 0xe6, 0xc7, 0x5c, 0x80, 0x83, 0x0c, 0x6d, 0x22, 0x1b, 0x9f, 0xc0,
	0xe2, 0x39, 0x0f, 0xe8, 0x18, 0x13, 0xcf, 0x74, 0xd6, 0x44, 0x16, 0x3e, 0x85, 0x65, 0x9b, 0x5c,
	0x04, 0xc1, 0xb8, 0x30, 0x0e, 0xb3, 0xbc, 0x49, 0xad, 0xbc, 0x22, 0x1e, 0x19, 0x77, 0x93, 0x85,
	0x15, 0x9d, 0x37, 0xa9, 0x95, 0x97, 0x4e, 0xec, 0xa0, 0xb8, 0x59, 0x25, 0x56, 0x72, 0x3c, 0x46,
	0x05, 0x8f, 0x93, 0xb7, 0x5c, 0xf2, 0xe6, 0x6d, 0xf9, 0x6d, 0xb5, 0x01, 0xfd, 0xe8, 0xf0, 0x6e,
	0x7f, 0xbc, 0xc6, 0xfd, 0x3c, 0x93, 0xd1, 0xf8, 0xd6, 0x1b, 0xa5, 0xb7, 0xde, 0xfa, 0xa5, 0x0a,
	0x2b, 0xa7, 0x3e, 0xe3, 0x8e, 0xe7, 0xfd, 0x4b, 0x6f, 0x7c, 0x37, 0xfd, 0xc6, 0x9f, 0x28, 0x1f,
	0x72, 0x26, 0xff, 0xfb, 0x8f, 0x1c, 0x59, 0x30, 0x4d, 0x9d, 0xee, 0x95, 0xb9, 0xa6, 0xab, 0x77,
	0xba, 0x57, 0x4e, 0x8f, 0xd8, 0x12, 0xfb, 0xc7, 0x85, 0xe0, 0x24, 0x77, 0x0a, 0x8c, 0xa2, 0x5d,
	0x98, 0x09, 0x09, 0x1b, 0x7a, 0x5c, 0x1d, 0xe0, 0xe3, 0x92, 0xe4, 0x09, 0x8a, 0xad, 0xa8, 0xd6,
	0x17, 0xf0, 0x28, 0xd5, 0x67, 0x7e, 0x88, 0xa2, 0x63, 0x65, 0xd7, 0xe6, 0xdb, 0x62, 0x36, 0xa3,
	0x68, 0x1b, 0x1a, 0x2a, 0x35, 0x71, 0x77, 0x5a, 0xd3, 0x6f, 0xbd, 0x22, 0xdb, 0x09, 0xcd, 0x22,
	0xb0, 0xf2, 0x3d, 0xed, 0x85, 0xce, 0xe5, 0xb8, 0x76, 0x91, 0x3a, 0x85, 0x8a, 0x7e, 0x0a, 0x1f,
	0x90, 0x63, 0x91, 0xab, 0x8c, 0x99, 0x07, 0x72, 0x95, 0x75, 0x48, 0xcb, 0xd5, 0x2b, 0x40, 0x76,
	0xe0, 0x79, 0x17, 0x4e, 0xf7, 0x6a, 0x8c, 0xc7, 0x18, 0x1a, 0x21, 0x19, 0xb9, 0x29, 0x97, 0x93,
	0xb5, 0xb5, 0x9a, 0xd7, 0xc2, 0xa8, 0xf5, 0x18, 0x6a, 0x67, 0x71, 0xda, 0xa9, 0xc3, 0xfb, 0xb1,
	0x3a, 0xf1, 0x6d, 0x75, 0x24, 0xc8, 0x28, 0xda, 0x80, 0xda, 0x1b, 0xd7, 0x4b, 0x06, 0x80, 0x25,
	0xe5, 0xf5, 0x37, 0xae, 0x47, 0x4e, 0xfd, 0x37, 0x81, 0x1d, 0xa1, 0xd6, 0x3a, 0xd4, 0x5f, 0x0f,
	0x3d, 0xaf, 0xec, 0x14, 0xf7, 0x14, 0xcc, 0x28, 0xfa, 0x2c, 0x93, 0x87, 0x95, 0x38, 0x85, 0x52,
	0x5c, 0x8b, 0xbe, 0x2d, 0xa4, 0x58, 0x5f, 0x28, 0x5d, 0x87, 0x8a, 0xeb, 0x2b, 0x89, 0x85, 0x44,
	0x82, 0xf5, 0x4f, 0x7d, 0xbb, 0xe2, 0xfa, 0xd6, 0xac, 0x62, 0x32, 0x2a, 0x84, 0x8e, 0xde, 0x92,
	0x6e, 0x99, 0x90, 0xc0, 0x94, 0xd0, 0x9e, 0x62, 0x3e, 0xe0, 0x54, 0xa4, 0x49, 0x73, 0x6a, 0x0b,
	0xe6, 0xbe, 0x23, 0xe1, 0xc0, 0xf5, 0x1d, 0x19, 0xed, 0x93, 0x94, 0x8d, 0x58, 0x2a, 0xc6, 0x95,
	0x9d, 0xc3, 0x94, 0x04, 0xa3, 0xe8, 0xcb, 0xc4, 0x56, 0x45, 0x4a, 0xad, 0x65, 0xa4, 0x74, 0x7b,
	0x3b, 0xbf, 0xce, 0x02, 0x1c, 0xd3, 0x81, 0x3a, 0x38, 0xb4, 0x01, 0xf5, 0x13, 0xe2, 0x78, 0xbc,
	0xff, 0x33, 0x9a, 0x8f, 0x9d, 0x14, 0x03, 0x1d, 0xd6, 0x56, 0xe8, 0x00, 0xe6, 0x52, 0xcf, 0x06,
	0xc5, 0x36, 0xf4, 0x91, 0x0f, 0x17, 0x6d, 0x33, 0x8a, 0x9e, 0x02, 0xdc, 0x0f, 0x64, 0x68, 0x55,
	0x91, 0xb4, 0x41, 0x0e, 0x17, 0xec, 0x32, 0x8a, 0x9e, 0xc3, 0x82, 0x36, 0x2e, 0xa0, 0xff, 0x97,
	0x8c, 0x4c, 0xb8, 0x18, 0x60, 0x14, 0x7d, 0x0d, 0xf3, 0xe9, 0x61, 0x00, 0x3d, 0x8a, 0x1f, 0xb5,
	0x3e, 0x48, 0xe0, 0xc2, 0x7d, 0x46, 0x45, 0xe4, 0xa9, 0x4e, 0x9f, 0x44, 0xae, 0xcf, 0x08, 0xb8,
	0x68, 0x3b, 0xf2, 0x5f, 0x6b, 0xe1, 0x89, 0xff, 0xd9, 0x01, 0x00, 0x17, 0x03, 0x91, 0x0a, 0xad,
	0x3f, 0x27, 0x2a, 0xb2, 0xdd, 0x1d, 0x17, 0x03, 0x2a, 0x8b, 0xe9, 0xe6, 0x7b, 0x9f, 0xc5, 0x4c,
	0xeb, 0xc6, 0xc5, 0x00, 0xa3, 0xe8, 0x14, 0x96, 0x32, 0xdd, 0x16, 0x7d, 0xa4, 0xb8, 0xf9, 0x7e,
	0x8d, 0xcb, 0x20, 0x46, 0xb7, 0x0c, 0x74, 0x02, 0x8b, 0x7a, 0x3d, 0x47, 0x66, 0x59, 0x8f, 0xc4,
	0x25, 0x08, 0xa3, 0x6d, 0x63, 0xcb, 0x40, 0xe7, 0xf0, 0xbf, 0x82, 0x5a, 0x8e, 0xd6, 0xf3, 0xb7,
	0x30, 0xd5, 0x15, 0xf0, 0x43, 0x30, 0xa3, 0xc2, 0x3d, 0xbd, 0x84, 0x26, 0xee, 0xe5, 0x4a, 0x3d,
	0x2e, 0x41, 0x94, 0x7b, 0xc7, 0xb0, 0x24, 0xca, 0xe4, 0x8b, 0xfb, 0x32, 0x99, 0xe4, 0x2c, 0x5f,
	0x84, 0x71, 0x19, 0x24, 0x87, 0x9a, 0xca, 0x19, 0x4b, 0x9e, 0xa7, 0x2c, 0xb2, 0x38, 0xb5, 0x92,
	0x03, 0xdb, 0xb4, 0xa8, 0x77, 0x68, 0x51, 0x2b, 0x7e, 0xd7, 0x58, 0x5b, 0xcb, 0xec, 0x4b, 0x26,
	0xeb, 0xa7, 0x98, 0xb2, 0x20, 0x62, 0x6d, 0x2d, 0x02, 0x10, 0x4c, 0x51, 0xae, 0x12, 0xa6, 0xaa,
	0x82, 0x58, 0x5b, 0x4b, 0x9d, 0xfb, 0xd0, 0x88, 0x8b, 0x0d, 0x42, 0xb9, 0xea, 0x73, 0x8d, 0x73,
	0x7b, 0x51, 0x82, 0x5e, 0x9c, 0xbd, 0xfb, 0xab, 0x39, 0xf5, 0xee, 0xb6, 0x69, 0xbc, 0xbf, 0x6d,
	0x1a, 0x7f, 0xde, 0x36, 0x8d, 0xdf, 0xee, 0x9a, 0x53, 0xef, 0xef, 0x9a, 0x53, 0xbf, 0xdf, 0x35,
	0xa7, 0x7e, 0xea, 0x7c, 0xe8, 0xcf, 0xd8, 0x03, 0xa9, 0xfd, 0x62, 0x46, 0x62, 0xbb, 0x7f, 0x07,
	0x00, 0x00, 0xff, 0xff, 0x02, 0xfc, 0x80, 0x50, 0xff, 0x0e, 0x00, 0x00,
}

func (m *Empty) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListServiceReq) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListServiceRsp) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Services) > 0 {
		for _, e := range m.Services {
			l = e.XSize()
			n += 1 + l + sovGpm(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovGpm(uint64(m.Total))
	}
	return n
}

func (m *GetServiceReq) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGpm(uint64(l))
	}
	return n
}

func (m *GetServiceRsp) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Service != nil {
		l = m.Service.XSize()
		n += 1 + l + sovGpm(uint64(l))
	}
	return n
}

func (m *CreateServiceReq) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGpm(uint64(l))
	}
	l = len(m.Bin)
	if l > 0 {
		n += 1 + l + sovGpm(uint64(l))
	}
	if len(m.Args) > 0 {
		for _, s := range m.Args {
			l = len(s)
			n += 1 + l + sovGpm(uint64(l))
		}
	}
	l = len(m.Dir)
	if l > 0 {
		n += 1 + l + sovGpm(uint64(l))
	}
	if len(m.Env) > 0 {
		for k, v := range m.Env {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGpm(uint64(len(k))) + 1 + len(v) + sovGpm(uint64(len(v)))
			n += mapEntrySize + 1 + sovGpm(uint64(mapEntrySize))
		}
	}
	if m.SysProcAttr != nil {
		l = m.SysProcAttr.XSize()
		n += 1 + l + sovGpm(uint64(l))
	}
	if m.Log != nil {
		l = m.Log.XSize()
		n += 1 + l + sovGpm(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovGpm(uint64(l))
	}
	if m.AutoRestart != 0 {
		n += 1 + sovGpm(uint64(m.AutoRestart))
	}
	return n
}

func (m *CreateServiceRsp) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Service != nil {
		l = m.Service.XSize()
		n += 1 + l + sovGpm(uint64(l))
	}
	return n
}

func (m *StartServiceReq) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGpm(uint64(l))
	}
	return n
}

func (m *StartServiceRsp) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Service != nil {
		l = m.Service.XSize()
		n += 1 + l + sovGpm(uint64(l))
	}
	return n
}

func (m *StopServiceReq) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGpm(uint64(l))
	}
	return n
}

func (m *StopServiceRsp) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Service != nil {
		l = m.Service.XSize()
		n += 1 + l + sovGpm(uint64(l))
	}
	return n
}

func (m *RebootServiceReq) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGpm(uint64(l))
	}
	return n
}

func (m *RebootServiceRsp) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Service != nil {
		l = m.Service.XSize()
		n += 1 + l + sovGpm(uint64(l))
	}
	return n
}

func (m *DeleteServiceReq) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGpm(uint64(l))
	}
	return n
}

func (m *DeleteServiceRsp) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Service != nil {
		l = m.Service.XSize()
		n += 1 + l + sovGpm(uint64(l))
	}
	return n
}

func (m *CatServiceLogReq) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGpm(uint64(l))
	}
	return n
}

func (m *CatServiceLogRsp) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovGpm(uint64(l))
	}
	return n
}

func (m *WatchServiceLogReq) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGpm(uint64(l))
	}
	return n
}

func (m *WatchServiceLogRsp) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Log != nil {
		l = m.Log.XSize()
		n += 1 + l + sovGpm(uint64(l))
	}
	return n
}

func (m *InstallServiceReq) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGpm(uint64(l))
	}
	l = len(m.Bin)
	if l > 0 {
		n += 1 + l + sovGpm(uint64(l))
	}
	if len(m.Args) > 0 {
		for _, s := range m.Args {
			l = len(s)
			n += 1 + l + sovGpm(uint64(l))
		}
	}
	l = len(m.Dir)
	if l > 0 {
		n += 1 + l + sovGpm(uint64(l))
	}
	if len(m.Env) > 0 {
		for k, v := range m.Env {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGpm(uint64(len(k))) + 1 + len(v) + sovGpm(uint64(len(v)))
			n += mapEntrySize + 1 + sovGpm(uint64(mapEntrySize))
		}
	}
	if m.SysProcAttr != nil {
		l = m.SysProcAttr.XSize()
		n += 1 + l + sovGpm(uint64(l))
	}
	if m.Log != nil {
		l = m.Log.XSize()
		n += 1 + l + sovGpm(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovGpm(uint64(l))
	}
	if m.AutoRestart != 0 {
		n += 1 + sovGpm(uint64(m.AutoRestart))
	}
	if m.Pack != nil {
		l = m.Pack.XSize()
		n += 2 + l + sovGpm(uint64(l))
	}
	return n
}

func (m *InstallServiceRsp) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.XSize()
		n += 1 + l + sovGpm(uint64(l))
	}
	return n
}

func (m *ListServiceVersionsReq) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGpm(uint64(l))
	}
	return n
}

func (m *ListServiceVersionsRsp) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Versions) > 0 {
		for _, e := range m.Versions {
			l = e.XSize()
			n += 1 + l + sovGpm(uint64(l))
		}
	}
	return n
}

func (m *UpgradeServiceReq) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGpm(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovGpm(uint64(l))
	}
	if m.Pack != nil {
		l = m.Pack.XSize()
		n += 2 + l + sovGpm(uint64(l))
	}
	return n
}

func (m *UpgradeServiceRsp) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.XSize()
		n += 1 + l + sovGpm(uint64(l))
	}
	return n
}

func (m *RollbackServiceReq) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGpm(uint64(l))
	}
	l = len(m.Revision)
	if l > 0 {
		n += 1 + l + sovGpm(uint64(l))
	}
	return n
}

func (m *RollbackServiceRsp) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *LsReq) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovGpm(uint64(l))
	}
	return n
}

func (m *LsRsp) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Files) > 0 {
		for _, e := range m.Files {
			l = e.XSize()
			n += 1 + l + sovGpm(uint64(l))
		}
	}
	return n
}

func (m *PullReq) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGpm(uint64(l))
	}
	return n
}

func (m *PullRsp) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.XSize()
		n += 1 + l + sovGpm(uint64(l))
	}
	return n
}

func (m *PushReq) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.In != nil {
		l = m.In.XSize()
		n += 1 + l + sovGpm(uint64(l))
	}
	return n
}

func (m *PushRsp) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ExecReq) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.In != nil {
		l = m.In.XSize()
		n += 1 + l + sovGpm(uint64(l))
	}
	return n
}

func (m *ExecRsp) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.XSize()
		n += 1 + l + sovGpm(uint64(l))
	}
	return n
}

func (m *TerminalReq) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.In != nil {
		l = m.In.XSize()
		n += 1 + l + sovGpm(uint64(l))
	}
	return n
}

func (m *TerminalRsp) XSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.XSize()
		n += 1 + l + sovGpm(uint64(l))
	}
	return n
}

func sovGpm(x uint64) (n int) {
	return (bits.Len64(x|1) + 6) / 7
}
func sozGpm(x uint64) (n int) {
	return sovGpm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Empty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListServiceReq) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListServiceReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListServiceReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListServiceRsp) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListServiceRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListServiceRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintGpm(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Services) > 0 {
		for iNdEx := len(m.Services) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Services[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGpm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetServiceReq) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetServiceReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetServiceReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGpm(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetServiceRsp) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetServiceRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetServiceRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Service != nil {
		{
			size, err := m.Service.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGpm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateServiceReq) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateServiceReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateServiceReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AutoRestart != 0 {
		i = encodeVarintGpm(dAtA, i, uint64(m.AutoRestart))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintGpm(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x42
	}
	if m.Log != nil {
		{
			size, err := m.Log.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGpm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.SysProcAttr != nil {
		{
			size, err := m.SysProcAttr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGpm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Env) > 0 {
		for k := range m.Env {
			v := m.Env[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGpm(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintGpm(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGpm(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Dir) > 0 {
		i -= len(m.Dir)
		copy(dAtA[i:], m.Dir)
		i = encodeVarintGpm(dAtA, i, uint64(len(m.Dir)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Args[iNdEx])
			copy(dAtA[i:], m.Args[iNdEx])
			i = encodeVarintGpm(dAtA, i, uint64(len(m.Args[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Bin) > 0 {
		i -= len(m.Bin)
		copy(dAtA[i:], m.Bin)
		i = encodeVarintGpm(dAtA, i, uint64(len(m.Bin)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGpm(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateServiceRsp) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateServiceRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateServiceRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Service != nil {
		{
			size, err := m.Service.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGpm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StartServiceReq) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartServiceReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartServiceReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGpm(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StartServiceRsp) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartServiceRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartServiceRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Service != nil {
		{
			size, err := m.Service.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGpm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StopServiceReq) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StopServiceReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StopServiceReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGpm(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StopServiceRsp) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StopServiceRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StopServiceRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Service != nil {
		{
			size, err := m.Service.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGpm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RebootServiceReq) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RebootServiceReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RebootServiceReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGpm(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RebootServiceRsp) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RebootServiceRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RebootServiceRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Service != nil {
		{
			size, err := m.Service.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGpm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteServiceReq) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteServiceReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteServiceReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGpm(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteServiceRsp) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteServiceRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteServiceRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Service != nil {
		{
			size, err := m.Service.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGpm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CatServiceLogReq) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CatServiceLogReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CatServiceLogReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGpm(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CatServiceLogRsp) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CatServiceLogRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CatServiceLogRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintGpm(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WatchServiceLogReq) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchServiceLogReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchServiceLogReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGpm(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WatchServiceLogRsp) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchServiceLogRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchServiceLogRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Log != nil {
		{
			size, err := m.Log.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGpm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InstallServiceReq) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstallServiceReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstallServiceReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pack != nil {
		{
			size, err := m.Pack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGpm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.AutoRestart != 0 {
		i = encodeVarintGpm(dAtA, i, uint64(m.AutoRestart))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintGpm(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x42
	}
	if m.Log != nil {
		{
			size, err := m.Log.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGpm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.SysProcAttr != nil {
		{
			size, err := m.SysProcAttr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGpm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Env) > 0 {
		for k := range m.Env {
			v := m.Env[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGpm(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintGpm(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGpm(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Dir) > 0 {
		i -= len(m.Dir)
		copy(dAtA[i:], m.Dir)
		i = encodeVarintGpm(dAtA, i, uint64(len(m.Dir)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Args[iNdEx])
			copy(dAtA[i:], m.Args[iNdEx])
			i = encodeVarintGpm(dAtA, i, uint64(len(m.Args[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Bin) > 0 {
		i -= len(m.Bin)
		copy(dAtA[i:], m.Bin)
		i = encodeVarintGpm(dAtA, i, uint64(len(m.Bin)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGpm(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InstallServiceRsp) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstallServiceRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstallServiceRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGpm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListServiceVersionsReq) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListServiceVersionsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListServiceVersionsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGpm(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListServiceVersionsRsp) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListServiceVersionsRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListServiceVersionsRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Versions) > 0 {
		for iNdEx := len(m.Versions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Versions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGpm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpgradeServiceReq) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgradeServiceReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpgradeServiceReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pack != nil {
		{
			size, err := m.Pack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGpm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintGpm(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGpm(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpgradeServiceRsp) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgradeServiceRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpgradeServiceRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGpm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RollbackServiceReq) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RollbackServiceReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RollbackServiceReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Revision) > 0 {
		i -= len(m.Revision)
		copy(dAtA[i:], m.Revision)
		i = encodeVarintGpm(dAtA, i, uint64(len(m.Revision)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGpm(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RollbackServiceRsp) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RollbackServiceRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RollbackServiceRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *LsReq) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintGpm(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LsRsp) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LsRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LsRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Files) > 0 {
		for iNdEx := len(m.Files) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Files[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGpm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PullReq) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PullReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PullReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGpm(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PullRsp) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PullRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PullRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGpm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushReq) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.In != nil {
		{
			size, err := m.In.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGpm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushRsp) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ExecReq) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.In != nil {
		{
			size, err := m.In.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGpm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecRsp) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGpm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TerminalReq) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TerminalReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TerminalReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.In != nil {
		{
			size, err := m.In.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGpm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TerminalRsp) Marshal() (dAtA []byte, err error) {
	size := m.XSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TerminalRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.XSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TerminalRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGpm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func encodeVarintGpm(dAtA []byte, offset int, v uint64) int {
	offset -= sovGpm(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListServiceReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListServiceReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListServiceReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListServiceRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListServiceRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListServiceRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Services", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Services = append(m.Services, &v1.Service{})
			if err := m.Services[len(m.Services)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetServiceReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetServiceReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetServiceReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetServiceRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetServiceRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetServiceRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Service == nil {
				m.Service = &v1.Service{}
			}
			if err := m.Service.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateServiceReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateServiceReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateServiceReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Env == nil {
				m.Env = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGpm
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGpm
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGpm
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGpm
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGpm
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGpm
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGpm
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGpm(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGpm
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Env[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SysProcAttr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SysProcAttr == nil {
				m.SysProcAttr = &v1.SysProcAttr{}
			}
			if err := m.SysProcAttr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Log == nil {
				m.Log = &v1.ProcLog{}
			}
			if err := m.Log.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoRestart", wireType)
			}
			m.AutoRestart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoRestart |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateServiceRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateServiceRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateServiceRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Service == nil {
				m.Service = &v1.Service{}
			}
			if err := m.Service.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartServiceReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartServiceReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartServiceReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartServiceRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartServiceRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartServiceRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Service == nil {
				m.Service = &v1.Service{}
			}
			if err := m.Service.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StopServiceReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StopServiceReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StopServiceReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StopServiceRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StopServiceRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StopServiceRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Service == nil {
				m.Service = &v1.Service{}
			}
			if err := m.Service.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RebootServiceReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RebootServiceReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RebootServiceReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RebootServiceRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RebootServiceRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RebootServiceRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Service == nil {
				m.Service = &v1.Service{}
			}
			if err := m.Service.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteServiceReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteServiceReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteServiceReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteServiceRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteServiceRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteServiceRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Service == nil {
				m.Service = &v1.Service{}
			}
			if err := m.Service.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CatServiceLogReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CatServiceLogReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CatServiceLogReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CatServiceLogRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CatServiceLogRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CatServiceLogRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = append(m.Text[:0], dAtA[iNdEx:postIndex]...)
			if m.Text == nil {
				m.Text = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchServiceLogReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchServiceLogReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchServiceLogReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchServiceLogRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchServiceLogRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchServiceLogRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Log == nil {
				m.Log = &v1.ProcLog{}
			}
			if err := m.Log.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstallServiceReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstallServiceReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstallServiceReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Env == nil {
				m.Env = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGpm
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGpm
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGpm
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGpm
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGpm
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGpm
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGpm
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGpm(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGpm
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Env[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SysProcAttr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SysProcAttr == nil {
				m.SysProcAttr = &v1.SysProcAttr{}
			}
			if err := m.SysProcAttr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Log == nil {
				m.Log = &v1.ProcLog{}
			}
			if err := m.Log.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoRestart", wireType)
			}
			m.AutoRestart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoRestart |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pack == nil {
				m.Pack = &v1.Package{}
			}
			if err := m.Pack.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstallServiceRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstallServiceRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstallServiceRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &v1.InstallServiceResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListServiceVersionsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListServiceVersionsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListServiceVersionsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListServiceVersionsRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListServiceVersionsRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListServiceVersionsRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Versions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Versions = append(m.Versions, &v1.ServiceVersion{})
			if err := m.Versions[len(m.Versions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpgradeServiceReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpgradeServiceReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpgradeServiceReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pack == nil {
				m.Pack = &v1.Package{}
			}
			if err := m.Pack.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpgradeServiceRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpgradeServiceRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpgradeServiceRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &v1.UpgradeServiceResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RollbackServiceReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RollbackServiceReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RollbackServiceReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Revision = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RollbackServiceRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RollbackServiceRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RollbackServiceRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LsRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LsRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LsRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Files = append(m.Files, &v1.FileInfo{})
			if err := m.Files[len(m.Files)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PullReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PullRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &v1.PullResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.In == nil {
				m.In = &v1.PushIn{}
			}
			if err := m.In.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.In == nil {
				m.In = &v1.ExecIn{}
			}
			if err := m.In.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &v1.ExecResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TerminalReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TerminalReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TerminalReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.In == nil {
				m.In = &v1.TerminalIn{}
			}
			if err := m.In.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TerminalRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGpm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TerminalRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TerminalRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGpm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGpm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &v1.TerminalResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGpm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGpm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGpm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGpm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGpm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGpm
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGpm
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGpm
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGpm        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGpm          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGpm = fmt.Errorf("proto: unexpected end of group")
)

// GpmServiceClient is the client API for GpmService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GpmServiceClient interface {
	// +gne:summary=gpm 检测 gpm 服务状态
	// +gen:get=/api/healthz
	Healthz(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// +gen:summary=查询所有服务
	// +gen:get=/api/v1/Service/
	ListService(ctx context.Context, in *ListServiceReq, opts ...grpc.CallOption) (*ListServiceRsp, error)
	// +gen:summary=查询单个服务
	// +gen:get=/api/v1/Service/{name}
	GetService(ctx context.Context, in *GetServiceReq, opts ...grpc.CallOption) (*GetServiceRsp, error)
	// +gen:summary=新建服务
	// +gen:post=/api/v1/Service/
	CreateService(ctx context.Context, in *CreateServiceReq, opts ...grpc.CallOption) (*CreateServiceRsp, error)
	// +gen:summary=启动服务
	// +gen:patch=/api/v1/Service/{name}/action/start
	StartService(ctx context.Context, in *StartServiceReq, opts ...grpc.CallOption) (*StartServiceRsp, error)
	// +gen:summary=停止服务
	// +gen:patch=/api/v1/Service/{name}/action/stop
	StopService(ctx context.Context, in *StopServiceReq, opts ...grpc.CallOption) (*StopServiceRsp, error)
	// +gen:summary=重启服务
	// +gen:patch=/api/v1/Service/{name}/action/reboot
	RebootService(ctx context.Context, in *RebootServiceReq, opts ...grpc.CallOption) (*RebootServiceRsp, error)
	// +gen:summary=删除服务
	// +gen:delete=/api/v1/Service/{name}
	DeleteService(ctx context.Context, in *DeleteServiceReq, opts ...grpc.CallOption) (*DeleteServiceRsp, error)
	// +gen:summary=查看服务日志
	// +gen:get=/api/v1/Service/{name}/logs
	CatServiceLog(ctx context.Context, in *CatServiceLogReq, opts ...grpc.CallOption) (*CatServiceLogRsp, error)
	// +gen:summary=动态监听服务日志
	// +gen:post=/api/v1/Service/{name}/watchLogs
	WatchServiceLog(ctx context.Context, in *WatchServiceLogReq, opts ...grpc.CallOption) (GpmService_WatchServiceLogClient, error)
	// +gen:summary=远程安装服务
	// +gen:post=/api/v1/Service/install
	InstallService(ctx context.Context, opts ...grpc.CallOption) (GpmService_InstallServiceClient, error)
	// +gen:summary=查看服务历史版本
	// +gen:get=/api/v1/Service/{name}/versions
	ListServiceVersions(ctx context.Context, in *ListServiceVersionsReq, opts ...grpc.CallOption) (*ListServiceVersionsRsp, error)
	// +gen:summary=升级服务
	// +gen:post=/api/v1/Service/{name}/upgrade
	UpgradeService(ctx context.Context, opts ...grpc.CallOption) (GpmService_UpgradeServiceClient, error)
	// +gen:summary=回滚服务
	// +gen:post=/api/v1/Service/{name}/rollback
	RollBackService(ctx context.Context, in *RollbackServiceReq, opts ...grpc.CallOption) (*RollbackServiceRsp, error)
	// +gen:summary=获取目录信息下文件列表
	// +gen:get=/api/v1/Action/ls
	Ls(ctx context.Context, in *LsReq, opts ...grpc.CallOption) (*LsRsp, error)
	// +gen:summary=拉取文件
	// +gen:post=/api/v1/Action/pull
	Pull(ctx context.Context, in *PullReq, opts ...grpc.CallOption) (GpmService_PullClient, error)
	// +gen:summary=推送文件
	// +gen:post=/api/v1/Action/push
	Push(ctx context.Context, opts ...grpc.CallOption) (GpmService_PushClient, error)
	// +gen:summary=远程执行命令
	// +gen:post=/api/v1/Action/exec
	Exec(ctx context.Context, in *ExecReq, opts ...grpc.CallOption) (GpmService_ExecClient, error)
	// +gen:summary=远程命令行交互
	// +gen:post=/api/v1/Action/terminal
	Terminal(ctx context.Context, opts ...grpc.CallOption) (GpmService_TerminalClient, error)
}

type gpmServiceClient struct {
	cc *grpc.ClientConn
}

func NewGpmServiceClient(cc *grpc.ClientConn) GpmServiceClient {
	return &gpmServiceClient{cc}
}

func (c *gpmServiceClient) Healthz(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/gpmv1.GpmService/Healthz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpmServiceClient) ListService(ctx context.Context, in *ListServiceReq, opts ...grpc.CallOption) (*ListServiceRsp, error) {
	out := new(ListServiceRsp)
	err := c.cc.Invoke(ctx, "/gpmv1.GpmService/ListService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpmServiceClient) GetService(ctx context.Context, in *GetServiceReq, opts ...grpc.CallOption) (*GetServiceRsp, error) {
	out := new(GetServiceRsp)
	err := c.cc.Invoke(ctx, "/gpmv1.GpmService/GetService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpmServiceClient) CreateService(ctx context.Context, in *CreateServiceReq, opts ...grpc.CallOption) (*CreateServiceRsp, error) {
	out := new(CreateServiceRsp)
	err := c.cc.Invoke(ctx, "/gpmv1.GpmService/CreateService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpmServiceClient) StartService(ctx context.Context, in *StartServiceReq, opts ...grpc.CallOption) (*StartServiceRsp, error) {
	out := new(StartServiceRsp)
	err := c.cc.Invoke(ctx, "/gpmv1.GpmService/StartService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpmServiceClient) StopService(ctx context.Context, in *StopServiceReq, opts ...grpc.CallOption) (*StopServiceRsp, error) {
	out := new(StopServiceRsp)
	err := c.cc.Invoke(ctx, "/gpmv1.GpmService/StopService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpmServiceClient) RebootService(ctx context.Context, in *RebootServiceReq, opts ...grpc.CallOption) (*RebootServiceRsp, error) {
	out := new(RebootServiceRsp)
	err := c.cc.Invoke(ctx, "/gpmv1.GpmService/RebootService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpmServiceClient) DeleteService(ctx context.Context, in *DeleteServiceReq, opts ...grpc.CallOption) (*DeleteServiceRsp, error) {
	out := new(DeleteServiceRsp)
	err := c.cc.Invoke(ctx, "/gpmv1.GpmService/DeleteService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpmServiceClient) CatServiceLog(ctx context.Context, in *CatServiceLogReq, opts ...grpc.CallOption) (*CatServiceLogRsp, error) {
	out := new(CatServiceLogRsp)
	err := c.cc.Invoke(ctx, "/gpmv1.GpmService/CatServiceLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpmServiceClient) WatchServiceLog(ctx context.Context, in *WatchServiceLogReq, opts ...grpc.CallOption) (GpmService_WatchServiceLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GpmService_serviceDesc.Streams[0], "/gpmv1.GpmService/WatchServiceLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &gpmServiceWatchServiceLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GpmService_WatchServiceLogClient interface {
	Recv() (*WatchServiceLogRsp, error)
	grpc.ClientStream
}

type gpmServiceWatchServiceLogClient struct {
	grpc.ClientStream
}

func (x *gpmServiceWatchServiceLogClient) Recv() (*WatchServiceLogRsp, error) {
	m := new(WatchServiceLogRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gpmServiceClient) InstallService(ctx context.Context, opts ...grpc.CallOption) (GpmService_InstallServiceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GpmService_serviceDesc.Streams[1], "/gpmv1.GpmService/InstallService", opts...)
	if err != nil {
		return nil, err
	}
	x := &gpmServiceInstallServiceClient{stream}
	return x, nil
}

type GpmService_InstallServiceClient interface {
	Send(*InstallServiceReq) error
	Recv() (*InstallServiceRsp, error)
	grpc.ClientStream
}

type gpmServiceInstallServiceClient struct {
	grpc.ClientStream
}

func (x *gpmServiceInstallServiceClient) Send(m *InstallServiceReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gpmServiceInstallServiceClient) Recv() (*InstallServiceRsp, error) {
	m := new(InstallServiceRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gpmServiceClient) ListServiceVersions(ctx context.Context, in *ListServiceVersionsReq, opts ...grpc.CallOption) (*ListServiceVersionsRsp, error) {
	out := new(ListServiceVersionsRsp)
	err := c.cc.Invoke(ctx, "/gpmv1.GpmService/ListServiceVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpmServiceClient) UpgradeService(ctx context.Context, opts ...grpc.CallOption) (GpmService_UpgradeServiceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GpmService_serviceDesc.Streams[2], "/gpmv1.GpmService/UpgradeService", opts...)
	if err != nil {
		return nil, err
	}
	x := &gpmServiceUpgradeServiceClient{stream}
	return x, nil
}

type GpmService_UpgradeServiceClient interface {
	Send(*UpgradeServiceReq) error
	Recv() (*UpgradeServiceRsp, error)
	grpc.ClientStream
}

type gpmServiceUpgradeServiceClient struct {
	grpc.ClientStream
}

func (x *gpmServiceUpgradeServiceClient) Send(m *UpgradeServiceReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gpmServiceUpgradeServiceClient) Recv() (*UpgradeServiceRsp, error) {
	m := new(UpgradeServiceRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gpmServiceClient) RollBackService(ctx context.Context, in *RollbackServiceReq, opts ...grpc.CallOption) (*RollbackServiceRsp, error) {
	out := new(RollbackServiceRsp)
	err := c.cc.Invoke(ctx, "/gpmv1.GpmService/RollBackService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpmServiceClient) Ls(ctx context.Context, in *LsReq, opts ...grpc.CallOption) (*LsRsp, error) {
	out := new(LsRsp)
	err := c.cc.Invoke(ctx, "/gpmv1.GpmService/Ls", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpmServiceClient) Pull(ctx context.Context, in *PullReq, opts ...grpc.CallOption) (GpmService_PullClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GpmService_serviceDesc.Streams[3], "/gpmv1.GpmService/Pull", opts...)
	if err != nil {
		return nil, err
	}
	x := &gpmServicePullClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GpmService_PullClient interface {
	Recv() (*PullRsp, error)
	grpc.ClientStream
}

type gpmServicePullClient struct {
	grpc.ClientStream
}

func (x *gpmServicePullClient) Recv() (*PullRsp, error) {
	m := new(PullRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gpmServiceClient) Push(ctx context.Context, opts ...grpc.CallOption) (GpmService_PushClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GpmService_serviceDesc.Streams[4], "/gpmv1.GpmService/Push", opts...)
	if err != nil {
		return nil, err
	}
	x := &gpmServicePushClient{stream}
	return x, nil
}

type GpmService_PushClient interface {
	Send(*PushReq) error
	CloseAndRecv() (*PushRsp, error)
	grpc.ClientStream
}

type gpmServicePushClient struct {
	grpc.ClientStream
}

func (x *gpmServicePushClient) Send(m *PushReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gpmServicePushClient) CloseAndRecv() (*PushRsp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PushRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gpmServiceClient) Exec(ctx context.Context, in *ExecReq, opts ...grpc.CallOption) (GpmService_ExecClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GpmService_serviceDesc.Streams[5], "/gpmv1.GpmService/Exec", opts...)
	if err != nil {
		return nil, err
	}
	x := &gpmServiceExecClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GpmService_ExecClient interface {
	Recv() (*ExecRsp, error)
	grpc.ClientStream
}

type gpmServiceExecClient struct {
	grpc.ClientStream
}

func (x *gpmServiceExecClient) Recv() (*ExecRsp, error) {
	m := new(ExecRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gpmServiceClient) Terminal(ctx context.Context, opts ...grpc.CallOption) (GpmService_TerminalClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GpmService_serviceDesc.Streams[6], "/gpmv1.GpmService/Terminal", opts...)
	if err != nil {
		return nil, err
	}
	x := &gpmServiceTerminalClient{stream}
	return x, nil
}

type GpmService_TerminalClient interface {
	Send(*TerminalReq) error
	Recv() (*TerminalRsp, error)
	grpc.ClientStream
}

type gpmServiceTerminalClient struct {
	grpc.ClientStream
}

func (x *gpmServiceTerminalClient) Send(m *TerminalReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gpmServiceTerminalClient) Recv() (*TerminalRsp, error) {
	m := new(TerminalRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GpmServiceServer is the server API for GpmService service.
type GpmServiceServer interface {
	// +gne:summary=gpm 检测 gpm 服务状态
	// +gen:get=/api/healthz
	Healthz(context.Context, *Empty) (*Empty, error)
	// +gen:summary=查询所有服务
	// +gen:get=/api/v1/Service/
	ListService(context.Context, *ListServiceReq) (*ListServiceRsp, error)
	// +gen:summary=查询单个服务
	// +gen:get=/api/v1/Service/{name}
	GetService(context.Context, *GetServiceReq) (*GetServiceRsp, error)
	// +gen:summary=新建服务
	// +gen:post=/api/v1/Service/
	CreateService(context.Context, *CreateServiceReq) (*CreateServiceRsp, error)
	// +gen:summary=启动服务
	// +gen:patch=/api/v1/Service/{name}/action/start
	StartService(context.Context, *StartServiceReq) (*StartServiceRsp, error)
	// +gen:summary=停止服务
	// +gen:patch=/api/v1/Service/{name}/action/stop
	StopService(context.Context, *StopServiceReq) (*StopServiceRsp, error)
	// +gen:summary=重启服务
	// +gen:patch=/api/v1/Service/{name}/action/reboot
	RebootService(context.Context, *RebootServiceReq) (*RebootServiceRsp, error)
	// +gen:summary=删除服务
	// +gen:delete=/api/v1/Service/{name}
	DeleteService(context.Context, *DeleteServiceReq) (*DeleteServiceRsp, error)
	// +gen:summary=查看服务日志
	// +gen:get=/api/v1/Service/{name}/logs
	CatServiceLog(context.Context, *CatServiceLogReq) (*CatServiceLogRsp, error)
	// +gen:summary=动态监听服务日志
	// +gen:post=/api/v1/Service/{name}/watchLogs
	WatchServiceLog(*WatchServiceLogReq, GpmService_WatchServiceLogServer) error
	// +gen:summary=远程安装服务
	// +gen:post=/api/v1/Service/install
	InstallService(GpmService_InstallServiceServer) error
	// +gen:summary=查看服务历史版本
	// +gen:get=/api/v1/Service/{name}/versions
	ListServiceVersions(context.Context, *ListServiceVersionsReq) (*ListServiceVersionsRsp, error)
	// +gen:summary=升级服务
	// +gen:post=/api/v1/Service/{name}/upgrade
	UpgradeService(GpmService_UpgradeServiceServer) error
	// +gen:summary=回滚服务
	// +gen:post=/api/v1/Service/{name}/rollback
	RollBackService(context.Context, *RollbackServiceReq) (*RollbackServiceRsp, error)
	// +gen:summary=获取目录信息下文件列表
	// +gen:get=/api/v1/Action/ls
	Ls(context.Context, *LsReq) (*LsRsp, error)
	// +gen:summary=拉取文件
	// +gen:post=/api/v1/Action/pull
	Pull(*PullReq, GpmService_PullServer) error
	// +gen:summary=推送文件
	// +gen:post=/api/v1/Action/push
	Push(GpmService_PushServer) error
	// +gen:summary=远程执行命令
	// +gen:post=/api/v1/Action/exec
	Exec(*ExecReq, GpmService_ExecServer) error
	// +gen:summary=远程命令行交互
	// +gen:post=/api/v1/Action/terminal
	Terminal(GpmService_TerminalServer) error
}

// UnimplementedGpmServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGpmServiceServer struct {
}

func (*UnimplementedGpmServiceServer) Healthz(ctx context.Context, req *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthz not implemented")
}
func (*UnimplementedGpmServiceServer) ListService(ctx context.Context, req *ListServiceReq) (*ListServiceRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListService not implemented")
}
func (*UnimplementedGpmServiceServer) GetService(ctx context.Context, req *GetServiceReq) (*GetServiceRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetService not implemented")
}
func (*UnimplementedGpmServiceServer) CreateService(ctx context.Context, req *CreateServiceReq) (*CreateServiceRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateService not implemented")
}
func (*UnimplementedGpmServiceServer) StartService(ctx context.Context, req *StartServiceReq) (*StartServiceRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartService not implemented")
}
func (*UnimplementedGpmServiceServer) StopService(ctx context.Context, req *StopServiceReq) (*StopServiceRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopService not implemented")
}
func (*UnimplementedGpmServiceServer) RebootService(ctx context.Context, req *RebootServiceReq) (*RebootServiceRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RebootService not implemented")
}
func (*UnimplementedGpmServiceServer) DeleteService(ctx context.Context, req *DeleteServiceReq) (*DeleteServiceRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteService not implemented")
}
func (*UnimplementedGpmServiceServer) CatServiceLog(ctx context.Context, req *CatServiceLogReq) (*CatServiceLogRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CatServiceLog not implemented")
}
func (*UnimplementedGpmServiceServer) WatchServiceLog(req *WatchServiceLogReq, srv GpmService_WatchServiceLogServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchServiceLog not implemented")
}
func (*UnimplementedGpmServiceServer) InstallService(srv GpmService_InstallServiceServer) error {
	return status.Errorf(codes.Unimplemented, "method InstallService not implemented")
}
func (*UnimplementedGpmServiceServer) ListServiceVersions(ctx context.Context, req *ListServiceVersionsReq) (*ListServiceVersionsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServiceVersions not implemented")
}
func (*UnimplementedGpmServiceServer) UpgradeService(srv GpmService_UpgradeServiceServer) error {
	return status.Errorf(codes.Unimplemented, "method UpgradeService not implemented")
}
func (*UnimplementedGpmServiceServer) RollBackService(ctx context.Context, req *RollbackServiceReq) (*RollbackServiceRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollBackService not implemented")
}
func (*UnimplementedGpmServiceServer) Ls(ctx context.Context, req *LsReq) (*LsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ls not implemented")
}
func (*UnimplementedGpmServiceServer) Pull(req *PullReq, srv GpmService_PullServer) error {
	return status.Errorf(codes.Unimplemented, "method Pull not implemented")
}
func (*UnimplementedGpmServiceServer) Push(srv GpmService_PushServer) error {
	return status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (*UnimplementedGpmServiceServer) Exec(req *ExecReq, srv GpmService_ExecServer) error {
	return status.Errorf(codes.Unimplemented, "method Exec not implemented")
}
func (*UnimplementedGpmServiceServer) Terminal(srv GpmService_TerminalServer) error {
	return status.Errorf(codes.Unimplemented, "method Terminal not implemented")
}

func RegisterGpmServiceServer(s *grpc.Server, srv GpmServiceServer) {
	s.RegisterService(&_GpmService_serviceDesc, srv)
}

func _GpmService_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpmServiceServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gpmv1.GpmService/Healthz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpmServiceServer).Healthz(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpmService_ListService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpmServiceServer).ListService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gpmv1.GpmService/ListService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpmServiceServer).ListService(ctx, req.(*ListServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpmService_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpmServiceServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gpmv1.GpmService/GetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpmServiceServer).GetService(ctx, req.(*GetServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpmService_CreateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpmServiceServer).CreateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gpmv1.GpmService/CreateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpmServiceServer).CreateService(ctx, req.(*CreateServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpmService_StartService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpmServiceServer).StartService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gpmv1.GpmService/StartService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpmServiceServer).StartService(ctx, req.(*StartServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpmService_StopService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpmServiceServer).StopService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gpmv1.GpmService/StopService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpmServiceServer).StopService(ctx, req.(*StopServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpmService_RebootService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebootServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpmServiceServer).RebootService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gpmv1.GpmService/RebootService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpmServiceServer).RebootService(ctx, req.(*RebootServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpmService_DeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpmServiceServer).DeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gpmv1.GpmService/DeleteService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpmServiceServer).DeleteService(ctx, req.(*DeleteServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpmService_CatServiceLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CatServiceLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpmServiceServer).CatServiceLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gpmv1.GpmService/CatServiceLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpmServiceServer).CatServiceLog(ctx, req.(*CatServiceLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpmService_WatchServiceLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchServiceLogReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GpmServiceServer).WatchServiceLog(m, &gpmServiceWatchServiceLogServer{stream})
}

type GpmService_WatchServiceLogServer interface {
	Send(*WatchServiceLogRsp) error
	grpc.ServerStream
}

type gpmServiceWatchServiceLogServer struct {
	grpc.ServerStream
}

func (x *gpmServiceWatchServiceLogServer) Send(m *WatchServiceLogRsp) error {
	return x.ServerStream.SendMsg(m)
}

func _GpmService_InstallService_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GpmServiceServer).InstallService(&gpmServiceInstallServiceServer{stream})
}

type GpmService_InstallServiceServer interface {
	Send(*InstallServiceRsp) error
	Recv() (*InstallServiceReq, error)
	grpc.ServerStream
}

type gpmServiceInstallServiceServer struct {
	grpc.ServerStream
}

func (x *gpmServiceInstallServiceServer) Send(m *InstallServiceRsp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gpmServiceInstallServiceServer) Recv() (*InstallServiceReq, error) {
	m := new(InstallServiceReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GpmService_ListServiceVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceVersionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpmServiceServer).ListServiceVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gpmv1.GpmService/ListServiceVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpmServiceServer).ListServiceVersions(ctx, req.(*ListServiceVersionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpmService_UpgradeService_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GpmServiceServer).UpgradeService(&gpmServiceUpgradeServiceServer{stream})
}

type GpmService_UpgradeServiceServer interface {
	Send(*UpgradeServiceRsp) error
	Recv() (*UpgradeServiceReq, error)
	grpc.ServerStream
}

type gpmServiceUpgradeServiceServer struct {
	grpc.ServerStream
}

func (x *gpmServiceUpgradeServiceServer) Send(m *UpgradeServiceRsp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gpmServiceUpgradeServiceServer) Recv() (*UpgradeServiceReq, error) {
	m := new(UpgradeServiceReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GpmService_RollBackService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpmServiceServer).RollBackService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gpmv1.GpmService/RollBackService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpmServiceServer).RollBackService(ctx, req.(*RollbackServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpmService_Ls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpmServiceServer).Ls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gpmv1.GpmService/Ls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpmServiceServer).Ls(ctx, req.(*LsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpmService_Pull_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GpmServiceServer).Pull(m, &gpmServicePullServer{stream})
}

type GpmService_PullServer interface {
	Send(*PullRsp) error
	grpc.ServerStream
}

type gpmServicePullServer struct {
	grpc.ServerStream
}

func (x *gpmServicePullServer) Send(m *PullRsp) error {
	return x.ServerStream.SendMsg(m)
}

func _GpmService_Push_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GpmServiceServer).Push(&gpmServicePushServer{stream})
}

type GpmService_PushServer interface {
	SendAndClose(*PushRsp) error
	Recv() (*PushReq, error)
	grpc.ServerStream
}

type gpmServicePushServer struct {
	grpc.ServerStream
}

func (x *gpmServicePushServer) SendAndClose(m *PushRsp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gpmServicePushServer) Recv() (*PushReq, error) {
	m := new(PushReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GpmService_Exec_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GpmServiceServer).Exec(m, &gpmServiceExecServer{stream})
}

type GpmService_ExecServer interface {
	Send(*ExecRsp) error
	grpc.ServerStream
}

type gpmServiceExecServer struct {
	grpc.ServerStream
}

func (x *gpmServiceExecServer) Send(m *ExecRsp) error {
	return x.ServerStream.SendMsg(m)
}

func _GpmService_Terminal_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GpmServiceServer).Terminal(&gpmServiceTerminalServer{stream})
}

type GpmService_TerminalServer interface {
	Send(*TerminalRsp) error
	Recv() (*TerminalReq, error)
	grpc.ServerStream
}

type gpmServiceTerminalServer struct {
	grpc.ServerStream
}

func (x *gpmServiceTerminalServer) Send(m *TerminalRsp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gpmServiceTerminalServer) Recv() (*TerminalReq, error) {
	m := new(TerminalReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GpmService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gpmv1.GpmService",
	HandlerType: (*GpmServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Healthz",
			Handler:    _GpmService_Healthz_Handler,
		},
		{
			MethodName: "ListService",
			Handler:    _GpmService_ListService_Handler,
		},
		{
			MethodName: "GetService",
			Handler:    _GpmService_GetService_Handler,
		},
		{
			MethodName: "CreateService",
			Handler:    _GpmService_CreateService_Handler,
		},
		{
			MethodName: "StartService",
			Handler:    _GpmService_StartService_Handler,
		},
		{
			MethodName: "StopService",
			Handler:    _GpmService_StopService_Handler,
		},
		{
			MethodName: "RebootService",
			Handler:    _GpmService_RebootService_Handler,
		},
		{
			MethodName: "DeleteService",
			Handler:    _GpmService_DeleteService_Handler,
		},
		{
			MethodName: "CatServiceLog",
			Handler:    _GpmService_CatServiceLog_Handler,
		},
		{
			MethodName: "ListServiceVersions",
			Handler:    _GpmService_ListServiceVersions_Handler,
		},
		{
			MethodName: "RollBackService",
			Handler:    _GpmService_RollBackService_Handler,
		},
		{
			MethodName: "Ls",
			Handler:    _GpmService_Ls_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchServiceLog",
			Handler:       _GpmService_WatchServiceLog_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "InstallService",
			Handler:       _GpmService_InstallService_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "UpgradeService",
			Handler:       _GpmService_UpgradeService_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Pull",
			Handler:       _GpmService_Pull_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Push",
			Handler:       _GpmService_Push_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Exec",
			Handler:       _GpmService_Exec_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Terminal",
			Handler:       _GpmService_Terminal_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/gpm2/gpm/proto/service/gpm/v1/gpm.proto",
}
