// Code generated by proto-gen-vine. DO NOT EDIT.
// source: github.com/gpm2/gpm/proto/service/gpm/v1/gpm.proto

package gpmv1

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gpm2/gpm/proto/apis/gpm/v1"
	client "github.com/lack-io/vine/core/client"
	server "github.com/lack-io/vine/core/server"
	api "github.com/lack-io/vine/lib/api"
	apipb "github.com/lack-io/vine/proto/apis/api"
	openapi "github.com/lack-io/vine/proto/apis/openapi"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// API Endpoints for GpmService service
func NewGpmServiceEndpoints() []*apipb.Endpoint {
	return []*apipb.Endpoint{
		&apipb.Endpoint{
			Name:        "GpmService.Healthz",
			Description: "GpmService.Healthz",
			Path:        []string{"/api/healthz"},
			Method:      []string{"GET"},
			Body:        "*",
			Handler:     "rpc",
		},
		&apipb.Endpoint{
			Name:        "GpmService.ListService",
			Description: "GpmService.ListService",
			Path:        []string{"/api/v1/Service/"},
			Method:      []string{"GET"},
			Body:        "*",
			Handler:     "rpc",
		},
		&apipb.Endpoint{
			Name:        "GpmService.GetService",
			Description: "GpmService.GetService",
			Path:        []string{"/api/v1/Service/{name}"},
			Method:      []string{"GET"},
			Body:        "*",
			Handler:     "rpc",
		},
		&apipb.Endpoint{
			Name:        "GpmService.CreateService",
			Description: "GpmService.CreateService",
			Path:        []string{"/api/v1/Service/"},
			Method:      []string{"POST"},
			Body:        "*",
			Handler:     "rpc",
		},
		&apipb.Endpoint{
			Name:        "GpmService.StartService",
			Description: "GpmService.StartService",
			Path:        []string{"/api/v1/Service/{name}/action/start"},
			Method:      []string{"PATCH"},
			Body:        "*",
			Handler:     "rpc",
		},
		&apipb.Endpoint{
			Name:        "GpmService.StopService",
			Description: "GpmService.StopService",
			Path:        []string{"/api/v1/Service/{name}/action/stop"},
			Method:      []string{"PATCH"},
			Body:        "*",
			Handler:     "rpc",
		},
		&apipb.Endpoint{
			Name:        "GpmService.RebootService",
			Description: "GpmService.RebootService",
			Path:        []string{"/api/v1/Service/{name}/action/reboot"},
			Method:      []string{"PATCH"},
			Body:        "*",
			Handler:     "rpc",
		},
		&apipb.Endpoint{
			Name:        "GpmService.DeleteService",
			Description: "GpmService.DeleteService",
			Path:        []string{"/api/v1/Service/{name}"},
			Method:      []string{"DELETE"},
			Body:        "*",
			Handler:     "rpc",
		},
		&apipb.Endpoint{
			Name:        "GpmService.CatServiceLog",
			Description: "GpmService.CatServiceLog",
			Path:        []string{"/api/v1/Service/{name}/logs"},
			Method:      []string{"GET"},
			Body:        "*",
			Handler:     "rpc",
		},
		&apipb.Endpoint{
			Name:        "GpmService.WatchServiceLog",
			Description: "GpmService.WatchServiceLog",
			Path:        []string{"/api/v1/Service/{name}/watchLogs"},
			Method:      []string{"POST"},
			Body:        "*",
			Stream:      true,
			Handler:     "rpc",
		},
		&apipb.Endpoint{
			Name:        "GpmService.InstallService",
			Description: "GpmService.InstallService",
			Path:        []string{"/api/v1/Service/install"},
			Method:      []string{"POST"},
			Body:        "*",
			Stream:      true,
			Handler:     "rpc",
		},
		&apipb.Endpoint{
			Name:        "GpmService.ListServiceVersions",
			Description: "GpmService.ListServiceVersions",
			Path:        []string{"/api/v1/Service/{name}/versions"},
			Method:      []string{"GET"},
			Body:        "*",
			Handler:     "rpc",
		},
		&apipb.Endpoint{
			Name:        "GpmService.UpgradeService",
			Description: "GpmService.UpgradeService",
			Path:        []string{"/api/v1/Service/{name}/upgrade"},
			Method:      []string{"POST"},
			Body:        "*",
			Stream:      true,
			Handler:     "rpc",
		},
		&apipb.Endpoint{
			Name:        "GpmService.RollBackService",
			Description: "GpmService.RollBackService",
			Path:        []string{"/api/v1/Service/{name}/rollback"},
			Method:      []string{"POST"},
			Body:        "*",
			Stream:      true,
			Handler:     "rpc",
		},
		&apipb.Endpoint{
			Name:        "GpmService.Ls",
			Description: "GpmService.Ls",
			Path:        []string{"/api/v1/Action/ls"},
			Method:      []string{"GET"},
			Body:        "*",
			Handler:     "rpc",
		},
		&apipb.Endpoint{
			Name:        "GpmService.Pull",
			Description: "GpmService.Pull",
			Path:        []string{"/api/v1/Action/pull"},
			Method:      []string{"POST"},
			Body:        "*",
			Stream:      true,
			Handler:     "rpc",
		},
		&apipb.Endpoint{
			Name:        "GpmService.Push",
			Description: "GpmService.Push",
			Path:        []string{"/api/v1/Action/push"},
			Method:      []string{"POST"},
			Body:        "*",
			Stream:      true,
			Handler:     "rpc",
		},
		&apipb.Endpoint{
			Name:        "GpmService.Exec",
			Description: "GpmService.Exec",
			Path:        []string{"/api/v1/Action/exec"},
			Method:      []string{"POST"},
			Body:        "*",
			Stream:      true,
			Handler:     "rpc",
		},
		&apipb.Endpoint{
			Name:        "GpmService.Terminal",
			Description: "GpmService.Terminal",
			Path:        []string{"/api/v1/Action/terminal"},
			Method:      []string{"POST"},
			Body:        "*",
			Stream:      true,
			Handler:     "rpc",
		},
	}
}

// Swagger OpenAPI 3.0 for GpmService service
func NewGpmServiceOpenAPI() *openapi.OpenAPI {
	return &openapi.OpenAPI{
		Openapi: "3.0.1",
		Info: &openapi.OpenAPIInfo{
			Title:       "GpmServiceService",
			Description: "OpenAPI3.0 for GpmService",
			Version:     "v1.0.0",
		},
		Servers: []*openapi.OpenAPIServer{},
		Tags: []*openapi.OpenAPITag{
			&openapi.OpenAPITag{
				Name:        "GpmService",
				Description: "OpenAPI3.0 for GpmService",
			},
		},
		Paths: map[string]*openapi.OpenAPIPath{
			"/api/healthz": &openapi.OpenAPIPath{
				Get: &openapi.OpenAPIPathDocs{
					Tags:        []string{"GpmService"},
					Description: "GpmService Healthz",
					OperationId: "GpmServiceHealthz",
					Parameters:  []*openapi.PathParameters{},
					Responses: map[string]*openapi.PathResponse{
						"200": &openapi.PathResponse{
							Description: "successful response (stream response)",
							Content: &openapi.PathRequestBodyContent{
								ApplicationJson: &openapi.ApplicationContent{
									Schema: &openapi.Schema{Ref: "#/components/schemas/v1.Empty"},
								},
							},
						},
					},
					Security: []*openapi.PathSecurity{},
				},
			},
			"/api/v1/Service/": &openapi.OpenAPIPath{
				Get: &openapi.OpenAPIPathDocs{
					Tags:        []string{"GpmService"},
					Summary:     "查询所有服务",
					Description: "GpmService ListService",
					OperationId: "GpmServiceListService",
					Parameters:  []*openapi.PathParameters{},
					Responses: map[string]*openapi.PathResponse{
						"200": &openapi.PathResponse{
							Description: "successful response (stream response)",
							Content: &openapi.PathRequestBodyContent{
								ApplicationJson: &openapi.ApplicationContent{
									Schema: &openapi.Schema{Ref: "#/components/schemas/v1.ListServiceRsp"},
								},
							},
						},
					},
					Security: []*openapi.PathSecurity{},
				},
				Post: &openapi.OpenAPIPathDocs{
					Tags:        []string{"GpmService"},
					Summary:     "新建服务",
					Description: "GpmService CreateService",
					OperationId: "GpmServiceCreateService",
					RequestBody: &openapi.PathRequestBody{
						Description: "CreateService CreateServiceReq",
						Content: &openapi.PathRequestBodyContent{
							ApplicationJson: &openapi.ApplicationContent{
								Schema: &openapi.Schema{
									Ref: "#/components/schemas/v1.CreateServiceReq",
								},
							},
						},
					},
					Responses: map[string]*openapi.PathResponse{
						"200": &openapi.PathResponse{
							Description: "successful response (stream response)",
							Content: &openapi.PathRequestBodyContent{
								ApplicationJson: &openapi.ApplicationContent{
									Schema: &openapi.Schema{Ref: "#/components/schemas/v1.CreateServiceRsp"},
								},
							},
						},
					},
					Security: []*openapi.PathSecurity{},
				},
			},
			"/api/v1/Service/{name}/action/stop": &openapi.OpenAPIPath{
				Patch: &openapi.OpenAPIPathDocs{
					Tags:        []string{"GpmService"},
					Summary:     "停止服务",
					Description: "GpmService StopService",
					OperationId: "GpmServiceStopService",
					Parameters: []*openapi.PathParameters{
						&openapi.PathParameters{
							Name:        "name",
							In:          "path",
							Description: "StopServiceReq field name",
							Required:    true,
							Explode:     true,
							Schema: &openapi.Schema{
								Type: "string",
							},
						},
					},
					RequestBody: &openapi.PathRequestBody{
						Description: "StopService StopServiceReq",
						Content: &openapi.PathRequestBodyContent{
							ApplicationJson: &openapi.ApplicationContent{
								Schema: &openapi.Schema{
									Ref: "#/components/schemas/v1.StopServiceReq",
								},
							},
						},
					},
					Responses: map[string]*openapi.PathResponse{
						"200": &openapi.PathResponse{
							Description: "successful response (stream response)",
							Content: &openapi.PathRequestBodyContent{
								ApplicationJson: &openapi.ApplicationContent{
									Schema: &openapi.Schema{Ref: "#/components/schemas/v1.StopServiceRsp"},
								},
							},
						},
					},
					Security: []*openapi.PathSecurity{},
				},
			},
			"/api/v1/Service/{name}/watchLogs": &openapi.OpenAPIPath{
				Post: &openapi.OpenAPIPathDocs{
					Tags:        []string{"GpmService"},
					Summary:     "动态监听服务日志",
					Description: "GpmService WatchServiceLog",
					OperationId: "GpmServiceWatchServiceLog",
					Parameters: []*openapi.PathParameters{
						&openapi.PathParameters{
							Name:        "name",
							In:          "path",
							Description: "WatchServiceLogReq field name",
							Required:    true,
							Explode:     true,
							Schema: &openapi.Schema{
								Type: "string",
							},
						},
					},
					RequestBody: &openapi.PathRequestBody{
						Description: "WatchServiceLog WatchServiceLogReq",
						Content: &openapi.PathRequestBodyContent{
							ApplicationJson: &openapi.ApplicationContent{
								Schema: &openapi.Schema{
									Ref: "#/components/schemas/v1.WatchServiceLogReq",
								},
							},
						},
					},
					Responses: map[string]*openapi.PathResponse{
						"200": &openapi.PathResponse{
							Description: "successful response (stream response)",
							Content: &openapi.PathRequestBodyContent{
								ApplicationJson: &openapi.ApplicationContent{
									Schema: &openapi.Schema{Ref: "#/components/schemas/v1.WatchServiceLogRsp"},
								},
							},
						},
					},
					Security: []*openapi.PathSecurity{},
				},
			},
			"/api/v1/Service/{name}/versions": &openapi.OpenAPIPath{
				Get: &openapi.OpenAPIPathDocs{
					Tags:        []string{"GpmService"},
					Summary:     "查看服务历史版本",
					Description: "GpmService ListServiceVersions",
					OperationId: "GpmServiceListServiceVersions",
					Parameters: []*openapi.PathParameters{
						&openapi.PathParameters{
							Name:        "name",
							In:          "path",
							Description: "ListServiceVersionsReq field name",
							Required:    true,
							Explode:     true,
							Schema: &openapi.Schema{
								Type: "string",
							},
						},
					},
					Responses: map[string]*openapi.PathResponse{
						"200": &openapi.PathResponse{
							Description: "successful response (stream response)",
							Content: &openapi.PathRequestBodyContent{
								ApplicationJson: &openapi.ApplicationContent{
									Schema: &openapi.Schema{Ref: "#/components/schemas/v1.ListServiceVersionsRsp"},
								},
							},
						},
					},
					Security: []*openapi.PathSecurity{},
				},
			},
			"/api/v1/Service/{name}/action/start": &openapi.OpenAPIPath{
				Patch: &openapi.OpenAPIPathDocs{
					Tags:        []string{"GpmService"},
					Summary:     "启动服务",
					Description: "GpmService StartService",
					OperationId: "GpmServiceStartService",
					Parameters: []*openapi.PathParameters{
						&openapi.PathParameters{
							Name:        "name",
							In:          "path",
							Description: "StartServiceReq field name",
							Required:    true,
							Explode:     true,
							Schema: &openapi.Schema{
								Type: "string",
							},
						},
					},
					RequestBody: &openapi.PathRequestBody{
						Description: "StartService StartServiceReq",
						Content: &openapi.PathRequestBodyContent{
							ApplicationJson: &openapi.ApplicationContent{
								Schema: &openapi.Schema{
									Ref: "#/components/schemas/v1.StartServiceReq",
								},
							},
						},
					},
					Responses: map[string]*openapi.PathResponse{
						"200": &openapi.PathResponse{
							Description: "successful response (stream response)",
							Content: &openapi.PathRequestBodyContent{
								ApplicationJson: &openapi.ApplicationContent{
									Schema: &openapi.Schema{Ref: "#/components/schemas/v1.StartServiceRsp"},
								},
							},
						},
					},
					Security: []*openapi.PathSecurity{},
				},
			},
			"/api/v1/Action/push": &openapi.OpenAPIPath{
				Post: &openapi.OpenAPIPathDocs{
					Tags:        []string{"GpmService"},
					Summary:     "推送文件",
					Description: "GpmService Push",
					OperationId: "GpmServicePush",
					RequestBody: &openapi.PathRequestBody{
						Description: "Push PushReq",
						Content: &openapi.PathRequestBodyContent{
							ApplicationJson: &openapi.ApplicationContent{
								Schema: &openapi.Schema{
									Ref: "#/components/schemas/v1.PushReq",
								},
							},
						},
					},
					Responses: map[string]*openapi.PathResponse{
						"200": &openapi.PathResponse{
							Description: "successful response (stream response)",
							Content: &openapi.PathRequestBodyContent{
								ApplicationJson: &openapi.ApplicationContent{
									Schema: &openapi.Schema{Ref: "#/components/schemas/v1.PushRsp"},
								},
							},
						},
					},
					Security: []*openapi.PathSecurity{},
				},
			},
			"/api/v1/Service/{name}": &openapi.OpenAPIPath{
				Get: &openapi.OpenAPIPathDocs{
					Tags:        []string{"GpmService"},
					Summary:     "查询单个服务",
					Description: "GpmService GetService",
					OperationId: "GpmServiceGetService",
					Parameters: []*openapi.PathParameters{
						&openapi.PathParameters{
							Name:        "name",
							In:          "path",
							Description: "服务名称",
							Required:    true,
							Explode:     true,
							Schema: &openapi.Schema{
								Type: "string",
							},
						},
					},
					Responses: map[string]*openapi.PathResponse{
						"200": &openapi.PathResponse{
							Description: "successful response (stream response)",
							Content: &openapi.PathRequestBodyContent{
								ApplicationJson: &openapi.ApplicationContent{
									Schema: &openapi.Schema{Ref: "#/components/schemas/v1.GetServiceRsp"},
								},
							},
						},
					},
					Security: []*openapi.PathSecurity{},
				},
				Delete: &openapi.OpenAPIPathDocs{
					Tags:        []string{"GpmService"},
					Summary:     "删除服务",
					Description: "GpmService DeleteService",
					OperationId: "GpmServiceDeleteService",
					Parameters: []*openapi.PathParameters{
						&openapi.PathParameters{
							Name:        "name",
							In:          "path",
							Description: "DeleteServiceReq field name",
							Required:    true,
							Explode:     true,
							Schema: &openapi.Schema{
								Type: "string",
							},
						},
					},
					Responses: map[string]*openapi.PathResponse{
						"200": &openapi.PathResponse{
							Description: "successful response (stream response)",
							Content: &openapi.PathRequestBodyContent{
								ApplicationJson: &openapi.ApplicationContent{
									Schema: &openapi.Schema{Ref: "#/components/schemas/v1.DeleteServiceRsp"},
								},
							},
						},
					},
					Security: []*openapi.PathSecurity{},
				},
			},
			"/api/v1/Service/{name}/action/reboot": &openapi.OpenAPIPath{
				Patch: &openapi.OpenAPIPathDocs{
					Tags:        []string{"GpmService"},
					Summary:     "重启服务",
					Description: "GpmService RebootService",
					OperationId: "GpmServiceRebootService",
					Parameters: []*openapi.PathParameters{
						&openapi.PathParameters{
							Name:        "name",
							In:          "path",
							Description: "RebootServiceReq field name",
							Required:    true,
							Explode:     true,
							Schema: &openapi.Schema{
								Type: "string",
							},
						},
					},
					RequestBody: &openapi.PathRequestBody{
						Description: "RebootService RebootServiceReq",
						Content: &openapi.PathRequestBodyContent{
							ApplicationJson: &openapi.ApplicationContent{
								Schema: &openapi.Schema{
									Ref: "#/components/schemas/v1.RebootServiceReq",
								},
							},
						},
					},
					Responses: map[string]*openapi.PathResponse{
						"200": &openapi.PathResponse{
							Description: "successful response (stream response)",
							Content: &openapi.PathRequestBodyContent{
								ApplicationJson: &openapi.ApplicationContent{
									Schema: &openapi.Schema{Ref: "#/components/schemas/v1.RebootServiceRsp"},
								},
							},
						},
					},
					Security: []*openapi.PathSecurity{},
				},
			},
			"/api/v1/Service/{name}/upgrade": &openapi.OpenAPIPath{
				Post: &openapi.OpenAPIPathDocs{
					Tags:        []string{"GpmService"},
					Summary:     "升级服务",
					Description: "GpmService UpgradeService",
					OperationId: "GpmServiceUpgradeService",
					Parameters: []*openapi.PathParameters{
						&openapi.PathParameters{
							Name:        "name",
							In:          "path",
							Description: "服务名称",
							Required:    true,
							Explode:     true,
							Schema: &openapi.Schema{
								Type: "string",
							},
						},
					},
					RequestBody: &openapi.PathRequestBody{
						Description: "UpgradeService UpgradeServiceReq",
						Content: &openapi.PathRequestBodyContent{
							ApplicationJson: &openapi.ApplicationContent{
								Schema: &openapi.Schema{
									Ref: "#/components/schemas/v1.UpgradeServiceReq",
								},
							},
						},
					},
					Responses: map[string]*openapi.PathResponse{
						"200": &openapi.PathResponse{
							Description: "successful response (stream response)",
							Content: &openapi.PathRequestBodyContent{
								ApplicationJson: &openapi.ApplicationContent{
									Schema: &openapi.Schema{Ref: "#/components/schemas/v1.UpgradeServiceRsp"},
								},
							},
						},
					},
					Security: []*openapi.PathSecurity{},
				},
			},
			"/api/v1/Action/exec": &openapi.OpenAPIPath{
				Post: &openapi.OpenAPIPathDocs{
					Tags:        []string{"GpmService"},
					Summary:     "远程执行命令",
					Description: "GpmService Exec",
					OperationId: "GpmServiceExec",
					RequestBody: &openapi.PathRequestBody{
						Description: "Exec ExecReq",
						Content: &openapi.PathRequestBodyContent{
							ApplicationJson: &openapi.ApplicationContent{
								Schema: &openapi.Schema{
									Ref: "#/components/schemas/v1.ExecReq",
								},
							},
						},
					},
					Responses: map[string]*openapi.PathResponse{
						"200": &openapi.PathResponse{
							Description: "successful response (stream response)",
							Content: &openapi.PathRequestBodyContent{
								ApplicationJson: &openapi.ApplicationContent{
									Schema: &openapi.Schema{Ref: "#/components/schemas/v1.ExecRsp"},
								},
							},
						},
					},
					Security: []*openapi.PathSecurity{},
				},
			},
			"/api/v1/Action/terminal": &openapi.OpenAPIPath{
				Post: &openapi.OpenAPIPathDocs{
					Tags:        []string{"GpmService"},
					Summary:     "远程命令行交互",
					Description: "GpmService Terminal",
					OperationId: "GpmServiceTerminal",
					RequestBody: &openapi.PathRequestBody{
						Description: "Terminal TerminalReq",
						Content: &openapi.PathRequestBodyContent{
							ApplicationJson: &openapi.ApplicationContent{
								Schema: &openapi.Schema{
									Ref: "#/components/schemas/v1.TerminalReq",
								},
							},
						},
					},
					Responses: map[string]*openapi.PathResponse{
						"200": &openapi.PathResponse{
							Description: "successful response (stream response)",
							Content: &openapi.PathRequestBodyContent{
								ApplicationJson: &openapi.ApplicationContent{
									Schema: &openapi.Schema{Ref: "#/components/schemas/v1.TerminalRsp"},
								},
							},
						},
					},
					Security: []*openapi.PathSecurity{},
				},
			},
			"/api/v1/Service/{name}/logs": &openapi.OpenAPIPath{
				Get: &openapi.OpenAPIPathDocs{
					Tags:        []string{"GpmService"},
					Summary:     "查看服务日志",
					Description: "GpmService CatServiceLog",
					OperationId: "GpmServiceCatServiceLog",
					Parameters: []*openapi.PathParameters{
						&openapi.PathParameters{
							Name:        "name",
							In:          "path",
							Description: "CatServiceLogReq field name",
							Required:    true,
							Explode:     true,
							Schema: &openapi.Schema{
								Type: "string",
							},
						},
					},
					Responses: map[string]*openapi.PathResponse{
						"200": &openapi.PathResponse{
							Description: "successful response (stream response)",
							Content: &openapi.PathRequestBodyContent{
								ApplicationJson: &openapi.ApplicationContent{
									Schema: &openapi.Schema{Ref: "#/components/schemas/v1.CatServiceLogRsp"},
								},
							},
						},
					},
					Security: []*openapi.PathSecurity{},
				},
			},
			"/api/v1/Service/install": &openapi.OpenAPIPath{
				Post: &openapi.OpenAPIPathDocs{
					Tags:        []string{"GpmService"},
					Summary:     "远程安装服务",
					Description: "GpmService InstallService",
					OperationId: "GpmServiceInstallService",
					RequestBody: &openapi.PathRequestBody{
						Description: "InstallService InstallServiceReq",
						Content: &openapi.PathRequestBodyContent{
							ApplicationJson: &openapi.ApplicationContent{
								Schema: &openapi.Schema{
									Ref: "#/components/schemas/v1.InstallServiceReq",
								},
							},
						},
					},
					Responses: map[string]*openapi.PathResponse{
						"200": &openapi.PathResponse{
							Description: "successful response (stream response)",
							Content: &openapi.PathRequestBodyContent{
								ApplicationJson: &openapi.ApplicationContent{
									Schema: &openapi.Schema{Ref: "#/components/schemas/v1.InstallServiceRsp"},
								},
							},
						},
					},
					Security: []*openapi.PathSecurity{},
				},
			},
			"/api/v1/Service/{name}/rollback": &openapi.OpenAPIPath{
				Post: &openapi.OpenAPIPathDocs{
					Tags:        []string{"GpmService"},
					Summary:     "回滚服务",
					Description: "GpmService RollBackService",
					OperationId: "GpmServiceRollBackService",
					Parameters: []*openapi.PathParameters{
						&openapi.PathParameters{
							Name:        "name",
							In:          "path",
							Description: "RollbackServiceReq field name",
							Required:    true,
							Explode:     true,
							Schema: &openapi.Schema{
								Type: "string",
							},
						},
					},
					RequestBody: &openapi.PathRequestBody{
						Description: "RollBackService RollbackServiceReq",
						Content: &openapi.PathRequestBodyContent{
							ApplicationJson: &openapi.ApplicationContent{
								Schema: &openapi.Schema{
									Ref: "#/components/schemas/v1.RollbackServiceReq",
								},
							},
						},
					},
					Responses: map[string]*openapi.PathResponse{
						"200": &openapi.PathResponse{
							Description: "successful response (stream response)",
							Content: &openapi.PathRequestBodyContent{
								ApplicationJson: &openapi.ApplicationContent{
									Schema: &openapi.Schema{Ref: "#/components/schemas/v1.RollbackServiceRsp"},
								},
							},
						},
					},
					Security: []*openapi.PathSecurity{},
				},
			},
			"/api/v1/Action/ls": &openapi.OpenAPIPath{
				Get: &openapi.OpenAPIPathDocs{
					Tags:        []string{"GpmService"},
					Summary:     "获取目录信息下文件列表",
					Description: "GpmService Ls",
					OperationId: "GpmServiceLs",
					Parameters: []*openapi.PathParameters{
						&openapi.PathParameters{
							Name:        "path",
							In:          "query",
							Description: "LsReq field path",
							Required:    true,
							Style:       "form",
							Explode:     true,
							Schema: &openapi.Schema{
								Type: "string",
							},
						},
					},
					Responses: map[string]*openapi.PathResponse{
						"200": &openapi.PathResponse{
							Description: "successful response (stream response)",
							Content: &openapi.PathRequestBodyContent{
								ApplicationJson: &openapi.ApplicationContent{
									Schema: &openapi.Schema{Ref: "#/components/schemas/v1.LsRsp"},
								},
							},
						},
					},
					Security: []*openapi.PathSecurity{},
				},
			},
			"/api/v1/Action/pull": &openapi.OpenAPIPath{
				Post: &openapi.OpenAPIPathDocs{
					Tags:        []string{"GpmService"},
					Summary:     "拉取文件",
					Description: "GpmService Pull",
					OperationId: "GpmServicePull",
					RequestBody: &openapi.PathRequestBody{
						Description: "Pull PullReq",
						Content: &openapi.PathRequestBodyContent{
							ApplicationJson: &openapi.ApplicationContent{
								Schema: &openapi.Schema{
									Ref: "#/components/schemas/v1.PullReq",
								},
							},
						},
					},
					Responses: map[string]*openapi.PathResponse{
						"200": &openapi.PathResponse{
							Description: "successful response (stream response)",
							Content: &openapi.PathRequestBodyContent{
								ApplicationJson: &openapi.ApplicationContent{
									Schema: &openapi.Schema{Ref: "#/components/schemas/v1.PullRsp"},
								},
							},
						},
					},
					Security: []*openapi.PathSecurity{},
				},
			},
		},
		Components: &openapi.OpenAPIComponents{
			SecuritySchemes: &openapi.SecuritySchemes{},
			Schemas: map[string]*openapi.Model{
				"v1.Empty": &openapi.Model{
					Type:       "object",
					Properties: map[string]*openapi.Schema{},
				},
				"v1.ListServiceReq": &openapi.Model{
					Type:       "object",
					Properties: map[string]*openapi.Schema{},
				},
				"v1.ListServiceRsp": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"services": &openapi.Schema{
							Type:  "array",
							Items: &openapi.Schema{Ref: "#/components/schemas/v1.Service"},
						},
						"total": &openapi.Schema{
							Type:   "integer",
							Format: "int64",
						},
					},
				},
				"v1.CreateServiceReq": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"name": &openapi.Schema{
							Type: "string",
						},
						"bin": &openapi.Schema{
							Type: "string",
						},
						"args": &openapi.Schema{
							Type:  "array",
							Items: &openapi.Schema{Type: "string"},
						},
						"dir": &openapi.Schema{
							Type: "string",
						},
						"env": &openapi.Schema{
							AdditionalProperties: &openapi.Schema{},
						},
						"sysProcAttr": &openapi.Schema{
							Type: "object",
							Ref:  "#/components/schemas/v1.SysProcAttr",
						},
						"log": &openapi.Schema{
							Type: "object",
							Ref:  "#/components/schemas/v1.ProcLog",
						},
						"version": &openapi.Schema{
							Type: "string",
						},
						"autoRestart": &openapi.Schema{
							Type:   "integer",
							Format: "int32",
						},
					},
					Required: []string{"name", "bin"},
				},
				"v1.CreateServiceRsp": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"service": &openapi.Schema{
							Type: "object",
							Ref:  "#/components/schemas/v1.Service",
						},
					},
				},
				"v1.StopServiceReq": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"name": &openapi.Schema{
							Type: "string",
						},
					},
					Required: []string{"name"},
				},
				"v1.StopServiceRsp": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"service": &openapi.Schema{
							Type: "object",
							Ref:  "#/components/schemas/v1.Service",
						},
					},
				},
				"v1.WatchServiceLogReq": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"name": &openapi.Schema{
							Type: "string",
						},
					},
					Required: []string{"name"},
				},
				"v1.WatchServiceLogRsp": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"log": &openapi.Schema{
							Type: "object",
							Ref:  "#/components/schemas/v1.ProcLog",
						},
					},
				},
				"v1.ListServiceVersionsReq": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"name": &openapi.Schema{
							Type: "string",
						},
					},
					Required: []string{"name"},
				},
				"v1.ListServiceVersionsRsp": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"versions": &openapi.Schema{
							Type:  "array",
							Items: &openapi.Schema{Ref: "#/components/schemas/v1.ServiceVersion"},
						},
					},
				},
				"v1.StartServiceReq": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"name": &openapi.Schema{
							Type: "string",
						},
					},
					Required: []string{"name"},
				},
				"v1.StartServiceRsp": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"service": &openapi.Schema{
							Type: "object",
							Ref:  "#/components/schemas/v1.Service",
						},
					},
				},
				"v1.PushReq": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"in": &openapi.Schema{
							Type: "object",
							Ref:  "#/components/schemas/v1.PushIn",
						},
					},
				},
				"v1.PushRsp": &openapi.Model{
					Type:       "object",
					Properties: map[string]*openapi.Schema{},
				},
				"v1.GetServiceReq": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"name": &openapi.Schema{
							Type: "string",
						},
					},
					Required: []string{"name"},
				},
				"v1.GetServiceRsp": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"service": &openapi.Schema{
							Type: "object",
							Ref:  "#/components/schemas/v1.Service",
						},
					},
				},
				"v1.DeleteServiceReq": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"name": &openapi.Schema{
							Type: "string",
						},
					},
					Required: []string{"name"},
				},
				"v1.DeleteServiceRsp": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"service": &openapi.Schema{
							Type: "object",
							Ref:  "#/components/schemas/v1.Service",
						},
					},
				},
				"v1.RebootServiceReq": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"name": &openapi.Schema{
							Type: "string",
						},
					},
					Required: []string{"name"},
				},
				"v1.RebootServiceRsp": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"service": &openapi.Schema{
							Type: "object",
							Ref:  "#/components/schemas/v1.Service",
						},
					},
				},
				"v1.UpgradeServiceReq": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"name": &openapi.Schema{
							Type: "string",
						},
						"package": &openapi.Schema{
							Type: "string",
						},
						"total": &openapi.Schema{
							Type:   "integer",
							Format: "int64",
						},
						"chunk": &openapi.Schema{},
					},
					Required: []string{"name", "package", "total"},
				},
				"v1.UpgradeServiceRsp": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"chunked": &openapi.Schema{
							Type:   "integer",
							Format: "int64",
						},
						"speed": &openapi.Schema{
							Type:   "integer",
							Format: "int64",
						},
						"msg": &openapi.Schema{
							Type: "string",
						},
					},
				},
				"v1.ExecReq": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"in": &openapi.Schema{
							Type: "object",
							Ref:  "#/components/schemas/v1.ExecIn",
						},
					},
					Required: []string{"in"},
				},
				"v1.ExecRsp": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"result": &openapi.Schema{
							Type: "object",
							Ref:  "#/components/schemas/v1.ExecResult",
						},
					},
				},
				"v1.TerminalReq": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"in": &openapi.Schema{
							Type: "object",
							Ref:  "#/components/schemas/v1.TerminalIn",
						},
					},
					Required: []string{"in"},
				},
				"v1.TerminalRsp": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"result": &openapi.Schema{
							Type: "object",
							Ref:  "#/components/schemas/v1.TerminalResult",
						},
					},
				},
				"v1.CatServiceLogReq": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"name": &openapi.Schema{
							Type: "string",
						},
					},
					Required: []string{"name"},
				},
				"v1.CatServiceLogRsp": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"text": &openapi.Schema{},
					},
				},
				"v1.InstallServiceReq": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"name": &openapi.Schema{
							Type: "string",
						},
						"bin": &openapi.Schema{
							Type: "string",
						},
						"args": &openapi.Schema{
							Type:  "array",
							Items: &openapi.Schema{Type: "string"},
						},
						"dir": &openapi.Schema{
							Type: "string",
						},
						"env": &openapi.Schema{
							AdditionalProperties: &openapi.Schema{},
						},
						"sysProcAttr": &openapi.Schema{
							Type: "object",
							Ref:  "#/components/schemas/v1.SysProcAttr",
						},
						"log": &openapi.Schema{
							Type: "object",
							Ref:  "#/components/schemas/v1.ProcLog",
						},
						"version": &openapi.Schema{
							Type: "string",
						},
						"autoRestart": &openapi.Schema{
							Type:   "integer",
							Format: "int32",
						},
						"package": &openapi.Schema{
							Type: "string",
						},
						"total": &openapi.Schema{
							Type:   "integer",
							Format: "int64",
						},
						"chunk": &openapi.Schema{},
					},
					Required: []string{"name", "bin", "package", "total"},
				},
				"v1.InstallServiceRsp": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"chunked": &openapi.Schema{
							Type:   "integer",
							Format: "int64",
						},
						"speed": &openapi.Schema{
							Type:   "integer",
							Format: "int64",
						},
						"msg": &openapi.Schema{
							Type: "string",
						},
					},
				},
				"v1.RollbackServiceReq": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"name": &openapi.Schema{
							Type: "string",
						},
						"revision": &openapi.Schema{
							Type: "string",
						},
					},
					Required: []string{"name"},
				},
				"v1.RollbackServiceRsp": &openapi.Model{
					Type:       "object",
					Properties: map[string]*openapi.Schema{},
				},
				"v1.LsReq": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"path": &openapi.Schema{
							Type: "string",
						},
					},
					Required: []string{"path"},
				},
				"v1.LsRsp": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"files": &openapi.Schema{
							Type:  "array",
							Items: &openapi.Schema{Ref: "#/components/schemas/v1.FileInfo"},
						},
					},
				},
				"v1.PullReq": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"name": &openapi.Schema{
							Type: "string",
						},
					},
				},
				"v1.PullRsp": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"result": &openapi.Schema{
							Type: "object",
							Ref:  "#/components/schemas/v1.PullResult",
						},
					},
				},
				"v1.Service": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"name": &openapi.Schema{
							Type: "string",
						},
						"bin": &openapi.Schema{
							Type: "string",
						},
						"args": &openapi.Schema{
							Type:  "array",
							Items: &openapi.Schema{Type: "string"},
						},
						"pid": &openapi.Schema{
							Type:   "integer",
							Format: "int64",
						},
						"dir": &openapi.Schema{
							Type: "string",
						},
						"env": &openapi.Schema{
							AdditionalProperties: &openapi.Schema{},
						},
						"sysProcAttr": &openapi.Schema{
							Type: "object",
							Ref:  "#/components/schemas/v1.SysProcAttr",
						},
						"log": &openapi.Schema{
							Type: "object",
							Ref:  "#/components/schemas/v1.ProcLog",
						},
						"version": &openapi.Schema{
							Type: "string",
						},
						"autoRestart": &openapi.Schema{
							Type:   "integer",
							Format: "int32",
						},
						"creationTimestamp": &openapi.Schema{
							Type:   "integer",
							Format: "int64",
						},
						"updateTimestamp": &openapi.Schema{
							Type:   "integer",
							Format: "int64",
						},
						"startTimestamp": &openapi.Schema{
							Type:   "integer",
							Format: "int64",
						},
						"status": &openapi.Schema{
							Type: "string",
							Enum: []string{"init", "running", "stopped", "failed", "upgrading"},
						},
						"msg": &openapi.Schema{
							Type: "string",
						},
						"stat": &openapi.Schema{
							Type: "object",
							Ref:  "#/components/schemas/v1.Stat",
						},
					},
					Required: []string{"name", "bin"},
				},
				"v1.SysProcAttr": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"chroot": &openapi.Schema{
							Type: "string",
						},
						"uid": &openapi.Schema{
							Type:   "integer",
							Format: "int32",
						},
						"user": &openapi.Schema{
							Type: "string",
						},
						"gid": &openapi.Schema{
							Type:   "integer",
							Format: "int32",
						},
						"group": &openapi.Schema{
							Type: "string",
						},
					},
				},
				"v1.ProcLog": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"text": &openapi.Schema{
							Type: "string",
						},
						"error": &openapi.Schema{
							Type: "string",
						},
						"timestamp": &openapi.Schema{
							Type:   "integer",
							Format: "int64",
						},
					},
				},
				"v1.ServiceVersion": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"name": &openapi.Schema{
							Type: "string",
						},
						"timestamp": &openapi.Schema{
							Type: "string",
						},
					},
				},
				"v1.PushIn": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"dst": &openapi.Schema{
							Type: "string",
						},
						"chunk": &openapi.Schema{},
						"isOk": &openapi.Schema{
							Type: "boolean",
						},
					},
				},
				"v1.ExecIn": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"name": &openapi.Schema{
							Type: "string",
						},
						"args": &openapi.Schema{
							Type:  "array",
							Items: &openapi.Schema{Type: "string"},
						},
						"env": &openapi.Schema{
							AdditionalProperties: &openapi.Schema{},
						},
						"uid": &openapi.Schema{
							Type:   "integer",
							Format: "int32",
						},
						"gid": &openapi.Schema{
							Type:   "integer",
							Format: "int32",
						},
					},
					Required: []string{"name"},
				},
				"v1.ExecResult": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"result": &openapi.Schema{
							Type: "string",
						},
						"error": &openapi.Schema{
							Type: "string",
						},
						"finished": &openapi.Schema{
							Type: "boolean",
						},
					},
				},
				"v1.TerminalIn": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"name": &openapi.Schema{
							Type: "string",
						},
						"args": &openapi.Schema{
							Type:  "array",
							Items: &openapi.Schema{Type: "string"},
						},
						"env": &openapi.Schema{
							AdditionalProperties: &openapi.Schema{},
						},
						"uid": &openapi.Schema{
							Type:   "integer",
							Format: "int32",
						},
						"gid": &openapi.Schema{
							Type:   "integer",
							Format: "int32",
						},
					},
					Required: []string{"name"},
				},
				"v1.TerminalResult": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"result": &openapi.Schema{
							Type: "string",
						},
						"error": &openapi.Schema{
							Type: "string",
						},
					},
				},
				"v1.FileInfo": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"name": &openapi.Schema{
							Type: "string",
						},
						"size": &openapi.Schema{
							Type:   "integer",
							Format: "int64",
						},
						"mode": &openapi.Schema{
							Type: "string",
						},
						"modTime": &openapi.Schema{
							Type:   "integer",
							Format: "int64",
						},
						"IsDir": &openapi.Schema{
							Type: "boolean",
						},
					},
				},
				"v1.PullResult": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"name": &openapi.Schema{
							Type: "string",
						},
						"chunk": &openapi.Schema{},
						"error": &openapi.Schema{
							Type: "string",
						},
						"finished": &openapi.Schema{
							Type: "boolean",
						},
					},
				},
				"v1.Stat": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"cpuPercent": &openapi.Schema{
							Type:   "number",
							Format: "double",
						},
						"memory": &openapi.Schema{},
						"memPercent": &openapi.Schema{
							Type:   "number",
							Format: "float",
						},
					},
				},
			},
		},
	}
}

// Client API for GpmService service
// +gen:openapi
type GpmService interface {
	// +gne:summary=gpm 检测 gpm 服务状态
	// +gen:get=/api/healthz
	Healthz(ctx context.Context, in *Empty, opts ...client.CallOption) (*Empty, error)
	// +gen:summary=查询所有服务
	// +gen:get=/api/v1/Service/
	ListService(ctx context.Context, in *ListServiceReq, opts ...client.CallOption) (*ListServiceRsp, error)
	// +gen:summary=查询单个服务
	// +gen:get=/api/v1/Service/{name}
	GetService(ctx context.Context, in *GetServiceReq, opts ...client.CallOption) (*GetServiceRsp, error)
	// +gen:summary=新建服务
	// +gen:post=/api/v1/Service/
	CreateService(ctx context.Context, in *CreateServiceReq, opts ...client.CallOption) (*CreateServiceRsp, error)
	// +gen:summary=启动服务
	// +gen:patch=/api/v1/Service/{name}/action/start
	StartService(ctx context.Context, in *StartServiceReq, opts ...client.CallOption) (*StartServiceRsp, error)
	// +gen:summary=停止服务
	// +gen:patch=/api/v1/Service/{name}/action/stop
	StopService(ctx context.Context, in *StopServiceReq, opts ...client.CallOption) (*StopServiceRsp, error)
	// +gen:summary=重启服务
	// +gen:patch=/api/v1/Service/{name}/action/reboot
	RebootService(ctx context.Context, in *RebootServiceReq, opts ...client.CallOption) (*RebootServiceRsp, error)
	// +gen:summary=删除服务
	// +gen:delete=/api/v1/Service/{name}
	DeleteService(ctx context.Context, in *DeleteServiceReq, opts ...client.CallOption) (*DeleteServiceRsp, error)
	// +gen:summary=查看服务日志
	// +gen:get=/api/v1/Service/{name}/logs
	CatServiceLog(ctx context.Context, in *CatServiceLogReq, opts ...client.CallOption) (*CatServiceLogRsp, error)
	// +gen:summary=动态监听服务日志
	// +gen:post=/api/v1/Service/{name}/watchLogs
	WatchServiceLog(ctx context.Context, in *WatchServiceLogReq, opts ...client.CallOption) (GpmService_WatchServiceLogService, error)
	// +gen:summary=远程安装服务
	// +gen:post=/api/v1/Service/install
	InstallService(ctx context.Context, opts ...client.CallOption) (GpmService_InstallServiceService, error)
	// +gen:summary=查看服务历史版本
	// +gen:get=/api/v1/Service/{name}/versions
	ListServiceVersions(ctx context.Context, in *ListServiceVersionsReq, opts ...client.CallOption) (*ListServiceVersionsRsp, error)
	// +gen:summary=升级服务
	// +gen:post=/api/v1/Service/{name}/upgrade
	UpgradeService(ctx context.Context, opts ...client.CallOption) (GpmService_UpgradeServiceService, error)
	// +gen:summary=回滚服务
	// +gen:post=/api/v1/Service/{name}/rollback
	RollBackService(ctx context.Context, in *RollbackServiceReq, opts ...client.CallOption) (GpmService_RollBackServiceService, error)
	// +gen:summary=获取目录信息下文件列表
	// +gen:get=/api/v1/Action/ls
	Ls(ctx context.Context, in *LsReq, opts ...client.CallOption) (*LsRsp, error)
	// +gen:summary=拉取文件
	// +gen:post=/api/v1/Action/pull
	Pull(ctx context.Context, in *PullReq, opts ...client.CallOption) (GpmService_PullService, error)
	// +gen:summary=推送文件
	// +gen:post=/api/v1/Action/push
	Push(ctx context.Context, opts ...client.CallOption) (GpmService_PushService, error)
	// +gen:summary=远程执行命令
	// +gen:post=/api/v1/Action/exec
	Exec(ctx context.Context, in *ExecReq, opts ...client.CallOption) (GpmService_ExecService, error)
	// +gen:summary=远程命令行交互
	// +gen:post=/api/v1/Action/terminal
	Terminal(ctx context.Context, opts ...client.CallOption) (GpmService_TerminalService, error)
}

type gpmService struct {
	c    client.Client
	name string
}

func NewGpmService(name string, c client.Client) GpmService {
	return &gpmService{
		c:    c,
		name: name,
	}
}

func (c *gpmService) Healthz(ctx context.Context, in *Empty, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "GpmService.Healthz", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpmService) ListService(ctx context.Context, in *ListServiceReq, opts ...client.CallOption) (*ListServiceRsp, error) {
	req := c.c.NewRequest(c.name, "GpmService.ListService", in)
	out := new(ListServiceRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpmService) GetService(ctx context.Context, in *GetServiceReq, opts ...client.CallOption) (*GetServiceRsp, error) {
	req := c.c.NewRequest(c.name, "GpmService.GetService", in)
	out := new(GetServiceRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpmService) CreateService(ctx context.Context, in *CreateServiceReq, opts ...client.CallOption) (*CreateServiceRsp, error) {
	req := c.c.NewRequest(c.name, "GpmService.CreateService", in)
	out := new(CreateServiceRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpmService) StartService(ctx context.Context, in *StartServiceReq, opts ...client.CallOption) (*StartServiceRsp, error) {
	req := c.c.NewRequest(c.name, "GpmService.StartService", in)
	out := new(StartServiceRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpmService) StopService(ctx context.Context, in *StopServiceReq, opts ...client.CallOption) (*StopServiceRsp, error) {
	req := c.c.NewRequest(c.name, "GpmService.StopService", in)
	out := new(StopServiceRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpmService) RebootService(ctx context.Context, in *RebootServiceReq, opts ...client.CallOption) (*RebootServiceRsp, error) {
	req := c.c.NewRequest(c.name, "GpmService.RebootService", in)
	out := new(RebootServiceRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpmService) DeleteService(ctx context.Context, in *DeleteServiceReq, opts ...client.CallOption) (*DeleteServiceRsp, error) {
	req := c.c.NewRequest(c.name, "GpmService.DeleteService", in)
	out := new(DeleteServiceRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpmService) CatServiceLog(ctx context.Context, in *CatServiceLogReq, opts ...client.CallOption) (*CatServiceLogRsp, error) {
	req := c.c.NewRequest(c.name, "GpmService.CatServiceLog", in)
	out := new(CatServiceLogRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpmService) WatchServiceLog(ctx context.Context, in *WatchServiceLogReq, opts ...client.CallOption) (GpmService_WatchServiceLogService, error) {
	req := c.c.NewRequest(c.name, "GpmService.WatchServiceLog", &WatchServiceLogReq{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &gpmServiceWatchServiceLog{stream}, nil
}

type GpmService_WatchServiceLogService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*WatchServiceLogRsp, error)
}

type gpmServiceWatchServiceLog struct {
	stream client.Stream
}

func (x *gpmServiceWatchServiceLog) Close() error {
	return x.stream.Close()
}

func (x *gpmServiceWatchServiceLog) Context() context.Context {
	return x.stream.Context()
}

func (x *gpmServiceWatchServiceLog) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *gpmServiceWatchServiceLog) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *gpmServiceWatchServiceLog) Recv() (*WatchServiceLogRsp, error) {
	m := new(WatchServiceLogRsp)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gpmService) InstallService(ctx context.Context, opts ...client.CallOption) (GpmService_InstallServiceService, error) {
	req := c.c.NewRequest(c.name, "GpmService.InstallService", &InstallServiceReq{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &gpmServiceInstallService{stream}, nil
}

type GpmService_InstallServiceService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*InstallServiceReq) error
	Recv() (*InstallServiceRsp, error)
}

type gpmServiceInstallService struct {
	stream client.Stream
}

func (x *gpmServiceInstallService) Close() error {
	return x.stream.Close()
}

func (x *gpmServiceInstallService) Context() context.Context {
	return x.stream.Context()
}

func (x *gpmServiceInstallService) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *gpmServiceInstallService) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *gpmServiceInstallService) Send(m *InstallServiceReq) error {
	return x.stream.Send(m)
}

func (x *gpmServiceInstallService) Recv() (*InstallServiceRsp, error) {
	m := new(InstallServiceRsp)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gpmService) ListServiceVersions(ctx context.Context, in *ListServiceVersionsReq, opts ...client.CallOption) (*ListServiceVersionsRsp, error) {
	req := c.c.NewRequest(c.name, "GpmService.ListServiceVersions", in)
	out := new(ListServiceVersionsRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpmService) UpgradeService(ctx context.Context, opts ...client.CallOption) (GpmService_UpgradeServiceService, error) {
	req := c.c.NewRequest(c.name, "GpmService.UpgradeService", &UpgradeServiceReq{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &gpmServiceUpgradeService{stream}, nil
}

type GpmService_UpgradeServiceService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*UpgradeServiceReq) error
	Recv() (*UpgradeServiceRsp, error)
}

type gpmServiceUpgradeService struct {
	stream client.Stream
}

func (x *gpmServiceUpgradeService) Close() error {
	return x.stream.Close()
}

func (x *gpmServiceUpgradeService) Context() context.Context {
	return x.stream.Context()
}

func (x *gpmServiceUpgradeService) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *gpmServiceUpgradeService) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *gpmServiceUpgradeService) Send(m *UpgradeServiceReq) error {
	return x.stream.Send(m)
}

func (x *gpmServiceUpgradeService) Recv() (*UpgradeServiceRsp, error) {
	m := new(UpgradeServiceRsp)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gpmService) RollBackService(ctx context.Context, in *RollbackServiceReq, opts ...client.CallOption) (GpmService_RollBackServiceService, error) {
	req := c.c.NewRequest(c.name, "GpmService.RollBackService", &RollbackServiceReq{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &gpmServiceRollBackService{stream}, nil
}

type GpmService_RollBackServiceService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*RollbackServiceRsp, error)
}

type gpmServiceRollBackService struct {
	stream client.Stream
}

func (x *gpmServiceRollBackService) Close() error {
	return x.stream.Close()
}

func (x *gpmServiceRollBackService) Context() context.Context {
	return x.stream.Context()
}

func (x *gpmServiceRollBackService) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *gpmServiceRollBackService) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *gpmServiceRollBackService) Recv() (*RollbackServiceRsp, error) {
	m := new(RollbackServiceRsp)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gpmService) Ls(ctx context.Context, in *LsReq, opts ...client.CallOption) (*LsRsp, error) {
	req := c.c.NewRequest(c.name, "GpmService.Ls", in)
	out := new(LsRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpmService) Pull(ctx context.Context, in *PullReq, opts ...client.CallOption) (GpmService_PullService, error) {
	req := c.c.NewRequest(c.name, "GpmService.Pull", &PullReq{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &gpmServicePull{stream}, nil
}

type GpmService_PullService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*PullRsp, error)
}

type gpmServicePull struct {
	stream client.Stream
}

func (x *gpmServicePull) Close() error {
	return x.stream.Close()
}

func (x *gpmServicePull) Context() context.Context {
	return x.stream.Context()
}

func (x *gpmServicePull) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *gpmServicePull) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *gpmServicePull) Recv() (*PullRsp, error) {
	m := new(PullRsp)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gpmService) Push(ctx context.Context, opts ...client.CallOption) (GpmService_PushService, error) {
	req := c.c.NewRequest(c.name, "GpmService.Push", &PushReq{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &gpmServicePush{stream}, nil
}

type GpmService_PushService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseAndRecv() (*PushRsp, error)
	Send(*PushReq) error
}

type gpmServicePush struct {
	stream client.Stream
}

func (x *gpmServicePush) CloseAndRecv() (*PushRsp, error) {
	if err := x.stream.Close(); err != nil {
		return nil, err
	}
	r := new(PushRsp)
	err := x.RecvMsg(r)
	return r, err
}

func (x *gpmServicePush) Context() context.Context {
	return x.stream.Context()
}

func (x *gpmServicePush) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *gpmServicePush) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *gpmServicePush) Send(m *PushReq) error {
	return x.stream.Send(m)
}

func (c *gpmService) Exec(ctx context.Context, in *ExecReq, opts ...client.CallOption) (GpmService_ExecService, error) {
	req := c.c.NewRequest(c.name, "GpmService.Exec", &ExecReq{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &gpmServiceExec{stream}, nil
}

type GpmService_ExecService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ExecRsp, error)
}

type gpmServiceExec struct {
	stream client.Stream
}

func (x *gpmServiceExec) Close() error {
	return x.stream.Close()
}

func (x *gpmServiceExec) Context() context.Context {
	return x.stream.Context()
}

func (x *gpmServiceExec) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *gpmServiceExec) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *gpmServiceExec) Recv() (*ExecRsp, error) {
	m := new(ExecRsp)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gpmService) Terminal(ctx context.Context, opts ...client.CallOption) (GpmService_TerminalService, error) {
	req := c.c.NewRequest(c.name, "GpmService.Terminal", &TerminalReq{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &gpmServiceTerminal{stream}, nil
}

type GpmService_TerminalService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*TerminalReq) error
	Recv() (*TerminalRsp, error)
}

type gpmServiceTerminal struct {
	stream client.Stream
}

func (x *gpmServiceTerminal) Close() error {
	return x.stream.Close()
}

func (x *gpmServiceTerminal) Context() context.Context {
	return x.stream.Context()
}

func (x *gpmServiceTerminal) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *gpmServiceTerminal) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *gpmServiceTerminal) Send(m *TerminalReq) error {
	return x.stream.Send(m)
}

func (x *gpmServiceTerminal) Recv() (*TerminalRsp, error) {
	m := new(TerminalRsp)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GpmService service
// +gen:openapi
type GpmServiceHandler interface {
	// +gne:summary=gpm 检测 gpm 服务状态
	// +gen:get=/api/healthz
	Healthz(context.Context, *Empty, *Empty) error
	// +gen:summary=查询所有服务
	// +gen:get=/api/v1/Service/
	ListService(context.Context, *ListServiceReq, *ListServiceRsp) error
	// +gen:summary=查询单个服务
	// +gen:get=/api/v1/Service/{name}
	GetService(context.Context, *GetServiceReq, *GetServiceRsp) error
	// +gen:summary=新建服务
	// +gen:post=/api/v1/Service/
	CreateService(context.Context, *CreateServiceReq, *CreateServiceRsp) error
	// +gen:summary=启动服务
	// +gen:patch=/api/v1/Service/{name}/action/start
	StartService(context.Context, *StartServiceReq, *StartServiceRsp) error
	// +gen:summary=停止服务
	// +gen:patch=/api/v1/Service/{name}/action/stop
	StopService(context.Context, *StopServiceReq, *StopServiceRsp) error
	// +gen:summary=重启服务
	// +gen:patch=/api/v1/Service/{name}/action/reboot
	RebootService(context.Context, *RebootServiceReq, *RebootServiceRsp) error
	// +gen:summary=删除服务
	// +gen:delete=/api/v1/Service/{name}
	DeleteService(context.Context, *DeleteServiceReq, *DeleteServiceRsp) error
	// +gen:summary=查看服务日志
	// +gen:get=/api/v1/Service/{name}/logs
	CatServiceLog(context.Context, *CatServiceLogReq, *CatServiceLogRsp) error
	// +gen:summary=动态监听服务日志
	// +gen:post=/api/v1/Service/{name}/watchLogs
	WatchServiceLog(context.Context, *WatchServiceLogReq, GpmService_WatchServiceLogStream) error
	// +gen:summary=远程安装服务
	// +gen:post=/api/v1/Service/install
	InstallService(context.Context, GpmService_InstallServiceStream) error
	// +gen:summary=查看服务历史版本
	// +gen:get=/api/v1/Service/{name}/versions
	ListServiceVersions(context.Context, *ListServiceVersionsReq, *ListServiceVersionsRsp) error
	// +gen:summary=升级服务
	// +gen:post=/api/v1/Service/{name}/upgrade
	UpgradeService(context.Context, GpmService_UpgradeServiceStream) error
	// +gen:summary=回滚服务
	// +gen:post=/api/v1/Service/{name}/rollback
	RollBackService(context.Context, *RollbackServiceReq, GpmService_RollBackServiceStream) error
	// +gen:summary=获取目录信息下文件列表
	// +gen:get=/api/v1/Action/ls
	Ls(context.Context, *LsReq, *LsRsp) error
	// +gen:summary=拉取文件
	// +gen:post=/api/v1/Action/pull
	Pull(context.Context, *PullReq, GpmService_PullStream) error
	// +gen:summary=推送文件
	// +gen:post=/api/v1/Action/push
	Push(context.Context, GpmService_PushStream) error
	// +gen:summary=远程执行命令
	// +gen:post=/api/v1/Action/exec
	Exec(context.Context, *ExecReq, GpmService_ExecStream) error
	// +gen:summary=远程命令行交互
	// +gen:post=/api/v1/Action/terminal
	Terminal(context.Context, GpmService_TerminalStream) error
}

func RegisterGpmServiceHandler(s server.Server, hdlr GpmServiceHandler, opts ...server.HandlerOption) error {
	type gpmServiceImpl interface {
		Healthz(ctx context.Context, in *Empty, out *Empty) error
		ListService(ctx context.Context, in *ListServiceReq, out *ListServiceRsp) error
		GetService(ctx context.Context, in *GetServiceReq, out *GetServiceRsp) error
		CreateService(ctx context.Context, in *CreateServiceReq, out *CreateServiceRsp) error
		StartService(ctx context.Context, in *StartServiceReq, out *StartServiceRsp) error
		StopService(ctx context.Context, in *StopServiceReq, out *StopServiceRsp) error
		RebootService(ctx context.Context, in *RebootServiceReq, out *RebootServiceRsp) error
		DeleteService(ctx context.Context, in *DeleteServiceReq, out *DeleteServiceRsp) error
		CatServiceLog(ctx context.Context, in *CatServiceLogReq, out *CatServiceLogRsp) error
		WatchServiceLog(ctx context.Context, stream server.Stream) error
		InstallService(ctx context.Context, stream server.Stream) error
		ListServiceVersions(ctx context.Context, in *ListServiceVersionsReq, out *ListServiceVersionsRsp) error
		UpgradeService(ctx context.Context, stream server.Stream) error
		RollBackService(ctx context.Context, stream server.Stream) error
		Ls(ctx context.Context, in *LsReq, out *LsRsp) error
		Pull(ctx context.Context, stream server.Stream) error
		Push(ctx context.Context, stream server.Stream) error
		Exec(ctx context.Context, stream server.Stream) error
		Terminal(ctx context.Context, stream server.Stream) error
	}
	type GpmService struct {
		gpmServiceImpl
	}
	h := &gpmServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&apipb.Endpoint{
		Name:        "GpmService.Healthz",
		Description: "GpmService.Healthz",
		Path:        []string{"/api/healthz"},
		Method:      []string{"GET"},
		Body:        "*",
		Handler:     "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&apipb.Endpoint{
		Name:        "GpmService.ListService",
		Description: "GpmService.ListService",
		Path:        []string{"/api/v1/Service/"},
		Method:      []string{"GET"},
		Body:        "*",
		Handler:     "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&apipb.Endpoint{
		Name:        "GpmService.GetService",
		Description: "GpmService.GetService",
		Path:        []string{"/api/v1/Service/{name}"},
		Method:      []string{"GET"},
		Body:        "*",
		Handler:     "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&apipb.Endpoint{
		Name:        "GpmService.CreateService",
		Description: "GpmService.CreateService",
		Path:        []string{"/api/v1/Service/"},
		Method:      []string{"POST"},
		Body:        "*",
		Handler:     "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&apipb.Endpoint{
		Name:        "GpmService.StartService",
		Description: "GpmService.StartService",
		Path:        []string{"/api/v1/Service/{name}/action/start"},
		Method:      []string{"PATCH"},
		Body:        "*",
		Handler:     "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&apipb.Endpoint{
		Name:        "GpmService.StopService",
		Description: "GpmService.StopService",
		Path:        []string{"/api/v1/Service/{name}/action/stop"},
		Method:      []string{"PATCH"},
		Body:        "*",
		Handler:     "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&apipb.Endpoint{
		Name:        "GpmService.RebootService",
		Description: "GpmService.RebootService",
		Path:        []string{"/api/v1/Service/{name}/action/reboot"},
		Method:      []string{"PATCH"},
		Body:        "*",
		Handler:     "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&apipb.Endpoint{
		Name:        "GpmService.DeleteService",
		Description: "GpmService.DeleteService",
		Path:        []string{"/api/v1/Service/{name}"},
		Method:      []string{"DELETE"},
		Body:        "*",
		Handler:     "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&apipb.Endpoint{
		Name:        "GpmService.CatServiceLog",
		Description: "GpmService.CatServiceLog",
		Path:        []string{"/api/v1/Service/{name}/logs"},
		Method:      []string{"GET"},
		Body:        "*",
		Handler:     "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&apipb.Endpoint{
		Name:        "GpmService.WatchServiceLog",
		Description: "GpmService.WatchServiceLog",
		Path:        []string{"/api/v1/Service/{name}/watchLogs"},
		Method:      []string{"POST"},
		Body:        "*",
		Stream:      true,
		Handler:     "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&apipb.Endpoint{
		Name:        "GpmService.InstallService",
		Description: "GpmService.InstallService",
		Path:        []string{"/api/v1/Service/install"},
		Method:      []string{"POST"},
		Body:        "*",
		Stream:      true,
		Handler:     "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&apipb.Endpoint{
		Name:        "GpmService.ListServiceVersions",
		Description: "GpmService.ListServiceVersions",
		Path:        []string{"/api/v1/Service/{name}/versions"},
		Method:      []string{"GET"},
		Body:        "*",
		Handler:     "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&apipb.Endpoint{
		Name:        "GpmService.UpgradeService",
		Description: "GpmService.UpgradeService",
		Path:        []string{"/api/v1/Service/{name}/upgrade"},
		Method:      []string{"POST"},
		Body:        "*",
		Stream:      true,
		Handler:     "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&apipb.Endpoint{
		Name:        "GpmService.RollBackService",
		Description: "GpmService.RollBackService",
		Path:        []string{"/api/v1/Service/{name}/rollback"},
		Method:      []string{"POST"},
		Body:        "*",
		Stream:      true,
		Handler:     "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&apipb.Endpoint{
		Name:        "GpmService.Ls",
		Description: "GpmService.Ls",
		Path:        []string{"/api/v1/Action/ls"},
		Method:      []string{"GET"},
		Body:        "*",
		Handler:     "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&apipb.Endpoint{
		Name:        "GpmService.Pull",
		Description: "GpmService.Pull",
		Path:        []string{"/api/v1/Action/pull"},
		Method:      []string{"POST"},
		Body:        "*",
		Stream:      true,
		Handler:     "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&apipb.Endpoint{
		Name:        "GpmService.Push",
		Description: "GpmService.Push",
		Path:        []string{"/api/v1/Action/push"},
		Method:      []string{"POST"},
		Body:        "*",
		Stream:      true,
		Handler:     "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&apipb.Endpoint{
		Name:        "GpmService.Exec",
		Description: "GpmService.Exec",
		Path:        []string{"/api/v1/Action/exec"},
		Method:      []string{"POST"},
		Body:        "*",
		Stream:      true,
		Handler:     "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&apipb.Endpoint{
		Name:        "GpmService.Terminal",
		Description: "GpmService.Terminal",
		Path:        []string{"/api/v1/Action/terminal"},
		Method:      []string{"POST"},
		Body:        "*",
		Stream:      true,
		Handler:     "rpc",
	}))
	opts = append(opts, server.OpenAPIHandler(NewGpmServiceOpenAPI()))
	return s.Handle(s.NewHandler(&GpmService{h}, opts...))
}

type gpmServiceHandler struct {
	GpmServiceHandler
}

func (h *gpmServiceHandler) Healthz(ctx context.Context, in *Empty, out *Empty) error {
	return h.GpmServiceHandler.Healthz(ctx, in, out)
}

func (h *gpmServiceHandler) ListService(ctx context.Context, in *ListServiceReq, out *ListServiceRsp) error {
	return h.GpmServiceHandler.ListService(ctx, in, out)
}

func (h *gpmServiceHandler) GetService(ctx context.Context, in *GetServiceReq, out *GetServiceRsp) error {
	return h.GpmServiceHandler.GetService(ctx, in, out)
}

func (h *gpmServiceHandler) CreateService(ctx context.Context, in *CreateServiceReq, out *CreateServiceRsp) error {
	return h.GpmServiceHandler.CreateService(ctx, in, out)
}

func (h *gpmServiceHandler) StartService(ctx context.Context, in *StartServiceReq, out *StartServiceRsp) error {
	return h.GpmServiceHandler.StartService(ctx, in, out)
}

func (h *gpmServiceHandler) StopService(ctx context.Context, in *StopServiceReq, out *StopServiceRsp) error {
	return h.GpmServiceHandler.StopService(ctx, in, out)
}

func (h *gpmServiceHandler) RebootService(ctx context.Context, in *RebootServiceReq, out *RebootServiceRsp) error {
	return h.GpmServiceHandler.RebootService(ctx, in, out)
}

func (h *gpmServiceHandler) DeleteService(ctx context.Context, in *DeleteServiceReq, out *DeleteServiceRsp) error {
	return h.GpmServiceHandler.DeleteService(ctx, in, out)
}

func (h *gpmServiceHandler) CatServiceLog(ctx context.Context, in *CatServiceLogReq, out *CatServiceLogRsp) error {
	return h.GpmServiceHandler.CatServiceLog(ctx, in, out)
}

func (h *gpmServiceHandler) WatchServiceLog(ctx context.Context, stream server.Stream) error {
	m := new(WatchServiceLogReq)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.GpmServiceHandler.WatchServiceLog(ctx, m, &gpmServiceWatchServiceLogStream{stream})
}

type GpmService_WatchServiceLogStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*WatchServiceLogRsp) error
}

type gpmServiceWatchServiceLogStream struct {
	stream server.Stream
}

func (x *gpmServiceWatchServiceLogStream) Close() error {
	return x.stream.Close()
}

func (x *gpmServiceWatchServiceLogStream) Context() context.Context {
	return x.stream.Context()
}

func (x *gpmServiceWatchServiceLogStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *gpmServiceWatchServiceLogStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *gpmServiceWatchServiceLogStream) Send(m *WatchServiceLogRsp) error {
	return x.stream.Send(m)
}

func (h *gpmServiceHandler) InstallService(ctx context.Context, stream server.Stream) error {
	return h.GpmServiceHandler.InstallService(ctx, &gpmServiceInstallServiceStream{stream})
}

type GpmService_InstallServiceStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*InstallServiceRsp) error
	Recv() (*InstallServiceReq, error)
}

type gpmServiceInstallServiceStream struct {
	stream server.Stream
}

func (x *gpmServiceInstallServiceStream) Close() error {
	return x.stream.Close()
}

func (x *gpmServiceInstallServiceStream) Context() context.Context {
	return x.stream.Context()
}

func (x *gpmServiceInstallServiceStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *gpmServiceInstallServiceStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *gpmServiceInstallServiceStream) Send(m *InstallServiceRsp) error {
	return x.stream.Send(m)
}

func (x *gpmServiceInstallServiceStream) Recv() (*InstallServiceReq, error) {
	m := new(InstallServiceReq)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *gpmServiceHandler) ListServiceVersions(ctx context.Context, in *ListServiceVersionsReq, out *ListServiceVersionsRsp) error {
	return h.GpmServiceHandler.ListServiceVersions(ctx, in, out)
}

func (h *gpmServiceHandler) UpgradeService(ctx context.Context, stream server.Stream) error {
	return h.GpmServiceHandler.UpgradeService(ctx, &gpmServiceUpgradeServiceStream{stream})
}

type GpmService_UpgradeServiceStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*UpgradeServiceRsp) error
	Recv() (*UpgradeServiceReq, error)
}

type gpmServiceUpgradeServiceStream struct {
	stream server.Stream
}

func (x *gpmServiceUpgradeServiceStream) Close() error {
	return x.stream.Close()
}

func (x *gpmServiceUpgradeServiceStream) Context() context.Context {
	return x.stream.Context()
}

func (x *gpmServiceUpgradeServiceStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *gpmServiceUpgradeServiceStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *gpmServiceUpgradeServiceStream) Send(m *UpgradeServiceRsp) error {
	return x.stream.Send(m)
}

func (x *gpmServiceUpgradeServiceStream) Recv() (*UpgradeServiceReq, error) {
	m := new(UpgradeServiceReq)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *gpmServiceHandler) RollBackService(ctx context.Context, stream server.Stream) error {
	m := new(RollbackServiceReq)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.GpmServiceHandler.RollBackService(ctx, m, &gpmServiceRollBackServiceStream{stream})
}

type GpmService_RollBackServiceStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*RollbackServiceRsp) error
}

type gpmServiceRollBackServiceStream struct {
	stream server.Stream
}

func (x *gpmServiceRollBackServiceStream) Close() error {
	return x.stream.Close()
}

func (x *gpmServiceRollBackServiceStream) Context() context.Context {
	return x.stream.Context()
}

func (x *gpmServiceRollBackServiceStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *gpmServiceRollBackServiceStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *gpmServiceRollBackServiceStream) Send(m *RollbackServiceRsp) error {
	return x.stream.Send(m)
}

func (h *gpmServiceHandler) Ls(ctx context.Context, in *LsReq, out *LsRsp) error {
	return h.GpmServiceHandler.Ls(ctx, in, out)
}

func (h *gpmServiceHandler) Pull(ctx context.Context, stream server.Stream) error {
	m := new(PullReq)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.GpmServiceHandler.Pull(ctx, m, &gpmServicePullStream{stream})
}

type GpmService_PullStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*PullRsp) error
}

type gpmServicePullStream struct {
	stream server.Stream
}

func (x *gpmServicePullStream) Close() error {
	return x.stream.Close()
}

func (x *gpmServicePullStream) Context() context.Context {
	return x.stream.Context()
}

func (x *gpmServicePullStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *gpmServicePullStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *gpmServicePullStream) Send(m *PullRsp) error {
	return x.stream.Send(m)
}

func (h *gpmServiceHandler) Push(ctx context.Context, stream server.Stream) error {
	return h.GpmServiceHandler.Push(ctx, &gpmServicePushStream{stream})
}

type GpmService_PushStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	SendAndClose(*PushRsp) error
	Recv() (*PushReq, error)
}

type gpmServicePushStream struct {
	stream server.Stream
}

func (x *gpmServicePushStream) SendAndClose(in *PushRsp) error {
	if err := x.SendMsg(in); err != nil {
		return err
	}
	return x.stream.Close()
}

func (x *gpmServicePushStream) Context() context.Context {
	return x.stream.Context()
}

func (x *gpmServicePushStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *gpmServicePushStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *gpmServicePushStream) Recv() (*PushReq, error) {
	m := new(PushReq)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *gpmServiceHandler) Exec(ctx context.Context, stream server.Stream) error {
	m := new(ExecReq)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.GpmServiceHandler.Exec(ctx, m, &gpmServiceExecStream{stream})
}

type GpmService_ExecStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ExecRsp) error
}

type gpmServiceExecStream struct {
	stream server.Stream
}

func (x *gpmServiceExecStream) Close() error {
	return x.stream.Close()
}

func (x *gpmServiceExecStream) Context() context.Context {
	return x.stream.Context()
}

func (x *gpmServiceExecStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *gpmServiceExecStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *gpmServiceExecStream) Send(m *ExecRsp) error {
	return x.stream.Send(m)
}

func (h *gpmServiceHandler) Terminal(ctx context.Context, stream server.Stream) error {
	return h.GpmServiceHandler.Terminal(ctx, &gpmServiceTerminalStream{stream})
}

type GpmService_TerminalStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*TerminalRsp) error
	Recv() (*TerminalReq, error)
}

type gpmServiceTerminalStream struct {
	stream server.Stream
}

func (x *gpmServiceTerminalStream) Close() error {
	return x.stream.Close()
}

func (x *gpmServiceTerminalStream) Context() context.Context {
	return x.stream.Context()
}

func (x *gpmServiceTerminalStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *gpmServiceTerminalStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *gpmServiceTerminalStream) Send(m *TerminalRsp) error {
	return x.stream.Send(m)
}

func (x *gpmServiceTerminalStream) Recv() (*TerminalReq, error) {
	m := new(TerminalReq)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
