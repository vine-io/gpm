// Code generated by proto-gen-validator. DO NOT EDIT.
// source: github.com/gpm2/gpm/proto/service/gpm/v1/gpm.proto

package gpmv1

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gpm2/gpm/proto/apis/gpm/v1"
	is "github.com/lack-io/vine/util/is"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func (m *Empty) Validate() error {
	return m.ValidateE("")
}

func (m *Empty) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *ListServiceReq) Validate() error {
	return m.ValidateE("")
}

func (m *ListServiceReq) ValidateE(prefix string) error {
	errs := make([]error, 0)
	if int64(m.Page) == 0 {
		m.Page = 1
	}
	if int64(m.Page) != 0 {
		if !(m.Page > 0) {
			errs = append(errs, fmt.Errorf("field '%spage' must great than '0'", prefix))
		}
	}
	if int64(m.Size) == 0 {
		m.Size = 10
	}
	if int64(m.Size) != 0 {
		if !(m.Size > 0) {
			errs = append(errs, fmt.Errorf("field '%ssize' must great than '0'", prefix))
		}
	}
	return is.MargeErr(errs...)
}

func (m *ListServiceRsp) Validate() error {
	return m.ValidateE("")
}

func (m *ListServiceRsp) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *GetServiceReq) Validate() error {
	return m.ValidateE("")
}

func (m *GetServiceReq) ValidateE(prefix string) error {
	errs := make([]error, 0)
	if int64(m.Id) == 0 {
		errs = append(errs, fmt.Errorf("field '%sid' is required", prefix))
	}
	return is.MargeErr(errs...)
}

func (m *GetServiceRsp) Validate() error {
	return m.ValidateE("")
}

func (m *GetServiceRsp) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *GetServiceByNameReq) Validate() error {
	return m.ValidateE("")
}

func (m *GetServiceByNameReq) ValidateE(prefix string) error {
	errs := make([]error, 0)
	if len(m.Name) == 0 {
		errs = append(errs, fmt.Errorf("field '%sname' is required", prefix))
	}
	return is.MargeErr(errs...)
}

func (m *GetServiceByNameRsp) Validate() error {
	return m.ValidateE("")
}

func (m *GetServiceByNameRsp) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *CreateServiceReq) Validate() error {
	return m.ValidateE("")
}

func (m *CreateServiceReq) ValidateE(prefix string) error {
	errs := make([]error, 0)
	if len(m.Name) == 0 {
		errs = append(errs, fmt.Errorf("field '%sname' is required", prefix))
	}
	if len(m.Bin) == 0 {
		errs = append(errs, fmt.Errorf("field '%sbin' is required", prefix))
	}
	return is.MargeErr(errs...)
}

func (m *CreateServiceRsp) Validate() error {
	return m.ValidateE("")
}

func (m *CreateServiceRsp) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *StartServiceReq) Validate() error {
	return m.ValidateE("")
}

func (m *StartServiceReq) ValidateE(prefix string) error {
	errs := make([]error, 0)
	if int64(m.Id) == 0 {
		errs = append(errs, fmt.Errorf("field '%sid' is required", prefix))
	}
	return is.MargeErr(errs...)
}

func (m *StartServiceRsp) Validate() error {
	return m.ValidateE("")
}

func (m *StartServiceRsp) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *StopServiceReq) Validate() error {
	return m.ValidateE("")
}

func (m *StopServiceReq) ValidateE(prefix string) error {
	errs := make([]error, 0)
	if int64(m.Id) == 0 {
		errs = append(errs, fmt.Errorf("field '%sid' is required", prefix))
	}
	return is.MargeErr(errs...)
}

func (m *StopServiceRsp) Validate() error {
	return m.ValidateE("")
}

func (m *StopServiceRsp) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *RebootServiceReq) Validate() error {
	return m.ValidateE("")
}

func (m *RebootServiceReq) ValidateE(prefix string) error {
	errs := make([]error, 0)
	if int64(m.Id) == 0 {
		errs = append(errs, fmt.Errorf("field '%sid' is required", prefix))
	}
	return is.MargeErr(errs...)
}

func (m *RebootServiceRsp) Validate() error {
	return m.ValidateE("")
}

func (m *RebootServiceRsp) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}

func (m *DeleteServiceReq) Validate() error {
	return m.ValidateE("")
}

func (m *DeleteServiceReq) ValidateE(prefix string) error {
	errs := make([]error, 0)
	if int64(m.Id) == 0 {
		errs = append(errs, fmt.Errorf("field '%sid' is required", prefix))
	}
	return is.MargeErr(errs...)
}

func (m *DeleteServiceRsp) Validate() error {
	return m.ValidateE("")
}

func (m *DeleteServiceRsp) ValidateE(prefix string) error {
	errs := make([]error, 0)
	return is.MargeErr(errs...)
}
