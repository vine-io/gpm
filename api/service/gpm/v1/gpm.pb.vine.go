// Code generated by proto-gen-vine. DO NOT EDIT.
// source: github.com/vine-io/gpm/api/service/gpm/v1/gpm.proto

package gpmv1

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/vine-io/gpm/api/types/gpm/v1"
	vine "github.com/vine-io/vine"
	client "github.com/vine-io/vine/core/client"
	server "github.com/vine-io/vine/core/server"
	api "github.com/vine-io/vine/lib/api"
	openapi "github.com/vine-io/vine/lib/api/handler/openapi"
	openapipb "github.com/vine-io/vine/lib/api/handler/openapi/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// API Endpoints for GpmService service
func NewGpmServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		&api.Endpoint{
			Name:        "GpmService.Info",
			Description: "GpmService.Info",
			Path:        []string{"/api/v1/info"},
			Method:      []string{"GET"},
			Body:        "*",
			Handler:     "rpc",
		},
		&api.Endpoint{
			Name:        "GpmService.ListService",
			Description: "GpmService.ListService",
			Path:        []string{"/api/v1/Service"},
			Method:      []string{"GET"},
			Body:        "*",
			Handler:     "rpc",
		},
		&api.Endpoint{
			Name:        "GpmService.GetService",
			Description: "GpmService.GetService",
			Path:        []string{"/api/v1/Service/{name}"},
			Method:      []string{"GET"},
			Body:        "*",
			Handler:     "rpc",
		},
		&api.Endpoint{
			Name:        "GpmService.CreateService",
			Description: "GpmService.CreateService",
			Path:        []string{"/api/v1/Service"},
			Method:      []string{"POST"},
			Body:        "*",
			Handler:     "rpc",
		},
		&api.Endpoint{
			Name:        "GpmService.EditService",
			Description: "GpmService.EditService",
			Path:        []string{"/api/v1/Service/{name}"},
			Method:      []string{"PATCH"},
			Body:        "*",
			Handler:     "rpc",
		},
		&api.Endpoint{
			Name:        "GpmService.StartService",
			Description: "GpmService.StartService",
			Path:        []string{"/api/v1/Service/{name}/action/start"},
			Method:      []string{"PATCH"},
			Body:        "*",
			Handler:     "rpc",
		},
		&api.Endpoint{
			Name:        "GpmService.StopService",
			Description: "GpmService.StopService",
			Path:        []string{"/api/v1/Service/{name}/action/stop"},
			Method:      []string{"PATCH"},
			Body:        "*",
			Handler:     "rpc",
		},
		&api.Endpoint{
			Name:        "GpmService.RestartService",
			Description: "GpmService.RestartService",
			Path:        []string{"/api/v1/Service/{name}/action/restart"},
			Method:      []string{"PATCH"},
			Body:        "*",
			Handler:     "rpc",
		},
		&api.Endpoint{
			Name:        "GpmService.DeleteService",
			Description: "GpmService.DeleteService",
			Path:        []string{"/api/v1/Service/{name}"},
			Method:      []string{"DELETE"},
			Body:        "*",
			Handler:     "rpc",
		},
		&api.Endpoint{
			Name:        "GpmService.ListServiceVersions",
			Description: "GpmService.ListServiceVersions",
			Path:        []string{"/api/v1/Service/{name}/versions"},
			Method:      []string{"GET"},
			Body:        "*",
			Handler:     "rpc",
		},
		&api.Endpoint{
			Name:        "GpmService.RollBackService",
			Description: "GpmService.RollBackService",
			Path:        []string{"/api/v1/Service/{name}/rollback"},
			Method:      []string{"POST"},
			Body:        "*",
			Handler:     "rpc",
		},
		&api.Endpoint{
			Name:        "GpmService.ForgetService",
			Description: "GpmService.ForgetService",
			Path:        []string{"/api/v1/Service/{name}/forget"},
			Method:      []string{"DELETE"},
			Body:        "*",
			Handler:     "rpc",
		},
		&api.Endpoint{
			Name:        "GpmService.Ls",
			Description: "GpmService.Ls",
			Path:        []string{"/api/v1/Action/ls"},
			Method:      []string{"GET"},
			Body:        "*",
			Handler:     "rpc",
		},
		&api.Endpoint{
			Name:        "GpmService.Exec",
			Description: "GpmService.Exec",
			Path:        []string{"/api/v1/Action/exec"},
			Method:      []string{"POST"},
			Body:        "*",
			Handler:     "rpc",
		},
	}
}

// Swagger OpenAPI 3.0 for GpmService service
func NewGpmServiceOpenAPI() *openapipb.OpenAPI {
	return &openapipb.OpenAPI{
		Openapi: "3.0.1",
		Info: &openapipb.OpenAPIInfo{
			Title:       "GpmServiceService",
			Description: "OpenAPI3.0 for GpmService",
			Version:     "v1.0.0",
		},
		Servers: []*openapipb.OpenAPIServer{},
		Tags: []*openapipb.OpenAPITag{
			&openapipb.OpenAPITag{
				Name:        "GpmService",
				Description: "OpenAPI3.0 for GpmService",
			},
		},
		Paths: map[string]*openapipb.OpenAPIPath{
			"/api/v1/Action/exec": &openapipb.OpenAPIPath{
				Post: &openapipb.OpenAPIPathDocs{
					Tags:        []string{"GpmService"},
					Summary:     "远程执行命令",
					Description: "GpmService Exec",
					OperationId: "GpmServiceExec",
					RequestBody: &openapipb.PathRequestBody{
						Description: "Exec ExecReq",
						Content: &openapipb.PathRequestBodyContent{
							ApplicationJson: &openapipb.ApplicationContent{
								Schema: &openapipb.Schema{
									Ref: "#/components/schemas/github.com.vine-io.gpm.api.service.gpm.v1.ExecReq",
								},
							},
						},
					},
					Responses: map[string]*openapipb.PathResponse{
						"200": &openapipb.PathResponse{
							Description: "successful response (stream response)",
							Content: &openapipb.PathRequestBodyContent{
								ApplicationJson: &openapipb.ApplicationContent{
									Schema: &openapipb.Schema{Ref: "#/components/schemas/github.com.vine-io.gpm.api.service.gpm.v1.ExecRsp"},
								},
							},
						},
					},
					Security: []*openapipb.PathSecurity{},
				},
			},
			"/api/v1/Action/ls": &openapipb.OpenAPIPath{
				Get: &openapipb.OpenAPIPathDocs{
					Tags:        []string{"GpmService"},
					Summary:     "获取目录信息下文件列表",
					Description: "GpmService Ls",
					OperationId: "GpmServiceLs",
					Parameters: []*openapipb.PathParameters{
						&openapipb.PathParameters{
							Name:        "path",
							In:          "query",
							Description: "LsReq field path",
							Required:    true,
							Style:       "form",
							Explode:     true,
							Schema: &openapipb.Schema{
								Type: "string",
							},
						},
					},
					Responses: map[string]*openapipb.PathResponse{
						"200": &openapipb.PathResponse{
							Description: "successful response (stream response)",
							Content: &openapipb.PathRequestBodyContent{
								ApplicationJson: &openapipb.ApplicationContent{
									Schema: &openapipb.Schema{Ref: "#/components/schemas/github.com.vine-io.gpm.api.service.gpm.v1.LsRsp"},
								},
							},
						},
					},
					Security: []*openapipb.PathSecurity{},
				},
			},
			"/api/v1/Service": &openapipb.OpenAPIPath{
				Get: &openapipb.OpenAPIPathDocs{
					Tags:        []string{"GpmService"},
					Summary:     "查询所有服务",
					Description: "GpmService ListService",
					OperationId: "GpmServiceListService",
					Parameters:  []*openapipb.PathParameters{},
					Responses: map[string]*openapipb.PathResponse{
						"200": &openapipb.PathResponse{
							Description: "successful response (stream response)",
							Content: &openapipb.PathRequestBodyContent{
								ApplicationJson: &openapipb.ApplicationContent{
									Schema: &openapipb.Schema{Ref: "#/components/schemas/github.com.vine-io.gpm.api.service.gpm.v1.ListServiceRsp"},
								},
							},
						},
					},
					Security: []*openapipb.PathSecurity{},
				},
				Post: &openapipb.OpenAPIPathDocs{
					Tags:        []string{"GpmService"},
					Summary:     "新建服务",
					Description: "GpmService CreateService",
					OperationId: "GpmServiceCreateService",
					RequestBody: &openapipb.PathRequestBody{
						Description: "CreateService CreateServiceReq",
						Content: &openapipb.PathRequestBodyContent{
							ApplicationJson: &openapipb.ApplicationContent{
								Schema: &openapipb.Schema{
									Ref: "#/components/schemas/github.com.vine-io.gpm.api.service.gpm.v1.CreateServiceReq",
								},
							},
						},
					},
					Responses: map[string]*openapipb.PathResponse{
						"200": &openapipb.PathResponse{
							Description: "successful response (stream response)",
							Content: &openapipb.PathRequestBodyContent{
								ApplicationJson: &openapipb.ApplicationContent{
									Schema: &openapipb.Schema{Ref: "#/components/schemas/github.com.vine-io.gpm.api.service.gpm.v1.CreateServiceRsp"},
								},
							},
						},
					},
					Security: []*openapipb.PathSecurity{},
				},
			},
			"/api/v1/Service/{name}": &openapipb.OpenAPIPath{
				Delete: &openapipb.OpenAPIPathDocs{
					Tags:        []string{"GpmService"},
					Summary:     "删除服务",
					Description: "GpmService DeleteService",
					OperationId: "GpmServiceDeleteService",
					Parameters: []*openapipb.PathParameters{
						&openapipb.PathParameters{
							Name:        "name",
							In:          "path",
							Description: "DeleteServiceReq field name",
							Required:    true,
							Explode:     true,
							Schema: &openapipb.Schema{
								Type: "string",
							},
						},
					},
					Responses: map[string]*openapipb.PathResponse{
						"200": &openapipb.PathResponse{
							Description: "successful response (stream response)",
							Content: &openapipb.PathRequestBodyContent{
								ApplicationJson: &openapipb.ApplicationContent{
									Schema: &openapipb.Schema{Ref: "#/components/schemas/github.com.vine-io.gpm.api.service.gpm.v1.DeleteServiceRsp"},
								},
							},
						},
					},
					Security: []*openapipb.PathSecurity{},
				},
				Get: &openapipb.OpenAPIPathDocs{
					Tags:        []string{"GpmService"},
					Summary:     "查询单个服务",
					Description: "GpmService GetService",
					OperationId: "GpmServiceGetService",
					Parameters: []*openapipb.PathParameters{
						&openapipb.PathParameters{
							Name:        "name",
							In:          "path",
							Description: "服务名称",
							Required:    true,
							Explode:     true,
							Schema: &openapipb.Schema{
								Type: "string",
							},
						},
					},
					Responses: map[string]*openapipb.PathResponse{
						"200": &openapipb.PathResponse{
							Description: "successful response (stream response)",
							Content: &openapipb.PathRequestBodyContent{
								ApplicationJson: &openapipb.ApplicationContent{
									Schema: &openapipb.Schema{Ref: "#/components/schemas/github.com.vine-io.gpm.api.service.gpm.v1.GetServiceRsp"},
								},
							},
						},
					},
					Security: []*openapipb.PathSecurity{},
				},
				Patch: &openapipb.OpenAPIPathDocs{
					Tags:        []string{"GpmService"},
					Summary:     "修改服务信息",
					Description: "GpmService EditService",
					OperationId: "GpmServiceEditService",
					Parameters: []*openapipb.PathParameters{
						&openapipb.PathParameters{
							Name:        "name",
							In:          "path",
							Description: "EditServiceReq field name",
							Required:    true,
							Explode:     true,
							Schema: &openapipb.Schema{
								Type: "string",
							},
						},
					},
					RequestBody: &openapipb.PathRequestBody{
						Description: "EditService EditServiceReq",
						Content: &openapipb.PathRequestBodyContent{
							ApplicationJson: &openapipb.ApplicationContent{
								Schema: &openapipb.Schema{
									Ref: "#/components/schemas/github.com.vine-io.gpm.api.service.gpm.v1.EditServiceReq",
								},
							},
						},
					},
					Responses: map[string]*openapipb.PathResponse{
						"200": &openapipb.PathResponse{
							Description: "successful response (stream response)",
							Content: &openapipb.PathRequestBodyContent{
								ApplicationJson: &openapipb.ApplicationContent{
									Schema: &openapipb.Schema{Ref: "#/components/schemas/github.com.vine-io.gpm.api.service.gpm.v1.EditServiceRsp"},
								},
							},
						},
					},
					Security: []*openapipb.PathSecurity{},
				},
			},
			"/api/v1/Service/{name}/action/restart": &openapipb.OpenAPIPath{
				Patch: &openapipb.OpenAPIPathDocs{
					Tags:        []string{"GpmService"},
					Summary:     "重启服务",
					Description: "GpmService RestartService",
					OperationId: "GpmServiceRestartService",
					Parameters: []*openapipb.PathParameters{
						&openapipb.PathParameters{
							Name:        "name",
							In:          "path",
							Description: "RestartServiceReq field name",
							Required:    true,
							Explode:     true,
							Schema: &openapipb.Schema{
								Type: "string",
							},
						},
					},
					RequestBody: &openapipb.PathRequestBody{
						Description: "RestartService RestartServiceReq",
						Content: &openapipb.PathRequestBodyContent{
							ApplicationJson: &openapipb.ApplicationContent{
								Schema: &openapipb.Schema{
									Ref: "#/components/schemas/github.com.vine-io.gpm.api.service.gpm.v1.RestartServiceReq",
								},
							},
						},
					},
					Responses: map[string]*openapipb.PathResponse{
						"200": &openapipb.PathResponse{
							Description: "successful response (stream response)",
							Content: &openapipb.PathRequestBodyContent{
								ApplicationJson: &openapipb.ApplicationContent{
									Schema: &openapipb.Schema{Ref: "#/components/schemas/github.com.vine-io.gpm.api.service.gpm.v1.RestartServiceRsp"},
								},
							},
						},
					},
					Security: []*openapipb.PathSecurity{},
				},
			},
			"/api/v1/Service/{name}/action/start": &openapipb.OpenAPIPath{
				Patch: &openapipb.OpenAPIPathDocs{
					Tags:        []string{"GpmService"},
					Summary:     "启动服务",
					Description: "GpmService StartService",
					OperationId: "GpmServiceStartService",
					Parameters: []*openapipb.PathParameters{
						&openapipb.PathParameters{
							Name:        "name",
							In:          "path",
							Description: "StartServiceReq field name",
							Required:    true,
							Explode:     true,
							Schema: &openapipb.Schema{
								Type: "string",
							},
						},
					},
					RequestBody: &openapipb.PathRequestBody{
						Description: "StartService StartServiceReq",
						Content: &openapipb.PathRequestBodyContent{
							ApplicationJson: &openapipb.ApplicationContent{
								Schema: &openapipb.Schema{
									Ref: "#/components/schemas/github.com.vine-io.gpm.api.service.gpm.v1.StartServiceReq",
								},
							},
						},
					},
					Responses: map[string]*openapipb.PathResponse{
						"200": &openapipb.PathResponse{
							Description: "successful response (stream response)",
							Content: &openapipb.PathRequestBodyContent{
								ApplicationJson: &openapipb.ApplicationContent{
									Schema: &openapipb.Schema{Ref: "#/components/schemas/github.com.vine-io.gpm.api.service.gpm.v1.StartServiceRsp"},
								},
							},
						},
					},
					Security: []*openapipb.PathSecurity{},
				},
			},
			"/api/v1/Service/{name}/action/stop": &openapipb.OpenAPIPath{
				Patch: &openapipb.OpenAPIPathDocs{
					Tags:        []string{"GpmService"},
					Summary:     "停止服务",
					Description: "GpmService StopService",
					OperationId: "GpmServiceStopService",
					Parameters: []*openapipb.PathParameters{
						&openapipb.PathParameters{
							Name:        "name",
							In:          "path",
							Description: "StopServiceReq field name",
							Required:    true,
							Explode:     true,
							Schema: &openapipb.Schema{
								Type: "string",
							},
						},
					},
					RequestBody: &openapipb.PathRequestBody{
						Description: "StopService StopServiceReq",
						Content: &openapipb.PathRequestBodyContent{
							ApplicationJson: &openapipb.ApplicationContent{
								Schema: &openapipb.Schema{
									Ref: "#/components/schemas/github.com.vine-io.gpm.api.service.gpm.v1.StopServiceReq",
								},
							},
						},
					},
					Responses: map[string]*openapipb.PathResponse{
						"200": &openapipb.PathResponse{
							Description: "successful response (stream response)",
							Content: &openapipb.PathRequestBodyContent{
								ApplicationJson: &openapipb.ApplicationContent{
									Schema: &openapipb.Schema{Ref: "#/components/schemas/github.com.vine-io.gpm.api.service.gpm.v1.StopServiceRsp"},
								},
							},
						},
					},
					Security: []*openapipb.PathSecurity{},
				},
			},
			"/api/v1/Service/{name}/forget": &openapipb.OpenAPIPath{
				Delete: &openapipb.OpenAPIPathDocs{
					Tags:        []string{"GpmService"},
					Summary:     "删除历史版本",
					Description: "GpmService ForgetService",
					OperationId: "GpmServiceForgetService",
					Parameters: []*openapipb.PathParameters{
						&openapipb.PathParameters{
							Name:        "name",
							In:          "path",
							Description: "ForgetServiceReq field name",
							Required:    true,
							Explode:     true,
							Schema: &openapipb.Schema{
								Type: "string",
							},
						},
					},
					Responses: map[string]*openapipb.PathResponse{
						"200": &openapipb.PathResponse{
							Description: "successful response (stream response)",
							Content: &openapipb.PathRequestBodyContent{
								ApplicationJson: &openapipb.ApplicationContent{
									Schema: &openapipb.Schema{Ref: "#/components/schemas/github.com.vine-io.gpm.api.service.gpm.v1.ForgetServiceRsp"},
								},
							},
						},
					},
					Security: []*openapipb.PathSecurity{},
				},
			},
			"/api/v1/Service/{name}/rollback": &openapipb.OpenAPIPath{
				Post: &openapipb.OpenAPIPathDocs{
					Tags:        []string{"GpmService"},
					Summary:     "回滚服务",
					Description: "GpmService RollBackService",
					OperationId: "GpmServiceRollBackService",
					Parameters: []*openapipb.PathParameters{
						&openapipb.PathParameters{
							Name:        "name",
							In:          "path",
							Description: "RollbackServiceReq field name",
							Required:    true,
							Explode:     true,
							Schema: &openapipb.Schema{
								Type: "string",
							},
						},
					},
					RequestBody: &openapipb.PathRequestBody{
						Description: "RollBackService RollbackServiceReq",
						Content: &openapipb.PathRequestBodyContent{
							ApplicationJson: &openapipb.ApplicationContent{
								Schema: &openapipb.Schema{
									Ref: "#/components/schemas/github.com.vine-io.gpm.api.service.gpm.v1.RollbackServiceReq",
								},
							},
						},
					},
					Responses: map[string]*openapipb.PathResponse{
						"200": &openapipb.PathResponse{
							Description: "successful response (stream response)",
							Content: &openapipb.PathRequestBodyContent{
								ApplicationJson: &openapipb.ApplicationContent{
									Schema: &openapipb.Schema{Ref: "#/components/schemas/github.com.vine-io.gpm.api.service.gpm.v1.RollbackServiceRsp"},
								},
							},
						},
					},
					Security: []*openapipb.PathSecurity{},
				},
			},
			"/api/v1/Service/{name}/versions": &openapipb.OpenAPIPath{
				Get: &openapipb.OpenAPIPathDocs{
					Tags:        []string{"GpmService"},
					Summary:     "查看服务历史版本",
					Description: "GpmService ListServiceVersions",
					OperationId: "GpmServiceListServiceVersions",
					Parameters: []*openapipb.PathParameters{
						&openapipb.PathParameters{
							Name:        "name",
							In:          "path",
							Description: "ListServiceVersionsReq field name",
							Required:    true,
							Explode:     true,
							Schema: &openapipb.Schema{
								Type: "string",
							},
						},
					},
					Responses: map[string]*openapipb.PathResponse{
						"200": &openapipb.PathResponse{
							Description: "successful response (stream response)",
							Content: &openapipb.PathRequestBodyContent{
								ApplicationJson: &openapipb.ApplicationContent{
									Schema: &openapipb.Schema{Ref: "#/components/schemas/github.com.vine-io.gpm.api.service.gpm.v1.ListServiceVersionsRsp"},
								},
							},
						},
					},
					Security: []*openapipb.PathSecurity{},
				},
			},
			"/api/v1/info": &openapipb.OpenAPIPath{
				Get: &openapipb.OpenAPIPathDocs{
					Tags:        []string{"GpmService"},
					Summary:     "gpm 信息",
					Description: "GpmService Info",
					OperationId: "GpmServiceInfo",
					Parameters:  []*openapipb.PathParameters{},
					Responses: map[string]*openapipb.PathResponse{
						"200": &openapipb.PathResponse{
							Description: "successful response (stream response)",
							Content: &openapipb.PathRequestBodyContent{
								ApplicationJson: &openapipb.ApplicationContent{
									Schema: &openapipb.Schema{Ref: "#/components/schemas/github.com.vine-io.gpm.api.service.gpm.v1.InfoRsp"},
								},
							},
						},
					},
					Security: []*openapipb.PathSecurity{},
				},
			},
		},
		Components: &openapipb.OpenAPIComponents{
			SecuritySchemes: &openapipb.SecuritySchemes{},
			Schemas: map[string]*openapipb.Model{
				"github.com.vine-io.gpm.api.service.gpm.v1.ExecReq": &openapipb.Model{
					Type: "object",
					Properties: map[string]*openapipb.Schema{
						"in": &openapipb.Schema{
							Type: "object",
							Ref:  "#/components/schemas/github.com.vine-io.gpm.api.types.gpm.v1.ExecIn",
						},
					},
					Required: []string{"in"},
				},
				"github.com.vine-io.gpm.api.service.gpm.v1.ExecRsp": &openapipb.Model{
					Type: "object",
					Properties: map[string]*openapipb.Schema{
						"result": &openapipb.Schema{
							Type: "object",
							Ref:  "#/components/schemas/github.com.vine-io.gpm.api.types.gpm.v1.ExecResult",
						},
					},
				},
				"github.com.vine-io.gpm.api.service.gpm.v1.LsReq": &openapipb.Model{
					Type: "object",
					Properties: map[string]*openapipb.Schema{
						"path": &openapipb.Schema{
							Type: "string",
						},
					},
					Required: []string{"path"},
				},
				"github.com.vine-io.gpm.api.service.gpm.v1.LsRsp": &openapipb.Model{
					Type: "object",
					Properties: map[string]*openapipb.Schema{
						"files": &openapipb.Schema{
							Type:  "array",
							Items: &openapipb.Schema{Ref: "#/components/schemas/github.com.vine-io.gpm.api.types.gpm.v1.FileInfo"},
						},
					},
				},
				"github.com.vine-io.gpm.api.service.gpm.v1.ListServiceReq": &openapipb.Model{
					Type:       "object",
					Properties: map[string]*openapipb.Schema{},
				},
				"github.com.vine-io.gpm.api.service.gpm.v1.ListServiceRsp": &openapipb.Model{
					Type: "object",
					Properties: map[string]*openapipb.Schema{
						"services": &openapipb.Schema{
							Type:  "array",
							Items: &openapipb.Schema{Ref: "#/components/schemas/github.com.vine-io.gpm.api.types.gpm.v1.Service"},
						},
						"total": &openapipb.Schema{
							Type:   "integer",
							Format: "int64",
						},
					},
				},
				"github.com.vine-io.gpm.api.service.gpm.v1.CreateServiceReq": &openapipb.Model{
					Type: "object",
					Properties: map[string]*openapipb.Schema{
						"spec": &openapipb.Schema{
							Type: "object",
							Ref:  "#/components/schemas/github.com.vine-io.gpm.api.types.gpm.v1.ServiceSpec",
						},
					},
					Required: []string{"spec"},
				},
				"github.com.vine-io.gpm.api.service.gpm.v1.CreateServiceRsp": &openapipb.Model{
					Type: "object",
					Properties: map[string]*openapipb.Schema{
						"service": &openapipb.Schema{
							Type: "object",
							Ref:  "#/components/schemas/github.com.vine-io.gpm.api.types.gpm.v1.Service",
						},
					},
				},
				"github.com.vine-io.gpm.api.service.gpm.v1.DeleteServiceReq": &openapipb.Model{
					Type: "object",
					Properties: map[string]*openapipb.Schema{
						"name": &openapipb.Schema{
							Type: "string",
						},
					},
					Required: []string{"name"},
				},
				"github.com.vine-io.gpm.api.service.gpm.v1.DeleteServiceRsp": &openapipb.Model{
					Type: "object",
					Properties: map[string]*openapipb.Schema{
						"service": &openapipb.Schema{
							Type: "object",
							Ref:  "#/components/schemas/github.com.vine-io.gpm.api.types.gpm.v1.Service",
						},
					},
				},
				"github.com.vine-io.gpm.api.service.gpm.v1.GetServiceReq": &openapipb.Model{
					Type: "object",
					Properties: map[string]*openapipb.Schema{
						"name": &openapipb.Schema{
							Type: "string",
						},
					},
					Required: []string{"name"},
				},
				"github.com.vine-io.gpm.api.service.gpm.v1.GetServiceRsp": &openapipb.Model{
					Type: "object",
					Properties: map[string]*openapipb.Schema{
						"service": &openapipb.Schema{
							Type: "object",
							Ref:  "#/components/schemas/github.com.vine-io.gpm.api.types.gpm.v1.Service",
						},
					},
				},
				"github.com.vine-io.gpm.api.service.gpm.v1.EditServiceReq": &openapipb.Model{
					Type: "object",
					Properties: map[string]*openapipb.Schema{
						"name": &openapipb.Schema{
							Type: "string",
						},
						"spec": &openapipb.Schema{
							Type: "object",
							Ref:  "#/components/schemas/github.com.vine-io.gpm.api.types.gpm.v1.EditServiceSpec",
						},
					},
					Required: []string{"spec"},
				},
				"github.com.vine-io.gpm.api.service.gpm.v1.EditServiceRsp": &openapipb.Model{
					Type: "object",
					Properties: map[string]*openapipb.Schema{
						"service": &openapipb.Schema{
							Type: "object",
							Ref:  "#/components/schemas/github.com.vine-io.gpm.api.types.gpm.v1.Service",
						},
					},
				},
				"github.com.vine-io.gpm.api.service.gpm.v1.RestartServiceReq": &openapipb.Model{
					Type: "object",
					Properties: map[string]*openapipb.Schema{
						"name": &openapipb.Schema{
							Type: "string",
						},
					},
					Required: []string{"name"},
				},
				"github.com.vine-io.gpm.api.service.gpm.v1.RestartServiceRsp": &openapipb.Model{
					Type: "object",
					Properties: map[string]*openapipb.Schema{
						"service": &openapipb.Schema{
							Type: "object",
							Ref:  "#/components/schemas/github.com.vine-io.gpm.api.types.gpm.v1.Service",
						},
					},
				},
				"github.com.vine-io.gpm.api.service.gpm.v1.StartServiceReq": &openapipb.Model{
					Type: "object",
					Properties: map[string]*openapipb.Schema{
						"name": &openapipb.Schema{
							Type: "string",
						},
					},
					Required: []string{"name"},
				},
				"github.com.vine-io.gpm.api.service.gpm.v1.StartServiceRsp": &openapipb.Model{
					Type: "object",
					Properties: map[string]*openapipb.Schema{
						"service": &openapipb.Schema{
							Type: "object",
							Ref:  "#/components/schemas/github.com.vine-io.gpm.api.types.gpm.v1.Service",
						},
					},
				},
				"github.com.vine-io.gpm.api.service.gpm.v1.StopServiceReq": &openapipb.Model{
					Type: "object",
					Properties: map[string]*openapipb.Schema{
						"name": &openapipb.Schema{
							Type: "string",
						},
					},
					Required: []string{"name"},
				},
				"github.com.vine-io.gpm.api.service.gpm.v1.StopServiceRsp": &openapipb.Model{
					Type: "object",
					Properties: map[string]*openapipb.Schema{
						"service": &openapipb.Schema{
							Type: "object",
							Ref:  "#/components/schemas/github.com.vine-io.gpm.api.types.gpm.v1.Service",
						},
					},
				},
				"github.com.vine-io.gpm.api.service.gpm.v1.ForgetServiceReq": &openapipb.Model{
					Type: "object",
					Properties: map[string]*openapipb.Schema{
						"name": &openapipb.Schema{
							Type: "string",
						},
						"revision": &openapipb.Schema{
							Type: "string",
						},
					},
					Required: []string{"name"},
				},
				"github.com.vine-io.gpm.api.service.gpm.v1.ForgetServiceRsp": &openapipb.Model{
					Type:       "object",
					Properties: map[string]*openapipb.Schema{},
				},
				"github.com.vine-io.gpm.api.service.gpm.v1.RollbackServiceReq": &openapipb.Model{
					Type: "object",
					Properties: map[string]*openapipb.Schema{
						"name": &openapipb.Schema{
							Type: "string",
						},
						"revision": &openapipb.Schema{
							Type: "string",
						},
					},
					Required: []string{"name"},
				},
				"github.com.vine-io.gpm.api.service.gpm.v1.RollbackServiceRsp": &openapipb.Model{
					Type:       "object",
					Properties: map[string]*openapipb.Schema{},
				},
				"github.com.vine-io.gpm.api.service.gpm.v1.ListServiceVersionsReq": &openapipb.Model{
					Type: "object",
					Properties: map[string]*openapipb.Schema{
						"name": &openapipb.Schema{
							Type: "string",
						},
					},
					Required: []string{"name"},
				},
				"github.com.vine-io.gpm.api.service.gpm.v1.ListServiceVersionsRsp": &openapipb.Model{
					Type: "object",
					Properties: map[string]*openapipb.Schema{
						"versions": &openapipb.Schema{
							Type:  "array",
							Items: &openapipb.Schema{Ref: "#/components/schemas/github.com.vine-io.gpm.api.types.gpm.v1.ServiceVersion"},
						},
					},
				},
				"github.com.vine-io.gpm.api.service.gpm.v1.InfoReq": &openapipb.Model{
					Type:       "object",
					Properties: map[string]*openapipb.Schema{},
				},
				"github.com.vine-io.gpm.api.service.gpm.v1.InfoRsp": &openapipb.Model{
					Type: "object",
					Properties: map[string]*openapipb.Schema{
						"gpm": &openapipb.Schema{
							Type: "object",
							Ref:  "#/components/schemas/github.com.vine-io.gpm.api.types.gpm.v1.GpmInfo",
						},
					},
				},
				"github.com.vine-io.gpm.api.types.gpm.v1.ExecIn": &openapipb.Model{
					Type: "object",
					Properties: map[string]*openapipb.Schema{
						"shell": &openapipb.Schema{
							Type: "string",
						},
						"dir": &openapipb.Schema{
							Type: "string",
						},
						"env": &openapipb.Schema{
							AdditionalProperties: &openapipb.Schema{},
						},
						"user": &openapipb.Schema{
							Type: "string",
						},
						"group": &openapipb.Schema{
							Type: "string",
						},
					},
					Required: []string{"shell"},
				},
				"github.com.vine-io.gpm.api.types.gpm.v1.ExecResult": &openapipb.Model{
					Type: "object",
					Properties: map[string]*openapipb.Schema{
						"result": &openapipb.Schema{},
					},
				},
				"github.com.vine-io.gpm.api.types.gpm.v1.FileInfo": &openapipb.Model{
					Type: "object",
					Properties: map[string]*openapipb.Schema{
						"name": &openapipb.Schema{
							Type: "string",
						},
						"size": &openapipb.Schema{
							Type:   "integer",
							Format: "int64",
						},
						"mode": &openapipb.Schema{
							Type: "string",
						},
						"modTime": &openapipb.Schema{
							Type:   "integer",
							Format: "int64",
						},
						"IsDir": &openapipb.Schema{
							Type: "boolean",
						},
					},
				},
				"github.com.vine-io.gpm.api.types.gpm.v1.Service": &openapipb.Model{
					Type: "object",
					Properties: map[string]*openapipb.Schema{
						"name": &openapipb.Schema{
							Type: "string",
						},
						"bin": &openapipb.Schema{
							Type: "string",
						},
						"args": &openapipb.Schema{
							Type:  "array",
							Items: &openapipb.Schema{Type: "string"},
						},
						"pid": &openapipb.Schema{
							Type:   "integer",
							Format: "int64",
						},
						"dir": &openapipb.Schema{
							Type: "string",
						},
						"env": &openapipb.Schema{
							AdditionalProperties: &openapipb.Schema{},
						},
						"sysProcAttr": &openapipb.Schema{
							Type: "object",
							Ref:  "#/components/schemas/github.com.vine-io.gpm.api.types.gpm.v1.SysProcAttr",
						},
						"log": &openapipb.Schema{
							Type: "object",
							Ref:  "#/components/schemas/github.com.vine-io.gpm.api.types.gpm.v1.ProcLog",
						},
						"version": &openapipb.Schema{
							Type: "string",
						},
						"autoRestart": &openapipb.Schema{
							Type:   "integer",
							Format: "int32",
						},
						"installFlag": &openapipb.Schema{
							Type:   "integer",
							Format: "int32",
						},
						"creationTimestamp": &openapipb.Schema{
							Type:   "integer",
							Format: "int64",
						},
						"updateTimestamp": &openapipb.Schema{
							Type:   "integer",
							Format: "int64",
						},
						"startTimestamp": &openapipb.Schema{
							Type:   "integer",
							Format: "int64",
						},
						"status": &openapipb.Schema{
							Type: "string",
							Enum: []string{"init", "running", "stopped", "failed", "upgrading"},
						},
						"msg": &openapipb.Schema{
							Type: "string",
						},
						"stat": &openapipb.Schema{
							Type: "object",
							Ref:  "#/components/schemas/github.com.vine-io.gpm.api.types.gpm.v1.Stat",
						},
					},
					Required: []string{"name", "bin"},
				},
				"github.com.vine-io.gpm.api.types.gpm.v1.ServiceSpec": &openapipb.Model{
					Type: "object",
					Properties: map[string]*openapipb.Schema{
						"name": &openapipb.Schema{
							Type: "string",
						},
						"bin": &openapipb.Schema{
							Type: "string",
						},
						"args": &openapipb.Schema{
							Type:  "array",
							Items: &openapipb.Schema{Type: "string"},
						},
						"dir": &openapipb.Schema{
							Type: "string",
						},
						"env": &openapipb.Schema{
							AdditionalProperties: &openapipb.Schema{},
						},
						"sysProcAttr": &openapipb.Schema{
							Type: "object",
							Ref:  "#/components/schemas/github.com.vine-io.gpm.api.types.gpm.v1.SysProcAttr",
						},
						"log": &openapipb.Schema{
							Type: "object",
							Ref:  "#/components/schemas/github.com.vine-io.gpm.api.types.gpm.v1.ProcLog",
						},
						"version": &openapipb.Schema{
							Type: "string",
						},
						"autoRestart": &openapipb.Schema{
							Type:   "integer",
							Format: "int32",
						},
						"headerTrimPrefix": &openapipb.Schema{
							Type: "string",
						},
						"installFlag": &openapipb.Schema{
							Type:   "integer",
							Format: "int32",
						},
					},
					Required: []string{"name", "bin", "version"},
				},
				"github.com.vine-io.gpm.api.types.gpm.v1.EditServiceSpec": &openapipb.Model{
					Type: "object",
					Properties: map[string]*openapipb.Schema{
						"bin": &openapipb.Schema{
							Type: "string",
						},
						"args": &openapipb.Schema{
							Type:  "array",
							Items: &openapipb.Schema{Type: "string"},
						},
						"dir": &openapipb.Schema{
							Type: "string",
						},
						"env": &openapipb.Schema{
							AdditionalProperties: &openapipb.Schema{},
						},
						"sysProcAttr": &openapipb.Schema{
							Type: "object",
							Ref:  "#/components/schemas/github.com.vine-io.gpm.api.types.gpm.v1.SysProcAttr",
						},
						"log": &openapipb.Schema{
							Type: "object",
							Ref:  "#/components/schemas/github.com.vine-io.gpm.api.types.gpm.v1.ProcLog",
						},
						"autoRestart": &openapipb.Schema{
							Type:   "integer",
							Format: "int32",
						},
					},
				},
				"github.com.vine-io.gpm.api.types.gpm.v1.ServiceVersion": &openapipb.Model{
					Type: "object",
					Properties: map[string]*openapipb.Schema{
						"name": &openapipb.Schema{
							Type: "string",
						},
						"version": &openapipb.Schema{
							Type: "string",
						},
						"timestamp": &openapipb.Schema{
							Type:   "integer",
							Format: "int64",
						},
					},
				},
				"github.com.vine-io.gpm.api.types.gpm.v1.GpmInfo": &openapipb.Model{
					Type: "object",
					Properties: map[string]*openapipb.Schema{
						"version": &openapipb.Schema{
							Type: "string",
						},
						"goos": &openapipb.Schema{
							Type: "string",
						},
						"arch": &openapipb.Schema{
							Type: "string",
						},
						"gov": &openapipb.Schema{
							Type: "string",
						},
						"pid": &openapipb.Schema{
							Type:   "integer",
							Format: "int32",
						},
						"stat": &openapipb.Schema{
							Type: "object",
							Ref:  "#/components/schemas/github.com.vine-io.gpm.api.types.gpm.v1.Stat",
						},
						"upTime": &openapipb.Schema{
							Type:   "integer",
							Format: "int64",
						},
					},
				},
				"github.com.vine-io.gpm.api.types.gpm.v1.SysProcAttr": &openapipb.Model{
					Type: "object",
					Properties: map[string]*openapipb.Schema{
						"chroot": &openapipb.Schema{
							Type: "string",
						},
						"uid": &openapipb.Schema{
							Type:   "integer",
							Format: "int32",
						},
						"user": &openapipb.Schema{
							Type: "string",
						},
						"gid": &openapipb.Schema{
							Type:   "integer",
							Format: "int32",
						},
						"group": &openapipb.Schema{
							Type: "string",
						},
					},
				},
				"github.com.vine-io.gpm.api.types.gpm.v1.ProcLog": &openapipb.Model{
					Type: "object",
					Properties: map[string]*openapipb.Schema{
						"expire": &openapipb.Schema{
							Type:    "integer",
							Format:  "int32",
							Default: "30",
						},
						"maxSize": &openapipb.Schema{
							Type:   "integer",
							Format: "int64",
						},
					},
				},
				"github.com.vine-io.gpm.api.types.gpm.v1.Stat": &openapipb.Model{
					Type: "object",
					Properties: map[string]*openapipb.Schema{
						"cpuPercent": &openapipb.Schema{
							Type:   "number",
							Format: "double",
						},
						"memory": &openapipb.Schema{},
						"memPercent": &openapipb.Schema{
							Type:   "number",
							Format: "float",
						},
					},
				},
			},
		},
	}
}

// Client API for GpmService service
// +gen:openapi
type GpmService interface {
	// gpm 检测 gpm 服务状态
	Healthz(ctx context.Context, in *Empty, opts ...client.CallOption) (*Empty, error)
	// gpm 升级
	UpdateSelf(ctx context.Context, opts ...client.CallOption) (GpmService_UpdateSelfService, error)
	// +gen:summary=gpm 信息
	// +gen:get=/api/v1/info
	Info(ctx context.Context, in *InfoReq, opts ...client.CallOption) (*InfoRsp, error)
	// +gen:summary=查询所有服务
	// +gen:get=/api/v1/Service
	ListService(ctx context.Context, in *ListServiceReq, opts ...client.CallOption) (*ListServiceRsp, error)
	// +gen:summary=查询单个服务
	// +gen:get=/api/v1/Service/{name}
	GetService(ctx context.Context, in *GetServiceReq, opts ...client.CallOption) (*GetServiceRsp, error)
	// +gen:summary=新建服务
	// +gen:post=/api/v1/Service
	CreateService(ctx context.Context, in *CreateServiceReq, opts ...client.CallOption) (*CreateServiceRsp, error)
	// +gen:summary=修改服务信息
	// +gen:patch=/api/v1/Service/{name}
	EditService(ctx context.Context, in *EditServiceReq, opts ...client.CallOption) (*EditServiceRsp, error)
	// +gen:summary=启动服务
	// +gen:patch=/api/v1/Service/{name}/action/start
	StartService(ctx context.Context, in *StartServiceReq, opts ...client.CallOption) (*StartServiceRsp, error)
	// +gen:summary=停止服务
	// +gen:patch=/api/v1/Service/{name}/action/stop
	StopService(ctx context.Context, in *StopServiceReq, opts ...client.CallOption) (*StopServiceRsp, error)
	// +gen:summary=重启服务
	// +gen:patch=/api/v1/Service/{name}/action/restart
	RestartService(ctx context.Context, in *RestartServiceReq, opts ...client.CallOption) (*RestartServiceRsp, error)
	// +gen:summary=删除服务
	// +gen:delete=/api/v1/Service/{name}
	DeleteService(ctx context.Context, in *DeleteServiceReq, opts ...client.CallOption) (*DeleteServiceRsp, error)
	// 动态监听服务日志
	WatchServiceLog(ctx context.Context, in *WatchServiceLogReq, opts ...client.CallOption) (GpmService_WatchServiceLogService, error)
	// 远程安装服务
	InstallService(ctx context.Context, opts ...client.CallOption) (GpmService_InstallServiceService, error)
	// +gen:summary=查看服务历史版本
	// +gen:get=/api/v1/Service/{name}/versions
	ListServiceVersions(ctx context.Context, in *ListServiceVersionsReq, opts ...client.CallOption) (*ListServiceVersionsRsp, error)
	// 升级服务
	UpgradeService(ctx context.Context, opts ...client.CallOption) (GpmService_UpgradeServiceService, error)
	// +gen:summary=回滚服务
	// +gen:post=/api/v1/Service/{name}/rollback
	RollBackService(ctx context.Context, in *RollbackServiceReq, opts ...client.CallOption) (*RollbackServiceRsp, error)
	// +gen:summary=删除历史版本
	// +gen:delete=/api/v1/Service/{name}/forget
	ForgetService(ctx context.Context, in *ForgetServiceReq, opts ...client.CallOption) (*ForgetServiceRsp, error)
	// +gen:summary=获取目录信息下文件列表
	// +gen:get=/api/v1/Action/ls
	Ls(ctx context.Context, in *LsReq, opts ...client.CallOption) (*LsRsp, error)
	// 拉取文件
	Pull(ctx context.Context, in *PullReq, opts ...client.CallOption) (GpmService_PullService, error)
	// 推送文件
	Push(ctx context.Context, opts ...client.CallOption) (GpmService_PushService, error)
	// +gen:summary=远程执行命令
	// +gen:post=/api/v1/Action/exec
	Exec(ctx context.Context, in *ExecReq, opts ...client.CallOption) (*ExecRsp, error)
	// 远程命令行交互
	Terminal(ctx context.Context, opts ...client.CallOption) (GpmService_TerminalService, error)
}

type gpmService struct {
	c    client.Client
	name string
}

func NewGpmService(name string, c client.Client) GpmService {
	return &gpmService{
		c:    c,
		name: name,
	}
}

func (c *gpmService) Healthz(ctx context.Context, in *Empty, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "GpmService.Healthz", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpmService) UpdateSelf(ctx context.Context, opts ...client.CallOption) (GpmService_UpdateSelfService, error) {
	req := c.c.NewRequest(c.name, "GpmService.UpdateSelf", &UpdateSelfReq{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &gpmServiceUpdateSelf{stream}, nil
}

type GpmService_UpdateSelfService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*UpdateSelfReq) error
	Recv() (*UpdateSelfRsp, error)
}

type gpmServiceUpdateSelf struct {
	stream client.Stream
}

func (x *gpmServiceUpdateSelf) Close() error {
	return x.stream.Close()
}

func (x *gpmServiceUpdateSelf) Context() context.Context {
	return x.stream.Context()
}

func (x *gpmServiceUpdateSelf) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *gpmServiceUpdateSelf) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *gpmServiceUpdateSelf) Send(m *UpdateSelfReq) error {
	return x.stream.Send(m)
}

func (x *gpmServiceUpdateSelf) Recv() (*UpdateSelfRsp, error) {
	m := new(UpdateSelfRsp)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gpmService) Info(ctx context.Context, in *InfoReq, opts ...client.CallOption) (*InfoRsp, error) {
	req := c.c.NewRequest(c.name, "GpmService.Info", in)
	out := new(InfoRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpmService) ListService(ctx context.Context, in *ListServiceReq, opts ...client.CallOption) (*ListServiceRsp, error) {
	req := c.c.NewRequest(c.name, "GpmService.ListService", in)
	out := new(ListServiceRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpmService) GetService(ctx context.Context, in *GetServiceReq, opts ...client.CallOption) (*GetServiceRsp, error) {
	req := c.c.NewRequest(c.name, "GpmService.GetService", in)
	out := new(GetServiceRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpmService) CreateService(ctx context.Context, in *CreateServiceReq, opts ...client.CallOption) (*CreateServiceRsp, error) {
	req := c.c.NewRequest(c.name, "GpmService.CreateService", in)
	out := new(CreateServiceRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpmService) EditService(ctx context.Context, in *EditServiceReq, opts ...client.CallOption) (*EditServiceRsp, error) {
	req := c.c.NewRequest(c.name, "GpmService.EditService", in)
	out := new(EditServiceRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpmService) StartService(ctx context.Context, in *StartServiceReq, opts ...client.CallOption) (*StartServiceRsp, error) {
	req := c.c.NewRequest(c.name, "GpmService.StartService", in)
	out := new(StartServiceRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpmService) StopService(ctx context.Context, in *StopServiceReq, opts ...client.CallOption) (*StopServiceRsp, error) {
	req := c.c.NewRequest(c.name, "GpmService.StopService", in)
	out := new(StopServiceRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpmService) RestartService(ctx context.Context, in *RestartServiceReq, opts ...client.CallOption) (*RestartServiceRsp, error) {
	req := c.c.NewRequest(c.name, "GpmService.RestartService", in)
	out := new(RestartServiceRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpmService) DeleteService(ctx context.Context, in *DeleteServiceReq, opts ...client.CallOption) (*DeleteServiceRsp, error) {
	req := c.c.NewRequest(c.name, "GpmService.DeleteService", in)
	out := new(DeleteServiceRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpmService) WatchServiceLog(ctx context.Context, in *WatchServiceLogReq, opts ...client.CallOption) (GpmService_WatchServiceLogService, error) {
	req := c.c.NewRequest(c.name, "GpmService.WatchServiceLog", &WatchServiceLogReq{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &gpmServiceWatchServiceLog{stream}, nil
}

type GpmService_WatchServiceLogService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*WatchServiceLogRsp, error)
}

type gpmServiceWatchServiceLog struct {
	stream client.Stream
}

func (x *gpmServiceWatchServiceLog) Close() error {
	return x.stream.Close()
}

func (x *gpmServiceWatchServiceLog) Context() context.Context {
	return x.stream.Context()
}

func (x *gpmServiceWatchServiceLog) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *gpmServiceWatchServiceLog) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *gpmServiceWatchServiceLog) Recv() (*WatchServiceLogRsp, error) {
	m := new(WatchServiceLogRsp)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gpmService) InstallService(ctx context.Context, opts ...client.CallOption) (GpmService_InstallServiceService, error) {
	req := c.c.NewRequest(c.name, "GpmService.InstallService", &InstallServiceReq{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &gpmServiceInstallService{stream}, nil
}

type GpmService_InstallServiceService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*InstallServiceReq) error
	Recv() (*InstallServiceRsp, error)
}

type gpmServiceInstallService struct {
	stream client.Stream
}

func (x *gpmServiceInstallService) Close() error {
	return x.stream.Close()
}

func (x *gpmServiceInstallService) Context() context.Context {
	return x.stream.Context()
}

func (x *gpmServiceInstallService) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *gpmServiceInstallService) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *gpmServiceInstallService) Send(m *InstallServiceReq) error {
	return x.stream.Send(m)
}

func (x *gpmServiceInstallService) Recv() (*InstallServiceRsp, error) {
	m := new(InstallServiceRsp)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gpmService) ListServiceVersions(ctx context.Context, in *ListServiceVersionsReq, opts ...client.CallOption) (*ListServiceVersionsRsp, error) {
	req := c.c.NewRequest(c.name, "GpmService.ListServiceVersions", in)
	out := new(ListServiceVersionsRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpmService) UpgradeService(ctx context.Context, opts ...client.CallOption) (GpmService_UpgradeServiceService, error) {
	req := c.c.NewRequest(c.name, "GpmService.UpgradeService", &UpgradeServiceReq{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &gpmServiceUpgradeService{stream}, nil
}

type GpmService_UpgradeServiceService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*UpgradeServiceReq) error
	Recv() (*UpgradeServiceRsp, error)
}

type gpmServiceUpgradeService struct {
	stream client.Stream
}

func (x *gpmServiceUpgradeService) Close() error {
	return x.stream.Close()
}

func (x *gpmServiceUpgradeService) Context() context.Context {
	return x.stream.Context()
}

func (x *gpmServiceUpgradeService) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *gpmServiceUpgradeService) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *gpmServiceUpgradeService) Send(m *UpgradeServiceReq) error {
	return x.stream.Send(m)
}

func (x *gpmServiceUpgradeService) Recv() (*UpgradeServiceRsp, error) {
	m := new(UpgradeServiceRsp)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gpmService) RollBackService(ctx context.Context, in *RollbackServiceReq, opts ...client.CallOption) (*RollbackServiceRsp, error) {
	req := c.c.NewRequest(c.name, "GpmService.RollBackService", in)
	out := new(RollbackServiceRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpmService) ForgetService(ctx context.Context, in *ForgetServiceReq, opts ...client.CallOption) (*ForgetServiceRsp, error) {
	req := c.c.NewRequest(c.name, "GpmService.ForgetService", in)
	out := new(ForgetServiceRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpmService) Ls(ctx context.Context, in *LsReq, opts ...client.CallOption) (*LsRsp, error) {
	req := c.c.NewRequest(c.name, "GpmService.Ls", in)
	out := new(LsRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpmService) Pull(ctx context.Context, in *PullReq, opts ...client.CallOption) (GpmService_PullService, error) {
	req := c.c.NewRequest(c.name, "GpmService.Pull", &PullReq{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &gpmServicePull{stream}, nil
}

type GpmService_PullService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*PullRsp, error)
}

type gpmServicePull struct {
	stream client.Stream
}

func (x *gpmServicePull) Close() error {
	return x.stream.Close()
}

func (x *gpmServicePull) Context() context.Context {
	return x.stream.Context()
}

func (x *gpmServicePull) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *gpmServicePull) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *gpmServicePull) Recv() (*PullRsp, error) {
	m := new(PullRsp)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gpmService) Push(ctx context.Context, opts ...client.CallOption) (GpmService_PushService, error) {
	req := c.c.NewRequest(c.name, "GpmService.Push", &PushReq{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &gpmServicePush{stream}, nil
}

type GpmService_PushService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*PushReq) error
	Recv() (*PushRsp, error)
}

type gpmServicePush struct {
	stream client.Stream
}

func (x *gpmServicePush) Close() error {
	return x.stream.Close()
}

func (x *gpmServicePush) Context() context.Context {
	return x.stream.Context()
}

func (x *gpmServicePush) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *gpmServicePush) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *gpmServicePush) Send(m *PushReq) error {
	return x.stream.Send(m)
}

func (x *gpmServicePush) Recv() (*PushRsp, error) {
	m := new(PushRsp)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gpmService) Exec(ctx context.Context, in *ExecReq, opts ...client.CallOption) (*ExecRsp, error) {
	req := c.c.NewRequest(c.name, "GpmService.Exec", in)
	out := new(ExecRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpmService) Terminal(ctx context.Context, opts ...client.CallOption) (GpmService_TerminalService, error) {
	req := c.c.NewRequest(c.name, "GpmService.Terminal", &TerminalReq{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &gpmServiceTerminal{stream}, nil
}

type GpmService_TerminalService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*TerminalReq) error
	Recv() (*TerminalRsp, error)
}

type gpmServiceTerminal struct {
	stream client.Stream
}

func (x *gpmServiceTerminal) Close() error {
	return x.stream.Close()
}

func (x *gpmServiceTerminal) Context() context.Context {
	return x.stream.Context()
}

func (x *gpmServiceTerminal) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *gpmServiceTerminal) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *gpmServiceTerminal) Send(m *TerminalReq) error {
	return x.stream.Send(m)
}

func (x *gpmServiceTerminal) Recv() (*TerminalRsp, error) {
	m := new(TerminalRsp)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GpmService service
// +gen:openapi
type GpmServiceHandler interface {
	// gpm 检测 gpm 服务状态
	Healthz(*vine.Context, *Empty, *Empty) error
	// gpm 升级
	UpdateSelf(*vine.Context, GpmService_UpdateSelfStream) error
	// +gen:summary=gpm 信息
	// +gen:get=/api/v1/info
	Info(*vine.Context, *InfoReq, *InfoRsp) error
	// +gen:summary=查询所有服务
	// +gen:get=/api/v1/Service
	ListService(*vine.Context, *ListServiceReq, *ListServiceRsp) error
	// +gen:summary=查询单个服务
	// +gen:get=/api/v1/Service/{name}
	GetService(*vine.Context, *GetServiceReq, *GetServiceRsp) error
	// +gen:summary=新建服务
	// +gen:post=/api/v1/Service
	CreateService(*vine.Context, *CreateServiceReq, *CreateServiceRsp) error
	// +gen:summary=修改服务信息
	// +gen:patch=/api/v1/Service/{name}
	EditService(*vine.Context, *EditServiceReq, *EditServiceRsp) error
	// +gen:summary=启动服务
	// +gen:patch=/api/v1/Service/{name}/action/start
	StartService(*vine.Context, *StartServiceReq, *StartServiceRsp) error
	// +gen:summary=停止服务
	// +gen:patch=/api/v1/Service/{name}/action/stop
	StopService(*vine.Context, *StopServiceReq, *StopServiceRsp) error
	// +gen:summary=重启服务
	// +gen:patch=/api/v1/Service/{name}/action/restart
	RestartService(*vine.Context, *RestartServiceReq, *RestartServiceRsp) error
	// +gen:summary=删除服务
	// +gen:delete=/api/v1/Service/{name}
	DeleteService(*vine.Context, *DeleteServiceReq, *DeleteServiceRsp) error
	// 动态监听服务日志
	WatchServiceLog(*vine.Context, *WatchServiceLogReq, GpmService_WatchServiceLogStream) error
	// 远程安装服务
	InstallService(*vine.Context, GpmService_InstallServiceStream) error
	// +gen:summary=查看服务历史版本
	// +gen:get=/api/v1/Service/{name}/versions
	ListServiceVersions(*vine.Context, *ListServiceVersionsReq, *ListServiceVersionsRsp) error
	// 升级服务
	UpgradeService(*vine.Context, GpmService_UpgradeServiceStream) error
	// +gen:summary=回滚服务
	// +gen:post=/api/v1/Service/{name}/rollback
	RollBackService(*vine.Context, *RollbackServiceReq, *RollbackServiceRsp) error
	// +gen:summary=删除历史版本
	// +gen:delete=/api/v1/Service/{name}/forget
	ForgetService(*vine.Context, *ForgetServiceReq, *ForgetServiceRsp) error
	// +gen:summary=获取目录信息下文件列表
	// +gen:get=/api/v1/Action/ls
	Ls(*vine.Context, *LsReq, *LsRsp) error
	// 拉取文件
	Pull(*vine.Context, *PullReq, GpmService_PullStream) error
	// 推送文件
	Push(*vine.Context, GpmService_PushStream) error
	// +gen:summary=远程执行命令
	// +gen:post=/api/v1/Action/exec
	Exec(*vine.Context, *ExecReq, *ExecRsp) error
	// 远程命令行交互
	Terminal(*vine.Context, GpmService_TerminalStream) error
}

func RegisterGpmServiceHandler(s server.Server, hdlr GpmServiceHandler, opts ...server.HandlerOption) error {
	type gpmServiceImpl interface {
		Healthz(ctx context.Context, in *Empty, out *Empty) error
		UpdateSelf(ctx context.Context, stream server.Stream) error
		Info(ctx context.Context, in *InfoReq, out *InfoRsp) error
		ListService(ctx context.Context, in *ListServiceReq, out *ListServiceRsp) error
		GetService(ctx context.Context, in *GetServiceReq, out *GetServiceRsp) error
		CreateService(ctx context.Context, in *CreateServiceReq, out *CreateServiceRsp) error
		EditService(ctx context.Context, in *EditServiceReq, out *EditServiceRsp) error
		StartService(ctx context.Context, in *StartServiceReq, out *StartServiceRsp) error
		StopService(ctx context.Context, in *StopServiceReq, out *StopServiceRsp) error
		RestartService(ctx context.Context, in *RestartServiceReq, out *RestartServiceRsp) error
		DeleteService(ctx context.Context, in *DeleteServiceReq, out *DeleteServiceRsp) error
		WatchServiceLog(ctx context.Context, stream server.Stream) error
		InstallService(ctx context.Context, stream server.Stream) error
		ListServiceVersions(ctx context.Context, in *ListServiceVersionsReq, out *ListServiceVersionsRsp) error
		UpgradeService(ctx context.Context, stream server.Stream) error
		RollBackService(ctx context.Context, in *RollbackServiceReq, out *RollbackServiceRsp) error
		ForgetService(ctx context.Context, in *ForgetServiceReq, out *ForgetServiceRsp) error
		Ls(ctx context.Context, in *LsReq, out *LsRsp) error
		Pull(ctx context.Context, stream server.Stream) error
		Push(ctx context.Context, stream server.Stream) error
		Exec(ctx context.Context, in *ExecReq, out *ExecRsp) error
		Terminal(ctx context.Context, stream server.Stream) error
	}
	type GpmService struct {
		gpmServiceImpl
	}
	h := &gpmServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:        "GpmService.Info",
		Description: "GpmService.Info",
		Path:        []string{"/api/v1/info"},
		Method:      []string{"GET"},
		Body:        "*",
		Handler:     "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:        "GpmService.ListService",
		Description: "GpmService.ListService",
		Path:        []string{"/api/v1/Service"},
		Method:      []string{"GET"},
		Body:        "*",
		Handler:     "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:        "GpmService.GetService",
		Description: "GpmService.GetService",
		Path:        []string{"/api/v1/Service/{name}"},
		Method:      []string{"GET"},
		Body:        "*",
		Handler:     "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:        "GpmService.CreateService",
		Description: "GpmService.CreateService",
		Path:        []string{"/api/v1/Service"},
		Method:      []string{"POST"},
		Body:        "*",
		Handler:     "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:        "GpmService.EditService",
		Description: "GpmService.EditService",
		Path:        []string{"/api/v1/Service/{name}"},
		Method:      []string{"PATCH"},
		Body:        "*",
		Handler:     "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:        "GpmService.StartService",
		Description: "GpmService.StartService",
		Path:        []string{"/api/v1/Service/{name}/action/start"},
		Method:      []string{"PATCH"},
		Body:        "*",
		Handler:     "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:        "GpmService.StopService",
		Description: "GpmService.StopService",
		Path:        []string{"/api/v1/Service/{name}/action/stop"},
		Method:      []string{"PATCH"},
		Body:        "*",
		Handler:     "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:        "GpmService.RestartService",
		Description: "GpmService.RestartService",
		Path:        []string{"/api/v1/Service/{name}/action/restart"},
		Method:      []string{"PATCH"},
		Body:        "*",
		Handler:     "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:        "GpmService.DeleteService",
		Description: "GpmService.DeleteService",
		Path:        []string{"/api/v1/Service/{name}"},
		Method:      []string{"DELETE"},
		Body:        "*",
		Handler:     "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:        "GpmService.ListServiceVersions",
		Description: "GpmService.ListServiceVersions",
		Path:        []string{"/api/v1/Service/{name}/versions"},
		Method:      []string{"GET"},
		Body:        "*",
		Handler:     "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:        "GpmService.RollBackService",
		Description: "GpmService.RollBackService",
		Path:        []string{"/api/v1/Service/{name}/rollback"},
		Method:      []string{"POST"},
		Body:        "*",
		Handler:     "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:        "GpmService.ForgetService",
		Description: "GpmService.ForgetService",
		Path:        []string{"/api/v1/Service/{name}/forget"},
		Method:      []string{"DELETE"},
		Body:        "*",
		Handler:     "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:        "GpmService.Ls",
		Description: "GpmService.Ls",
		Path:        []string{"/api/v1/Action/ls"},
		Method:      []string{"GET"},
		Body:        "*",
		Handler:     "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:        "GpmService.Exec",
		Description: "GpmService.Exec",
		Path:        []string{"/api/v1/Action/exec"},
		Method:      []string{"POST"},
		Body:        "*",
		Handler:     "rpc",
	}))
	openapi.RegisterOpenAPIDoc(NewGpmServiceOpenAPI())
	return s.Handle(s.NewHandler(&GpmService{h}, opts...))
}

type gpmServiceHandler struct {
	GpmServiceHandler
}

func (h *gpmServiceHandler) Healthz(ctx context.Context, in *Empty, out *Empty) error {
	return h.GpmServiceHandler.Healthz(vine.InitContext(ctx), in, out)
}

func (h *gpmServiceHandler) UpdateSelf(ctx context.Context, stream server.Stream) error {
	return h.GpmServiceHandler.UpdateSelf(vine.InitContext(ctx), &gpmServiceUpdateSelfStream{stream})
}

type GpmService_UpdateSelfStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*UpdateSelfRsp) error
	Recv() (*UpdateSelfReq, error)
}

type gpmServiceUpdateSelfStream struct {
	stream server.Stream
}

func (x *gpmServiceUpdateSelfStream) Close() error {
	return x.stream.Close()
}

func (x *gpmServiceUpdateSelfStream) Context() context.Context {
	return x.stream.Context()
}

func (x *gpmServiceUpdateSelfStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *gpmServiceUpdateSelfStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *gpmServiceUpdateSelfStream) Send(m *UpdateSelfRsp) error {
	return x.stream.Send(m)
}

func (x *gpmServiceUpdateSelfStream) Recv() (*UpdateSelfReq, error) {
	m := new(UpdateSelfReq)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *gpmServiceHandler) Info(ctx context.Context, in *InfoReq, out *InfoRsp) error {
	return h.GpmServiceHandler.Info(vine.InitContext(ctx), in, out)
}

func (h *gpmServiceHandler) ListService(ctx context.Context, in *ListServiceReq, out *ListServiceRsp) error {
	return h.GpmServiceHandler.ListService(vine.InitContext(ctx), in, out)
}

func (h *gpmServiceHandler) GetService(ctx context.Context, in *GetServiceReq, out *GetServiceRsp) error {
	return h.GpmServiceHandler.GetService(vine.InitContext(ctx), in, out)
}

func (h *gpmServiceHandler) CreateService(ctx context.Context, in *CreateServiceReq, out *CreateServiceRsp) error {
	return h.GpmServiceHandler.CreateService(vine.InitContext(ctx), in, out)
}

func (h *gpmServiceHandler) EditService(ctx context.Context, in *EditServiceReq, out *EditServiceRsp) error {
	return h.GpmServiceHandler.EditService(vine.InitContext(ctx), in, out)
}

func (h *gpmServiceHandler) StartService(ctx context.Context, in *StartServiceReq, out *StartServiceRsp) error {
	return h.GpmServiceHandler.StartService(vine.InitContext(ctx), in, out)
}

func (h *gpmServiceHandler) StopService(ctx context.Context, in *StopServiceReq, out *StopServiceRsp) error {
	return h.GpmServiceHandler.StopService(vine.InitContext(ctx), in, out)
}

func (h *gpmServiceHandler) RestartService(ctx context.Context, in *RestartServiceReq, out *RestartServiceRsp) error {
	return h.GpmServiceHandler.RestartService(vine.InitContext(ctx), in, out)
}

func (h *gpmServiceHandler) DeleteService(ctx context.Context, in *DeleteServiceReq, out *DeleteServiceRsp) error {
	return h.GpmServiceHandler.DeleteService(vine.InitContext(ctx), in, out)
}

func (h *gpmServiceHandler) WatchServiceLog(ctx context.Context, stream server.Stream) error {
	m := new(WatchServiceLogReq)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.GpmServiceHandler.WatchServiceLog(vine.InitContext(ctx), m, &gpmServiceWatchServiceLogStream{stream})
}

type GpmService_WatchServiceLogStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*WatchServiceLogRsp) error
}

type gpmServiceWatchServiceLogStream struct {
	stream server.Stream
}

func (x *gpmServiceWatchServiceLogStream) Close() error {
	return x.stream.Close()
}

func (x *gpmServiceWatchServiceLogStream) Context() context.Context {
	return x.stream.Context()
}

func (x *gpmServiceWatchServiceLogStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *gpmServiceWatchServiceLogStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *gpmServiceWatchServiceLogStream) Send(m *WatchServiceLogRsp) error {
	return x.stream.Send(m)
}

func (h *gpmServiceHandler) InstallService(ctx context.Context, stream server.Stream) error {
	return h.GpmServiceHandler.InstallService(vine.InitContext(ctx), &gpmServiceInstallServiceStream{stream})
}

type GpmService_InstallServiceStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*InstallServiceRsp) error
	Recv() (*InstallServiceReq, error)
}

type gpmServiceInstallServiceStream struct {
	stream server.Stream
}

func (x *gpmServiceInstallServiceStream) Close() error {
	return x.stream.Close()
}

func (x *gpmServiceInstallServiceStream) Context() context.Context {
	return x.stream.Context()
}

func (x *gpmServiceInstallServiceStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *gpmServiceInstallServiceStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *gpmServiceInstallServiceStream) Send(m *InstallServiceRsp) error {
	return x.stream.Send(m)
}

func (x *gpmServiceInstallServiceStream) Recv() (*InstallServiceReq, error) {
	m := new(InstallServiceReq)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *gpmServiceHandler) ListServiceVersions(ctx context.Context, in *ListServiceVersionsReq, out *ListServiceVersionsRsp) error {
	return h.GpmServiceHandler.ListServiceVersions(vine.InitContext(ctx), in, out)
}

func (h *gpmServiceHandler) UpgradeService(ctx context.Context, stream server.Stream) error {
	return h.GpmServiceHandler.UpgradeService(vine.InitContext(ctx), &gpmServiceUpgradeServiceStream{stream})
}

type GpmService_UpgradeServiceStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*UpgradeServiceRsp) error
	Recv() (*UpgradeServiceReq, error)
}

type gpmServiceUpgradeServiceStream struct {
	stream server.Stream
}

func (x *gpmServiceUpgradeServiceStream) Close() error {
	return x.stream.Close()
}

func (x *gpmServiceUpgradeServiceStream) Context() context.Context {
	return x.stream.Context()
}

func (x *gpmServiceUpgradeServiceStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *gpmServiceUpgradeServiceStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *gpmServiceUpgradeServiceStream) Send(m *UpgradeServiceRsp) error {
	return x.stream.Send(m)
}

func (x *gpmServiceUpgradeServiceStream) Recv() (*UpgradeServiceReq, error) {
	m := new(UpgradeServiceReq)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *gpmServiceHandler) RollBackService(ctx context.Context, in *RollbackServiceReq, out *RollbackServiceRsp) error {
	return h.GpmServiceHandler.RollBackService(vine.InitContext(ctx), in, out)
}

func (h *gpmServiceHandler) ForgetService(ctx context.Context, in *ForgetServiceReq, out *ForgetServiceRsp) error {
	return h.GpmServiceHandler.ForgetService(vine.InitContext(ctx), in, out)
}

func (h *gpmServiceHandler) Ls(ctx context.Context, in *LsReq, out *LsRsp) error {
	return h.GpmServiceHandler.Ls(vine.InitContext(ctx), in, out)
}

func (h *gpmServiceHandler) Pull(ctx context.Context, stream server.Stream) error {
	m := new(PullReq)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.GpmServiceHandler.Pull(vine.InitContext(ctx), m, &gpmServicePullStream{stream})
}

type GpmService_PullStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*PullRsp) error
}

type gpmServicePullStream struct {
	stream server.Stream
}

func (x *gpmServicePullStream) Close() error {
	return x.stream.Close()
}

func (x *gpmServicePullStream) Context() context.Context {
	return x.stream.Context()
}

func (x *gpmServicePullStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *gpmServicePullStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *gpmServicePullStream) Send(m *PullRsp) error {
	return x.stream.Send(m)
}

func (h *gpmServiceHandler) Push(ctx context.Context, stream server.Stream) error {
	return h.GpmServiceHandler.Push(vine.InitContext(ctx), &gpmServicePushStream{stream})
}

type GpmService_PushStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*PushRsp) error
	Recv() (*PushReq, error)
}

type gpmServicePushStream struct {
	stream server.Stream
}

func (x *gpmServicePushStream) Close() error {
	return x.stream.Close()
}

func (x *gpmServicePushStream) Context() context.Context {
	return x.stream.Context()
}

func (x *gpmServicePushStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *gpmServicePushStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *gpmServicePushStream) Send(m *PushRsp) error {
	return x.stream.Send(m)
}

func (x *gpmServicePushStream) Recv() (*PushReq, error) {
	m := new(PushReq)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *gpmServiceHandler) Exec(ctx context.Context, in *ExecReq, out *ExecRsp) error {
	return h.GpmServiceHandler.Exec(vine.InitContext(ctx), in, out)
}

func (h *gpmServiceHandler) Terminal(ctx context.Context, stream server.Stream) error {
	return h.GpmServiceHandler.Terminal(vine.InitContext(ctx), &gpmServiceTerminalStream{stream})
}

type GpmService_TerminalStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*TerminalRsp) error
	Recv() (*TerminalReq, error)
}

type gpmServiceTerminalStream struct {
	stream server.Stream
}

func (x *gpmServiceTerminalStream) Close() error {
	return x.stream.Close()
}

func (x *gpmServiceTerminalStream) Context() context.Context {
	return x.stream.Context()
}

func (x *gpmServiceTerminalStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *gpmServiceTerminalStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *gpmServiceTerminalStream) Send(m *TerminalRsp) error {
	return x.stream.Send(m)
}

func (x *gpmServiceTerminalStream) Recv() (*TerminalReq, error) {
	m := new(TerminalReq)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
